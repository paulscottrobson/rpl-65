TOK_STRUCT_INC = $06
TOK_STRUCT_DEC = $09
TOK_STRUCT_NEUTRAL = $0c

KWD_SYS_EOL                    = $0000 ; %eol
KWD_SYS_CONST                  = $0001 ; %const
KWD_SYS_CALL                   = $0002 ; %call
KWD_SYS_COMMENT                = $0003 ; %comment
KWD_SYS_QSTRING                = $0004 ; %qstring
KWD_SYS_DEFINE                 = $0005 ; %define
KWD_IF                         = $0006 ; if
KWD_REPEAT                     = $0007 ; repeat
KWD_FOR                        = $0008 ; for
KWD_ENDIF                      = $0009 ; endif
KWD_UNTIL                      = $000a ; until
KWD_NEXT                       = $000b ; next
KWD_STAR                       = $000c ; *
KWD_SLASH                      = $000d ; /
KWD_MOD                        = $000e ; mod
KWD_PLUS                       = $000f ; +
KWD_MINUS                      = $0010 ; -
KWD_AND                        = $0011 ; and
KWD_OR                         = $0012 ; or
KWD_XOR                        = $0013 ; xor
KWD_SHL                        = $0014 ; shl
KWD_SHR                        = $0015 ; shr
KWD_EQUAL                      = $0016 ; =
KWD_LESSGREATER                = $0017 ; <>
KWD_GREATER                    = $0018 ; >
KWD_LESS                       = $0019 ; <
KWD_GREATEREQUAL               = $001a ; >=
KWD_LESSEQUAL                  = $001b ; <=
KWD_CAT                        = $001c ; c@
KWD_CPLING                     = $001d ; c!
KWD_AT                         = $001e ; @
KWD_PLING                      = $001f ; !
KWD_DPLING                     = $0020 ; d!
KWD_ALLOC                      = $0021 ; alloc
KWD_HAT                        = $0022 ; ^
KWD_LSQPAREN                   = $0023 ; [
KWD_RSQPAREN                   = $0024 ; ]
KWD_ABS                        = $0025 ; abs
KWD_NEGATE                     = $0026 ; negate
KWD_NOT                        = $0027 ; not
KWD_PLUSPLUS                   = $0028 ; ++
KWD_MINUSMINUS                 = $0029 ; --
KWD_BSWAP                      = $002a ; bswap
KWD_LESSLESS                   = $002b ; <<
KWD_GREATERGREATER             = $002c ; >>
KWD_SGN                        = $002d ; sgn
KWD_RND                        = $002e ; rnd
KWD_CLR                        = $002f ; clr
KWD_DROP                       = $0030 ; drop
KWD_DUP                        = $0031 ; dup
KWD_NIP                        = $0032 ; nip
KWD_OVER                       = $0033 ; over
KWD_SWAP                       = $0034 ; swap
KWD_ELSE                       = $0035 ; else
KWD_INDEX                      = $0036 ; index
KWD_SEMICOLON                  = $0037 ; ;
KWD_ASSERT                     = $0038 ; assert
KWD_LIST                       = $0039 ; list
KWD_NEW                        = $003a ; new
KWD_OLD                        = $003b ; old
KWD_STOP                       = $003c ; stop
KWD_RUN                        = $003d ; run
KWD_END                        = $003e ; end
KWD_SAVE                       = $003f ; save
KWD_LOAD                       = $0040 ; load

KeywordText:
	.text $01,$ff                          ; $0000 %eol
	.text $01,$ff                          ; $0001 %const
	.text $01,$ff                          ; $0002 %call
	.text $01,$ff                          ; $0003 %comment
	.text $01,$ff                          ; $0004 %qstring
	.text $01,$ff                          ; $0005 %define
	.text $02,$49,$c6                      ; $0006 if
	.text $06,$52,$45,$50,$45,$41,$d4      ; $0007 repeat
	.text $03,$46,$4f,$d2                  ; $0008 for
	.text $05,$45,$4e,$44,$49,$c6          ; $0009 endif
	.text $05,$55,$4e,$54,$49,$cc          ; $000a until
	.text $04,$4e,$45,$58,$d4              ; $000b next
	.text $01,$aa                          ; $000c *
	.text $01,$af                          ; $000d /
	.text $03,$4d,$4f,$c4                  ; $000e mod
	.text $01,$ab                          ; $000f +
	.text $01,$ad                          ; $0010 -
	.text $03,$41,$4e,$c4                  ; $0011 and
	.text $02,$4f,$d2                      ; $0012 or
	.text $03,$58,$4f,$d2                  ; $0013 xor
	.text $03,$53,$48,$cc                  ; $0014 shl
	.text $03,$53,$48,$d2                  ; $0015 shr
	.text $01,$bd                          ; $0016 =
	.text $02,$3c,$be                      ; $0017 <>
	.text $01,$be                          ; $0018 >
	.text $01,$bc                          ; $0019 <
	.text $02,$3e,$bd                      ; $001a >=
	.text $02,$3c,$bd                      ; $001b <=
	.text $02,$43,$c0                      ; $001c c@
	.text $02,$43,$a1                      ; $001d c!
	.text $01,$c0                          ; $001e @
	.text $01,$a1                          ; $001f !
	.text $02,$44,$a1                      ; $0020 d!
	.text $05,$41,$4c,$4c,$4f,$c3          ; $0021 alloc
	.text $01,$de                          ; $0022 ^
	.text $01,$db                          ; $0023 [
	.text $01,$dd                          ; $0024 ]
	.text $03,$41,$42,$d3                  ; $0025 abs
	.text $06,$4e,$45,$47,$41,$54,$c5      ; $0026 negate
	.text $03,$4e,$4f,$d4                  ; $0027 not
	.text $02,$2b,$ab                      ; $0028 ++
	.text $02,$2d,$ad                      ; $0029 --
	.text $05,$42,$53,$57,$41,$d0          ; $002a bswap
	.text $02,$3c,$bc                      ; $002b <<
	.text $02,$3e,$be                      ; $002c >>
	.text $03,$53,$47,$ce                  ; $002d sgn
	.text $03,$52,$4e,$c4                  ; $002e rnd
	.text $03,$43,$4c,$d2                  ; $002f clr
	.text $04,$44,$52,$4f,$d0              ; $0030 drop
	.text $03,$44,$55,$d0                  ; $0031 dup
	.text $03,$4e,$49,$d0                  ; $0032 nip
	.text $04,$4f,$56,$45,$d2              ; $0033 over
	.text $04,$53,$57,$41,$d0              ; $0034 swap
	.text $04,$45,$4c,$53,$c5              ; $0035 else
	.text $05,$49,$4e,$44,$45,$d8          ; $0036 index
	.text $01,$bb                          ; $0037 ;
	.text $06,$41,$53,$53,$45,$52,$d4      ; $0038 assert
	.text $04,$4c,$49,$53,$d4              ; $0039 list
	.text $03,$4e,$45,$d7                  ; $003a new
	.text $03,$4f,$4c,$c4                  ; $003b old
	.text $04,$53,$54,$4f,$d0              ; $003c stop
	.text $03,$52,$55,$ce                  ; $003d run
	.text $03,$45,$4e,$c4                  ; $003e end
	.text $04,$53,$41,$56,$c5              ; $003f save
	.text $04,$4c,$4f,$41,$c4              ; $0040 load
	.byte 0

	.align 2
DispatchHandler:
	.word ExecuteNextLine          ; $0000 %eol
	.word LongConstant             ; $0001 %const
	.word SyntaxError              ; $0002 %call
	.word ExecuteComment           ; $0003 %comment
	.word StringConstant           ; $0004 %qstring
	.word SyntaxError              ; $0005 %define
	.word SyntaxError              ; $0006 if
	.word SyntaxError              ; $0007 repeat
	.word SyntaxError              ; $0008 for
	.word SyntaxError              ; $0009 endif
	.word SyntaxError              ; $000a until
	.word SyntaxError              ; $000b next
	.word MulInteger16             ; $000c *
	.word DivInteger16             ; $000d /
	.word ModInteger16             ; $000e mod
	.word Stack_Add                ; $000f +
	.word Stack_Sub                ; $0010 -
	.word Stack_And                ; $0011 and
	.word Stack_Or                 ; $0012 or
	.word Stack_Xor                ; $0013 xor
	.word Stack_Shl                ; $0014 shl
	.word Stack_Shr                ; $0015 shr
	.word Comp_Equal               ; $0016 =
	.word Comp_NotEqual            ; $0017 <>
	.word Comp_Greater             ; $0018 >
	.word Comp_Less                ; $0019 <
	.word Comp_GreaterEqual        ; $001a >=
	.word Comp_LessEqual           ; $001b <=
	.word Mem_Peek                 ; $001c c@
	.word Mem_Poke                 ; $001d c!
	.word Mem_WPeek                ; $001e @
	.word Mem_WPoke                ; $001f !
	.word Mem_DWPoke               ; $0020 d!
	.word Mem_Alloc                ; $0021 alloc
	.word SyntaxError              ; $0022 ^
	.word SyntaxError              ; $0023 [
	.word SyntaxError              ; $0024 ]
	.word Unary_Absolute           ; $0025 abs
	.word Unary_Negate             ; $0026 negate
	.word Unary_Not                ; $0027 not
	.word Unary_Increment          ; $0028 ++
	.word Unary_Decrement          ; $0029 --
	.word Unary_BSwap              ; $002a bswap
	.word Unary_Shl                ; $002b <<
	.word Unary_Shr                ; $002c >>
	.word Unary_Sgn                ; $002d sgn
	.word Random_Handler           ; $002e rnd
	.word Stack_Empty              ; $002f clr
	.word Stack_Drop               ; $0030 drop
	.word Stack_Dup                ; $0031 dup
	.word Stack_Nip                ; $0032 nip
	.word Stack_Over               ; $0033 over
	.word Stack_Swap               ; $0034 swap
	.word SyntaxError              ; $0035 else
	.word SyntaxError              ; $0036 index
	.word SyntaxError              ; $0037 ;
	.word SyntaxError              ; $0038 assert
	.word SyntaxError              ; $0039 list
	.word SyntaxError              ; $003a new
	.word SyntaxError              ; $003b old
	.word SyntaxError              ; $003c stop
	.word SyntaxError              ; $003d run
	.word SyntaxError              ; $003e end
	.word SyntaxError              ; $003f save
	.word SyntaxError              ; $0040 load

