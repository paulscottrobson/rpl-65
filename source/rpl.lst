
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o rpl.prg -L rpl.lst main.asm
; Sat Nov 16 08:32:38 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; Build address
=$0f00					MemoryStart = $0F00 						; Main memory space here
=$9f00					HighMemory = $9F00							; Where memory ends
=$0600					StackAddress = $0600						; Stack (1/2k bytes)
=$0800					InputBuffer = $0800							; Input Buffer (must be on a page boundary)
=$09ff					IntStack = $09FF 							; Interpreter Stack
=$08e0					ConvertBuffer = $08E0 						; Conversion buffer (numbers)
=$0a00					TokenBuffer = $0A00 						; Tokenisation Buffer
=16					HashTableSize = 16 							; size of hash table (# entries)
>0000					CodePtr: 		.word ? 					; code pointer
>0002					zTemp0:			.word ?						; temporary words
>0004					zTemp1: 		.word ?
>0006					zTemp2: 		.word ?
>0008					zTemp3: 		.word ?
>000a					zTemp4:			.word ?
>000c					zTemp5:			.word ?
>000e					iStack:			.word ?						; stack pointer
>0010					signCount:		.byte ? 					; divide sign count.
>0011					allocPtr:		.word ? 					; memory allocation pointer (down)
>0013					memVarPtr:		.word ? 					; pointer for memory variables (up)
>0015					randomSeed:		.word ? 					; random number seed
>0017					prefixCharacter:.byte ?						; char to print before listed element.
>0018					breakCount:		.byte ? 					; counter avoids repeated break checks
>0019					tokenOffset:	.byte ? 					; position in output token buffer.
>0f00					FastVariables:	.fill 	64 					; fast variable memory.
>0f40					VariableHashTable:.fill	HashTableSize * 2 	; hash tables (variables)
=4096					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0600					lowStack = StackAddress 					; low stack bytes
=1792					highStack = StackAddress+256				; high stack bytes
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8

;******  Return to file: main.asm


;******  Processing file: macros.inc


;******  Return to file: main.asm

.0e00	4c 00 a0	jmp $a000			jmp 	Start

;******  Processing file: generated/program.inc

>1000	13 e8 03 03 0d 54 48 45			.byte	$13,$e8,$03,$03,$0d,$54,$48,$45,$20,$42,$41,$4c,$4c,$20,$44,$45,$4d,$4f,$00,$0f,$f2,$03,$01,$00,$60,$22,$c2,$c1,$cc,$cc,$cd,$c5,$ed,$00,$0b,$fc,$03,$a0,$22,$c3,$cf,$d5,$ce,$f4,$00,$0d,$06,$04,$01,$8e,$00,$22,$e1,$01,$d2,$ff,$25,$00,$12,$10,$04,$c3,$cf,$d5,$ce,$f4,$08,$38,$02,$42,$04,$02,$4c,$04,$0b,$00,$08,$1a,$04,$01,$50,$00,$08,$00,$12,$24,$04,$c3,$cf,$d5,$ce,$f4,$08,$38,$02,$42,$04,$02,$92,$04,$0b,$00,$05,$2e,$04,$0b,$00,$05,$38,$04,$40,$00,$23,$42,$04,$05,$0b,$c2,$c1,$cc,$cc,$db,$d3,$c5,$cc,$c5,$c3,$f4,$2d,$2d,$2d,$2d,$c2,$c1,$cc,$cc,$cd,$c5,$ed,$0f,$22,$c2,$c1,$cc,$ec,$39,$00,$29,$4c,$04,$05,$09,$c2,$c1,$cc,$cc,$db,$c9,$ce,$c9,$f4,$30,$27,$01,$50,$00,$0e,$22,$c2,$c1,$cc,$ec,$23,$80,$24,$30,$27,$bc,$0e,$22,$c2,$c1,$cc,$ec,$23,$81,$24,$00,$2d,$56,$04,$02,$60,$04,$22,$c2,$c1,$cc,$ec,$23,$82,$24,$02,$60,$04,$22,$c2,$c1,$cc,$ec,$23,$83,$24,$30,$87,$11,$2a,$22,$c2,$c1,$cc,$ec,$23,$84,$24,$01,$51,$00,$02,$6a,$04,$39,$00,$1c,$60,$04,$05,$0b,$d2,$c1,$ce,$c4,$cf,$cd,$db,$d3,$c9,$c7,$ee,$30,$81,$11,$06,$81,$37,$01,$ff,$ff,$09,$39,$00,$0f,$6a,$04,$05,$09,$c2,$c1,$cc,$cc,$db,$c4,$d2,$c1,$f7,$00,$10,$74,$04,$c2,$c1,$cc,$ec,$23,$80,$24,$2d,$01,$20,$9f,$1d,$00,$0f,$7e,$04,$c2,$c1,$cc,$ec,$23,$81,$24,$01,$21,$9f,$1d,$00,$19,$88,$04,$90,$01,$22,$9f,$1d,$01,$23,$9f,$1d,$c2,$c1,$cc,$ec,$23,$84,$24,$01,$23,$9f,$1d,$39,$00,$0f,$92,$04,$05,$09,$c2,$c1,$cc,$cc,$db,$cd,$cf,$d6,$e5,$00,$08,$9c,$04,$a0,$02,$6a,$04,$00,$1c,$a6,$04,$c2,$c1,$cc,$ec,$23,$80,$24,$c2,$c1,$cc,$ec,$23,$82,$24,$0f,$33,$22,$c2,$c1,$cc,$ec,$23,$80,$24,$00,$1f,$b0,$04,$33,$01,$50,$00,$1a,$36,$80,$19,$12,$06,$c2,$c1,$cc,$ec,$23,$82,$24,$28,$22,$c2,$c1,$cc,$ec,$23,$82,$24,$09,$00,$1c,$ba,$04,$c2,$c1,$cc,$ec,$23,$81,$24,$c2,$c1,$cc,$ec,$23,$83,$24,$0f,$33,$22,$c2,$c1,$cc,$ec,$23,$81,$24,$00,$1d,$c4,$04,$33,$bc,$1a,$36,$80,$19,$12,$06,$c2,$c1,$cc,$ec,$23,$83,$24,$28,$22,$c2,$c1,$cc,$ec,$23,$83,$24,$09,$00,$0a,$ce,$04,$01,$51,$00,$02,$6a,$04,$00,$05,$d8,$04,$39,$00
>1008	20 42 41 4c 4c 20 44 45 4d 4f 00 0f f2 03 01 00
>1018	60 22 c2 c1 cc cc cd c5 ed 00 0b fc 03 a0 22 c3
>1028	cf d5 ce f4 00 0d 06 04 01 8e 00 22 e1 01 d2 ff
>1038	25 00 12 10 04 c3 cf d5 ce f4 08 38 02 42 04 02
>1048	4c 04 0b 00 08 1a 04 01 50 00 08 00 12 24 04 c3
>1058	cf d5 ce f4 08 38 02 42 04 02 92 04 0b 00 05 2e
>1068	04 0b 00 05 38 04 40 00 23 42 04 05 0b c2 c1 cc
>1078	cc db d3 c5 cc c5 c3 f4 2d 2d 2d 2d c2 c1 cc cc
>1088	cd c5 ed 0f 22 c2 c1 cc ec 39 00 29 4c 04 05 09
>1098	c2 c1 cc cc db c9 ce c9 f4 30 27 01 50 00 0e 22
>10a8	c2 c1 cc ec 23 80 24 30 27 bc 0e 22 c2 c1 cc ec
>10b8	23 81 24 00 2d 56 04 02 60 04 22 c2 c1 cc ec 23
>10c8	82 24 02 60 04 22 c2 c1 cc ec 23 83 24 30 87 11
>10d8	2a 22 c2 c1 cc ec 23 84 24 01 51 00 02 6a 04 39
>10e8	00 1c 60 04 05 0b d2 c1 ce c4 cf cd db d3 c9 c7
>10f8	ee 30 81 11 06 81 37 01 ff ff 09 39 00 0f 6a 04
>1108	05 09 c2 c1 cc cc db c4 d2 c1 f7 00 10 74 04 c2
>1118	c1 cc ec 23 80 24 2d 01 20 9f 1d 00 0f 7e 04 c2
>1128	c1 cc ec 23 81 24 01 21 9f 1d 00 19 88 04 90 01
>1138	22 9f 1d 01 23 9f 1d c2 c1 cc ec 23 84 24 01 23
>1148	9f 1d 39 00 0f 92 04 05 09 c2 c1 cc cc db cd cf
>1158	d6 e5 00 08 9c 04 a0 02 6a 04 00 1c a6 04 c2 c1
>1168	cc ec 23 80 24 c2 c1 cc ec 23 82 24 0f 33 22 c2
>1178	c1 cc ec 23 80 24 00 1f b0 04 33 01 50 00 1a 36
>1188	80 19 12 06 c2 c1 cc ec 23 82 24 28 22 c2 c1 cc
>1198	ec 23 82 24 09 00 1c ba 04 c2 c1 cc ec 23 81 24
>11a8	c2 c1 cc ec 23 83 24 0f 33 22 c2 c1 cc ec 23 81
>11b8	24 00 1d c4 04 33 bc 1a 36 80 19 12 06 c2 c1 cc
>11c8	ec 23 83 24 28 22 c2 c1 cc ec 23 83 24 09 00 0a
>11d8	ce 04 01 51 00 02 6a 04 00 05 d8 04 39 00

;******  Return to file: main.asm

.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 32 a3	jsr $a332			jsr 	ExternInitialise			; set up external stuff.
.a006	a2 63		ldx #$63			ldx 	#BootPrompt & $FF 			; print start up.
.a008	a0 a0		ldy #$a0			ldy 	#BootPrompt >> 8
.a00a	20 53 a2	jsr $a253			jsr 	PrintStringXY
.a00d	a2 00		ldx #$00			ldx 	#(HighMemory-ProgramStart) & $FF
.a00f	a0 8f		ldy #$8f			ldy 	#(HighMemory-ProgramStart) >> 8
.a011	20 47 a2	jsr $a247			jsr 	PrintIntegerUnsigned
.a014	a2 80		ldx #$80			ldx 	#BootPrompt2 & $FF
.a016	a0 a0		ldy #$a0			ldy 	#BootPrompt2 >> 8
.a018	20 53 a2	jsr $a253			jsr 	PrintStringXY
.a01b					WarmStart:
.a01b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a01d	9a		txs				txs
.a01e	20 87 a3	jsr $a387			jsr 	ExternInput					; input a line.
.a021	ad 00 08	lda $0800			lda 	InputBuffer 				; get the first character.
.a024	48		pha				pha
.a025	20 a9 a7	jsr $a7a9			jsr 	TokeniseInputBuffer 		; tokenise it
.a028	68		pla				pla
.a029	c9 20		cmp #$20			cmp 	#" "						; if the first character is space always execute it
.a02b	f0 0d		beq $a03a			beq 	ExecuteLine
.a02d	ad 03 0a	lda $0a03			lda 	TokenBuffer+3 				; is the first thing a line number
.a030	c9 01		cmp #$01			cmp 	#KWD_SYS_CONST
.a032	f0 0d		beq $a041			beq 	LineNumber
.a034	29 c0		and #$c0			and 	#$C0
.a036	c9 80		cmp #$80			cmp 	#$80
.a038	f0 07		beq $a041			beq 	LineNumber
.a03a					ExecuteLine:
.a03a	a2 00		ldx #$00			ldx 	#TokenBuffer & $FF
.a03c	a0 0a		ldy #$0a			ldy 	#TokenBuffer >> 8
.a03e	4c 72 a2	jmp $a272			jmp 	ExecuteFromXY
.a041					LineNumber:
.a041	ad 03 0a	lda $0a03			lda 	TokenBuffer+3 				; set up for short constant line#
.a044	a2 00		ldx #$00			ldx 	#0
.a046	a0 04		ldy #$04			ldy 	#4
.a048	38		sec				sec
.a049	e9 80		sbc #$80			sbc 	#$80
.a04b	c9 40		cmp #$40			cmp 	#$40
.a04d	90 08		bcc $a057			bcc 	_HaveLineNumber
.a04f	ad 04 0a	lda $0a04			lda 	TokenBuffer+4
.a052	ae 05 0a	ldx $0a05			ldx 	TokenBuffer+5
.a055	a0 06		ldy #$06			ldy 	#6
.a057					_HaveLineNumber:
.a057	48		pha				pha 								; a fudge. Because you use
.a058	b9 00 0a	lda $0a00,y			lda 	TokenBuffer,y 				; nnn list so much, this forces
.a05b	c9 3b		cmp #$3b			cmp 	#KWD_LIST 					; this to be executed and not
.a05d	f0 db		beq $a03a			beq 	ExecuteLine 				; to be code.
.a05f	68		pla				pla
.a060	4c 7c a4	jmp $a47c			jmp 	EditProgram
.a063					BootPrompt:
>a063	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/65 (16-NOV-19) ***",13,13
>a06b	36 35 20 28 31 36 2d 4e 4f 56 2d 31 39 29 20 2a
>a07b	2a 2a 0d 0d
>a07f	00						.byte 	0
.a080					BootPrompt2:
>a080	20 42 59 54 45 53 20 41				.text 	" BYTES AVAILABLE.",13,13,0
>a088	56 41 49 4c 41 42 4c 45 2e 0d 0d 00

;******  Processing file: generated/rpl.inc

=$06					TOK_NOT_CONTROL = $06
=$06					TOK_STRUCT_INC = $06
=$09					TOK_STRUCT_DEC = $09
=$0c					TOK_STRUCT_NEUTRAL = $0c
=$0000					KWD_SYS_EOL                    = $0000 ; %eol
=$0001					KWD_SYS_CONST                  = $0001 ; %const
=$0002					KWD_SYS_CALL                   = $0002 ; %call
=$0003					KWD_SYS_COMMENT                = $0003 ; %comment
=$0004					KWD_SYS_QSTRING                = $0004 ; %qstring
=$0005					KWD_SYS_DEFINE                 = $0005 ; %define
=$0006					KWD_IF                         = $0006 ; if
=$0007					KWD_REPEAT                     = $0007 ; repeat
=$0008					KWD_FOR                        = $0008 ; for
=$0009					KWD_ENDIF                      = $0009 ; endif
=$000a					KWD_UNTIL                      = $000a ; until
=$000b					KWD_NEXT                       = $000b ; next
=$000c					KWD_STAR                       = $000c ; *
=$000d					KWD_SLASH                      = $000d ; /
=$000e					KWD_MOD                        = $000e ; mod
=$000f					KWD_PLUS                       = $000f ; +
=$0010					KWD_MINUS                      = $0010 ; -
=$0011					KWD_AND                        = $0011 ; and
=$0012					KWD_OR                         = $0012 ; or
=$0013					KWD_XOR                        = $0013 ; xor
=$0014					KWD_SHL                        = $0014 ; shl
=$0015					KWD_SHR                        = $0015 ; shr
=$0016					KWD_EQUAL                      = $0016 ; =
=$0017					KWD_LESSGREATER                = $0017 ; <>
=$0018					KWD_GREATER                    = $0018 ; >
=$0019					KWD_LESS                       = $0019 ; <
=$001a					KWD_GREATEREQUAL               = $001a ; >=
=$001b					KWD_LESSEQUAL                  = $001b ; <=
=$001c					KWD_CAT                        = $001c ; c@
=$001d					KWD_CPLING                     = $001d ; c!
=$001e					KWD_AT                         = $001e ; @
=$001f					KWD_PLING                      = $001f ; !
=$0020					KWD_DPLING                     = $0020 ; d!
=$0021					KWD_ALLOC                      = $0021 ; alloc
=$0022					KWD_HAT                        = $0022 ; ^
=$0023					KWD_LSQPAREN                   = $0023 ; [
=$0024					KWD_RSQPAREN                   = $0024 ; ]
=$0025					KWD_SYS                        = $0025 ; sys
=$0026					KWD_QMARK                      = $0026 ; ?
=$0027					KWD_ABS                        = $0027 ; abs
=$0028					KWD_NEGATE                     = $0028 ; negate
=$0029					KWD_NOT                        = $0029 ; not
=$002a					KWD_PLUSPLUS                   = $002a ; ++
=$002b					KWD_MINUSMINUS                 = $002b ; --
=$002c					KWD_BSWAP                      = $002c ; bswap
=$002d					KWD_LESSLESS                   = $002d ; <<
=$002e					KWD_GREATERGREATER             = $002e ; >>
=$002f					KWD_SGN                        = $002f ; sgn
=$0030					KWD_RND                        = $0030 ; rnd
=$0031					KWD_CLR                        = $0031 ; clr
=$0032					KWD_DROP                       = $0032 ; drop
=$0033					KWD_DUP                        = $0033 ; dup
=$0034					KWD_NIP                        = $0034 ; nip
=$0035					KWD_OVER                       = $0035 ; over
=$0036					KWD_SWAP                       = $0036 ; swap
=$0037					KWD_ELSE                       = $0037 ; else
=$0038					KWD_INDEX                      = $0038 ; index
=$0039					KWD_SEMICOLON                  = $0039 ; ;
=$003a					KWD_ASSERT                     = $003a ; assert
=$003b					KWD_LIST                       = $003b ; list
=$003c					KWD_NEW                        = $003c ; new
=$003d					KWD_OLD                        = $003d ; old
=$003e					KWD_STOP                       = $003e ; stop
=$003f					KWD_RUN                        = $003f ; run
=$0040					KWD_END                        = $0040 ; end
=$0041					KWD_SAVE                       = $0041 ; save
=$0042					KWD_LOAD                       = $0042 ; load
.a094					KeywordText:
>a094	01 ff					.text $01,$ff                          ; $0000 %eol
>a096	01 ff					.text $01,$ff                          ; $0001 %const
>a098	01 ff					.text $01,$ff                          ; $0002 %call
>a09a	01 ff					.text $01,$ff                          ; $0003 %comment
>a09c	01 ff					.text $01,$ff                          ; $0004 %qstring
>a09e	01 ff					.text $01,$ff                          ; $0005 %define
>a0a0	02 49 c6				.text $02,$49,$c6                      ; $0006 if
>a0a3	06 52 45 50 45 41 d4			.text $06,$52,$45,$50,$45,$41,$d4      ; $0007 repeat
>a0aa	03 46 4f d2				.text $03,$46,$4f,$d2                  ; $0008 for
>a0ae	05 45 4e 44 49 c6			.text $05,$45,$4e,$44,$49,$c6          ; $0009 endif
>a0b4	05 55 4e 54 49 cc			.text $05,$55,$4e,$54,$49,$cc          ; $000a until
>a0ba	04 4e 45 58 d4				.text $04,$4e,$45,$58,$d4              ; $000b next
>a0bf	01 aa					.text $01,$aa                          ; $000c *
>a0c1	01 af					.text $01,$af                          ; $000d /
>a0c3	03 4d 4f c4				.text $03,$4d,$4f,$c4                  ; $000e mod
>a0c7	01 ab					.text $01,$ab                          ; $000f +
>a0c9	01 ad					.text $01,$ad                          ; $0010 -
>a0cb	03 41 4e c4				.text $03,$41,$4e,$c4                  ; $0011 and
>a0cf	02 4f d2				.text $02,$4f,$d2                      ; $0012 or
>a0d2	03 58 4f d2				.text $03,$58,$4f,$d2                  ; $0013 xor
>a0d6	03 53 48 cc				.text $03,$53,$48,$cc                  ; $0014 shl
>a0da	03 53 48 d2				.text $03,$53,$48,$d2                  ; $0015 shr
>a0de	01 bd					.text $01,$bd                          ; $0016 =
>a0e0	02 3c be				.text $02,$3c,$be                      ; $0017 <>
>a0e3	01 be					.text $01,$be                          ; $0018 >
>a0e5	01 bc					.text $01,$bc                          ; $0019 <
>a0e7	02 3e bd				.text $02,$3e,$bd                      ; $001a >=
>a0ea	02 3c bd				.text $02,$3c,$bd                      ; $001b <=
>a0ed	02 43 c0				.text $02,$43,$c0                      ; $001c c@
>a0f0	02 43 a1				.text $02,$43,$a1                      ; $001d c!
>a0f3	01 c0					.text $01,$c0                          ; $001e @
>a0f5	01 a1					.text $01,$a1                          ; $001f !
>a0f7	02 44 a1				.text $02,$44,$a1                      ; $0020 d!
>a0fa	05 41 4c 4c 4f c3			.text $05,$41,$4c,$4c,$4f,$c3          ; $0021 alloc
>a100	01 de					.text $01,$de                          ; $0022 ^
>a102	01 db					.text $01,$db                          ; $0023 [
>a104	01 dd					.text $01,$dd                          ; $0024 ]
>a106	03 53 59 d3				.text $03,$53,$59,$d3                  ; $0025 sys
>a10a	01 bf					.text $01,$bf                          ; $0026 ?
>a10c	03 41 42 d3				.text $03,$41,$42,$d3                  ; $0027 abs
>a110	06 4e 45 47 41 54 c5			.text $06,$4e,$45,$47,$41,$54,$c5      ; $0028 negate
>a117	03 4e 4f d4				.text $03,$4e,$4f,$d4                  ; $0029 not
>a11b	02 2b ab				.text $02,$2b,$ab                      ; $002a ++
>a11e	02 2d ad				.text $02,$2d,$ad                      ; $002b --
>a121	05 42 53 57 41 d0			.text $05,$42,$53,$57,$41,$d0          ; $002c bswap
>a127	02 3c bc				.text $02,$3c,$bc                      ; $002d <<
>a12a	02 3e be				.text $02,$3e,$be                      ; $002e >>
>a12d	03 53 47 ce				.text $03,$53,$47,$ce                  ; $002f sgn
>a131	03 52 4e c4				.text $03,$52,$4e,$c4                  ; $0030 rnd
>a135	03 43 4c d2				.text $03,$43,$4c,$d2                  ; $0031 clr
>a139	04 44 52 4f d0				.text $04,$44,$52,$4f,$d0              ; $0032 drop
>a13e	03 44 55 d0				.text $03,$44,$55,$d0                  ; $0033 dup
>a142	03 4e 49 d0				.text $03,$4e,$49,$d0                  ; $0034 nip
>a146	04 4f 56 45 d2				.text $04,$4f,$56,$45,$d2              ; $0035 over
>a14b	04 53 57 41 d0				.text $04,$53,$57,$41,$d0              ; $0036 swap
>a150	04 45 4c 53 c5				.text $04,$45,$4c,$53,$c5              ; $0037 else
>a155	05 49 4e 44 45 d8			.text $05,$49,$4e,$44,$45,$d8          ; $0038 index
>a15b	01 bb					.text $01,$bb                          ; $0039 ;
>a15d	06 41 53 53 45 52 d4			.text $06,$41,$53,$53,$45,$52,$d4      ; $003a assert
>a164	04 4c 49 53 d4				.text $04,$4c,$49,$53,$d4              ; $003b list
>a169	03 4e 45 d7				.text $03,$4e,$45,$d7                  ; $003c new
>a16d	03 4f 4c c4				.text $03,$4f,$4c,$c4                  ; $003d old
>a171	04 53 54 4f d0				.text $04,$53,$54,$4f,$d0              ; $003e stop
>a176	03 52 55 ce				.text $03,$52,$55,$ce                  ; $003f run
>a17a	03 45 4e c4				.text $03,$45,$4e,$c4                  ; $0040 end
>a17e	04 53 41 56 c5				.text $04,$53,$41,$56,$c5              ; $0041 save
>a183	04 4c 4f 41 c4				.text $04,$4c,$4f,$41,$c4              ; $0042 load
>a188	00					.byte 0
>a189						.align 2
.a18a					DispatchHandler:
>a18a	f3 a2					.word ExecuteNextLine          ; $0000 %eol
>a18c	09 a3					.word LongConstant             ; $0001 %const
>a18e	cb af					.word Command_Call             ; $0002 %call
>a190	f3 a2					.word ExecuteComment           ; $0003 %comment
>a192	1a a3					.word StringConstant           ; $0004 %qstring
>a194	10 a2					.word SyntaxError              ; $0005 %define
>a196	41 b0					.word Structure_If             ; $0006 if
>a198	f5 b0					.word Struct_Repeat            ; $0007 repeat
>a19a	31 b1					.word Struct_For               ; $0008 for
>a19c	7e b0					.word Structure_Endif          ; $0009 endif
>a19e	01 b1					.word Struct_Until             ; $000a until
>a1a0	74 b1					.word Struct_Next              ; $000b next
>a1a2	cf ae					.word MulInteger16             ; $000c *
>a1a4	4d ae					.word DivInteger16             ; $000d /
>a1a6	be ae					.word ModInteger16             ; $000e mod
>a1a8	39 ad					.word Stack_Add                ; $000f +
>a1aa	51 ad					.word Stack_Sub                ; $0010 -
>a1ac	69 ad					.word Stack_And                ; $0011 and
>a1ae	97 ad					.word Stack_Or                 ; $0012 or
>a1b0	80 ad					.word Stack_Xor                ; $0013 xor
>a1b2	ae ad					.word Stack_Shl                ; $0014 shl
>a1b4	b2 ad					.word Stack_Shr                ; $0015 shr
>a1b6	e3 ad					.word Comp_Equal               ; $0016 =
>a1b8	e7 ad					.word Comp_NotEqual            ; $0017 <>
>a1ba	30 ae					.word Comp_Greater             ; $0018 >
>a1bc	0b ae					.word Comp_Less                ; $0019 <
>a1be	0f ae					.word Comp_GreaterEqual        ; $001a >=
>a1c0	2c ae					.word Comp_LessEqual           ; $001b <=
>a1c2	32 ab					.word Mem_Peek                 ; $001c c@
>a1c4	64 ab					.word Mem_Poke                 ; $001d c!
>a1c6	48 ab					.word Mem_WPeek                ; $001e @
>a1c8	79 ab					.word Mem_WPoke                ; $001f !
>a1ca	97 ab					.word Mem_DWPoke               ; $0020 d!
>a1cc	b1 ab					.word Mem_Alloc                ; $0021 alloc
>a1ce	3f ac					.word Command_Store            ; $0022 ^
>a1d0	10 a2					.word SyntaxError              ; $0023 [
>a1d2	10 a2					.word SyntaxError              ; $0024 ]
>a1d4	d0 ac					.word Command_Sys              ; $0025 sys
>a1d6	f2 ac					.word Command_DumpStack        ; $0026 ?
>a1d8	0d af					.word Unary_Absolute           ; $0027 abs
>a1da	16 af					.word Unary_Negate             ; $0028 negate
>a1dc	2b af					.word Unary_Not                ; $0029 not
>a1de	3f af					.word Unary_Increment          ; $002a ++
>a1e0	4b af					.word Unary_Decrement          ; $002b --
>a1e2	5a af					.word Unary_BSwap              ; $002c bswap
>a1e4	6c af					.word Unary_Shl                ; $002d <<
>a1e6	76 af					.word Unary_Shr                ; $002e >>
>a1e8	80 af					.word Unary_Sgn                ; $002f sgn
>a1ea	a3 af					.word Random_Handler           ; $0030 rnd
>a1ec	df ab					.word Stack_Empty              ; $0031 clr
>a1ee	e5 ab					.word Stack_Drop               ; $0032 drop
>a1f0	ea ab					.word Stack_Dup                ; $0033 dup
>a1f2	fb ab					.word Stack_Nip                ; $0034 nip
>a1f4	0c ac					.word Stack_Over               ; $0035 over
>a1f6	1d ac					.word Stack_Swap               ; $0036 swap
>a1f8	64 b0					.word Structure_Else           ; $0037 else
>a1fa	55 b1					.word Struct_Index             ; $0038 index
>a1fc	21 b0					.word Command_Return           ; $0039 ;
>a1fe	b9 ac					.word Command_Assert           ; $003a assert
>a200	51 a9					.word Cmd_List                 ; $003b list
>a202	7e ac					.word Command_New              ; $003c new
>a204	85 ac					.word Command_Old              ; $003d old
>a206	af ac					.word Command_Stop             ; $003e stop
>a208	6e a2					.word ExecuteProgram           ; $003f run
>a20a	ab ac					.word Command_End              ; $0040 end
>a20c	10 a2					.word SyntaxError              ; $0041 save
>a20e	10 a2					.word SyntaxError              ; $0042 load

;******  Return to file: main.asm


;******  Processing file: core/error.asm

.a210					SyntaxError:
.a210	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a213	53 59 4e 54 41 58 00				.text 	"SYNTAX",0
.a21a					ErrorHandler:
.a21a	fa		plx				plx 								; pull address off.
.a21b	7a		ply				ply
.a21c	e8		inx				inx 								; point to message
.a21d	d0 01		bne $a220			bne 	_EHNoCarry
.a21f	c8		iny				iny
.a220					_EHNoCarry:
.a220	20 53 a2	jsr $a253			jsr 	PrintStringXY 				; print string at XY
.a223	b2 00		lda ($00)			lda 	(codePtr) 					; gone off the end, like in structures ?
.a225	f0 13		beq $a23a			beq 	_EHNoLine
.a227	a2 42		ldx #$42			ldx 	#_EHMessage & $FF 			; print " AT "
.a229	a0 a2		ldy #$a2			ldy 	#_EHMessage >> 8
.a22b	20 53 a2	jsr $a253			jsr 	PrintStringXY
.a22e	a0 01		ldy #$01			ldy 	#1 							; line# into YX.
.a230	b1 00		lda ($00),y			lda 	(codePtr),y
.a232	aa		tax				tax
.a233	c8		iny				iny
.a234	b1 00		lda ($00),y			lda 	(codePtr),y
.a236	a8		tay				tay
.a237	20 47 a2	jsr $a247			jsr 	PrintIntegerUnsigned
.a23a					_EHNoLine:
.a23a	a9 0d		lda #$0d			lda 	#13
.a23c	20 64 a2	jsr $a264			jsr 	PrintCharacter
.a23f	4c 1b a0	jmp $a01b			jmp 	WarmStart
.a242					_EHMessage:
>a242	20 41 54 20 00					.text	" AT ",0
.a247					PrintIntegerUnsigned:
.a247	20 64 a6	jsr $a664			jsr 	IntToString
.a24a	a2 e0		ldx #$e0			ldx 	#ConvertBuffer & $FF 		; print number
.a24c	a0 08		ldy #$08			ldy 	#ConvertBuffer >> 8
.a24e	20 53 a2	jsr $a253			jsr 	PrintStringXY
.a251	98		tya				tya
.a252	60		rts				rts
.a253					PrintStringXY:
.a253	86 02		stx $02				stx 	zTemp0
.a255	84 03		sty $03				sty 	zTemp0+1
.a257	a0 00		ldy #$00			ldy 	#0
.a259	b1 02		lda ($02),y	_PSLoop:lda 	(zTemp0),y
.a25b	f0 06		beq $a263			beq 	_PSExit
.a25d	20 64 a2	jsr $a264			jsr 	PrintCharacter
.a260	c8		iny				iny
.a261	80 f6		bra $a259			bra 	_PSLoop
.a263	60		rts		_PSExit:rts
.a264					PrintCharacter:
.a264	48		pha				pha
.a265	da		phx				phx
.a266	5a		phy				phy
.a267	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a26a	7a		ply				ply
.a26b	fa		plx				plx
.a26c	68		pla				pla
.a26d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/execute.asm

.a26e					ExecuteProgram:
.a26e	a2 00		ldx #$00			ldx 	#ProgramStart & $FF
.a270	a0 10		ldy #$10			ldy 	#ProgramStart >> 8
.a272					ExecuteFromXY:
.a272	20 5b a5	jsr $a55b			jsr 	ResetMemory 				; reset alloc pointers, variables etc.
.a275	20 97 a5	jsr $a597			jsr 	StackReset 					; reset the CPU stack.
.a278	a2 ff		ldx #$ff			ldx 	#$FF 						; empty the data stack
.a27a	80 0a		bra $a286			bra 	ExecuteLoop
.a27c					ShortConstant:
.a27c	c8		iny				iny 								; skip short const
.a27d	e8		inx				inx 								; space on stack
.a27e	29 3f		and #$3f			and 	#$3F 						; the value
.a280	9d 00 06	sta $0600,x			sta 	lowStack,x 					; put on stack..
.a283	9e 00 07	stz $0700,x			stz 	highStack,x
.a286					ExecuteLoop:
.a286	e6 18		inc $18				inc 	breakCount 					; check break sometimes.
.a288	d0 03		bne $a28d			bne 	_EXNoBreak
.a28a	20 41 a3	jsr $a341			jsr 	ExternCheckBreak
.a28d					_EXNoBreak:
.a28d	e0 fe		cpx #$fe			cpx		#254 						; stack underflow
.a28f	f0 58		beq $a2e9			beq 	_ELUnderflow
.a291	b1 00		lda ($00),y			lda 	(codePtr),y 				; get next character
.a293	30 07		bmi $a29c			bmi 	_ELNotToken
.a295	c8		iny				iny 								; skip the token
.a296	da		phx				phx 								; save X on the stack
.a297	0a		asl a				asl 	a 							; double the token, put into X
.a298	aa		tax				tax
.a299	7c 8a a1	jmp ($a18a,x)			jmp 	(DispatchHandler,x)
.a29c					_ELNotToken:
.a29c	c9 c0		cmp #$c0			cmp 	#$C0 						; is it 80-BF
.a29e	90 dc		bcc $a27c			bcc 	ShortConstant 				; yes, it's a short constant
.a2a0	c9 e0		cmp #$e0			cmp 	#$E0 						; is it E0-FF - i.e. it is one letter variable.
.a2a2	90 1e		bcc $a2c2			bcc 	_ELNotFastVariable
.a2a4	c8		iny				iny 								; get the next token.
.a2a5	b1 00		lda ($00),y			lda 	(codePtr),y
.a2a7	88		dey				dey
.a2a8	c9 23		cmp #$23			cmp 	#KWD_LSQPAREN 				; if not [ then it is a simple variable
.a2aa	f0 16		beq $a2c2			beq 	_ELNotFastVariable 			; which we can optimise.
.a2ac	5a		phy				phy 								; save Y
.a2ad	b1 00		lda ($00),y			lda 	(codePtr),y 				; variable E0-FF
.a2af	0a		asl a				asl 	a 							; it is now C0-FE, steps of 2.
.a2b0	a8		tay				tay 								; access via Y
.a2b1	e8		inx				inx 								; make space on the stack.
.a2b2	b9 40 0e	lda $0e40,y			lda 	FastVariables-$C0,y 		; copy the fast variable
.a2b5	9d 00 06	sta $0600,x			sta 	lowStack,x
.a2b8	b9 41 0e	lda $0e41,y			lda 	FastVariables-$C0+1,y
.a2bb	9d 00 07	sta $0700,x			sta 	highStack,x
.a2be	7a		ply				ply 								; restore code pointer
.a2bf	c8		iny				iny 								; skip variable.
.a2c0	80 c4		bra $a286			bra 	ExecuteLoop
.a2c2					_ELNotFastVariable:
.a2c2	18		clc				clc									; do not autocreate if not found.
.a2c3	20 af a6	jsr $a6af			jsr 	VariableFind				; find the variable.
.a2c6	90 14		bcc $a2dc			bcc 	_ELUnknown
.a2c8	20 22 a4	jsr $a422			jsr 	IndexCheck
.a2cb	5a		phy				phy 								; copy to stack
.a2cc	e8		inx				inx
.a2cd	b2 02		lda ($02)			lda 	(zTemp0)
.a2cf	9d 00 06	sta $0600,x			sta 	lowStack,x
.a2d2	a0 01		ldy #$01			ldy 	#1
.a2d4	b1 02		lda ($02),y			lda 	(zTemp0),y
.a2d6	9d 00 07	sta $0700,x			sta 	highStack,x
.a2d9	7a		ply				ply
.a2da	80 aa		bra $a286			bra 	ExecuteLoop
.a2dc					_ELUnknown:
>a2dc	ff						.byte 	$FF
.a2dd	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a2e0	55 4e 4b 4e 4f 57 4e 3f				.text 	"UNKNOWN?",0
>a2e8	00
.a2e9					_ELUnderflow:
.a2e9	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a2ec	53 54 41 43 4b 3f 00				.text 	"STACK?",0
.a2f3					ExecuteNextLine:
.a2f3					ExecuteComment:
.a2f3	fa		plx				plx
.a2f4	18		clc				clc 								; skip forward
.a2f5	b2 00		lda ($00)			lda 	(codePtr)
.a2f7	18		clc				clc
.a2f8	65 00		adc $00				adc 	codePtr
.a2fa	85 00		sta $00				sta 	codePtr
.a2fc	90 02		bcc $a300			bcc 	_ENLNoCarry
.a2fe	e6 01		inc $01				inc 	codePtr+1
.a300					_ENLNoCarry:
.a300	a0 03		ldy #$03			ldy 	#3 							; start of next line
.a302	b2 00		lda ($00)			lda 	(codePtr) 					; check offset non zero
.a304	d0 80		bne $a286			bne 	ExecuteLoop
.a306	4c ab ac	jmp $acab			jmp	 	Command_End 				; if zero end program.
.a309					LongConstant:
.a309	fa		plx				plx
.a30a	e8		inx				inx 								; space for constant
.a30b	b1 00		lda ($00),y			lda 	(codePtr),y 				; copy it in.
.a30d	9d 00 06	sta $0600,x			sta 	lowStack,x
.a310	c8		iny				iny
.a311	b1 00		lda ($00),y			lda 	(codePtr),y
.a313	9d 00 07	sta $0700,x			sta 	highStack,x
.a316	c8		iny				iny
.a317	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.a31a					StringConstant:
.a31a	fa		plx				plx
.a31b	e8		inx				inx
.a31c	18		clc				clc 								; copy Y + codePtr in.
.a31d	98		tya				tya
.a31e	65 00		adc $00				adc 	codePtr
.a320	9d 00 06	sta $0600,x			sta 	lowStack,x
.a323	a5 01		lda $01				lda 	codePtr+1
.a325	69 00		adc #$00			adc 	#0
.a327	9d 00 07	sta $0700,x			sta 	highStack,x
.a32a	98		tya				tya 								; add 1 + length to Y
.a32b	38		sec				sec
.a32c	71 00		adc ($00),y			adc 	(codePtr),y
.a32e	a8		tay				tay
.a32f	4c 86 a2	jmp $a286			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: core/extern.asm

.a332					ExternInitialise:
.a332	a9 02		lda #$02			lda 	#$02 						; set colour
.a334	8d 86 02	sta $0286			sta 	646
.a337	a9 93		lda #$93			lda 	#147 						; clear screen
.a339	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a33c	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a33e	4c 5f a3	jmp $a35f			jmp 	ExternColour
.a341					ExternCheckBreak:
.a341	da		phx				phx 								; make sure we keep XY
.a342	5a		phy				phy
.a343	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a346	f0 03		beq $a34b			beq		_ECBExit 					; stopped
.a348	7a		ply				ply 								; restore and exit.
.a349	fa		plx				plx
.a34a	60		rts				rts
.a34b					_ECBExit:
.a34b	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a34e	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.a355					ExternPrint:
.a355	48		pha				pha
.a356	da		phx				phx
.a357	5a		phy				phy
.a358	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a35b	7a		ply				ply
.a35c	fa		plx				plx
.a35d	68		pla				pla
.a35e	60		rts				rts
.a35f					ExternColour:
.a35f	48		pha				pha
.a360	da		phx				phx
.a361	48		pha				pha
.a362	29 08		and #$08			and 	#8
.a364	0a		asl a				asl 	a
.a365	0a		asl a				asl 	a
.a366	0a		asl a				asl 	a
.a367	0a		asl a				asl 	a
.a368	49 92		eor #$92			eor 	#$92
.a36a	20 55 a3	jsr $a355			jsr 	ExternPrint
.a36d	a9 0e		lda #$0e			lda 	#14							; lower case
.a36f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a372	68		pla				pla
.a373	29 07		and #$07			and 	#7
.a375	aa		tax				tax
.a376	bd 7f a3	lda $a37f,x			lda 	_ECTable,x
.a379	20 55 a3	jsr $a355			jsr 	ExternPrint
.a37c	fa		plx				plx
.a37d	68		pla				pla
.a37e	60		rts				rts
.a37f					_ECTable:
>a37f	90						.byte 	144
>a380	1c						.byte 	28
>a381	1e						.byte 	30
>a382	9e						.byte 	158
>a383	1f						.byte 	31
>a384	9c						.byte 	156
>a385	9f						.byte 	159
>a386	05						.byte 	5
.a387					ExternInput:
.a387	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a389	85 02		sta $02				sta 	zTemp0
.a38b	a9 08		lda #$08			lda 	#(InputBuffer >> 8)
.a38d	85 03		sta $03				sta 	zTemp0+1
.a38f	a9 07		lda #$07			lda 	#COL_WHITE
.a391	20 5f a3	jsr $a35f			jsr 	ExternColour
.a394	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a397	29 7f		and #$7f			and 	#$7F
.a399	c9 0d		cmp #$0d			cmp 	#13
.a39b	f0 0a		beq $a3a7			beq 	_EIExit
.a39d	92 02		sta ($02)			sta 	(zTemp0)
.a39f	e6 02		inc $02				inc 	zTemp0
.a3a1	d0 f1		bne $a394			bne 	_EIRead
.a3a3	e6 03		inc $03				inc 	zTemp0+1
.a3a5	80 ed		bra $a394			bra 	_EIRead
.a3a7	a9 00		lda #$00	_EIExit:lda 	#0
.a3a9	92 02		sta ($02)			sta 	(zTemp0)
.a3ab	a9 0d		lda #$0d			lda 	#13
.a3ad	20 55 a3	jsr $a355			jsr 	ExternPrint
.a3b0	60		rts				rts
.a3b1					ExternSave:
.a3b1	da		phx				phx
.a3b2	5a		phy				phy
.a3b3	85 06		sta $06				sta 	zTemp2 						; save start
.a3b5	84 07		sty $07				sty 	zTemp2+1
.a3b7	20 19 a4	jsr $a419			jsr 	EXGetLength 				; get length of file into A
.a3ba	a6 02		ldx $02				ldx 	zTemp0
.a3bc	a4 03		ldy $03				ldy 	zTemp0+1
.a3be	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a3c1	a9 01		lda #$01			lda 	#1
.a3c3	a2 01		ldx #$01			ldx 	#1	 						; device #1
.a3c5	a0 00		ldy #$00			ldy 	#0
.a3c7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a3ca	a6 04		ldx $04				ldx 	zTemp1 						; end address
.a3cc	a4 05		ldy $05				ldy 	zTemp1+1
.a3ce	a9 06		lda #$06			lda 	#zTemp2
.a3d0	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.a3d3	b0 03		bcs $a3d8			bcs 	_ESSave
.a3d5	7a		ply				ply
.a3d6	fa		plx				plx
.a3d7	60		rts				rts
.a3d8					_ESSave:
.a3d8	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a3db	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>a3e3	4c 45 44 00
.a3e7					ExternLoad:
.a3e7	da		phx				phx 								; save XY
.a3e8	5a		phy				phy
.a3e9	48		pha				pha 								; save target
.a3ea	5a		phy				phy
.a3eb	20 19 a4	jsr $a419			jsr 	EXGetLength 				; get length of file into A
.a3ee	a6 02		ldx $02				ldx 	zTemp0
.a3f0	a4 03		ldy $03				ldy 	zTemp0+1
.a3f2	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a3f5	a9 01		lda #$01			lda 	#1
.a3f7	a2 01		ldx #$01			ldx 	#1	 						; device #1
.a3f9	a0 00		ldy #$00			ldy 	#0
.a3fb	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a3fe	7a		ply				ply 								; restore target to YX and call load
.a3ff	fa		plx				plx
.a400	a9 00		lda #$00			lda 	#0 							; load command
.a402	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.a405	b0 03		bcs $a40a			bcs 	_ESLoad
.a407	7a		ply				ply
.a408	fa		plx				plx
.a409	60		rts				rts
.a40a					_ESLoad:
.a40a	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a40d	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>a415	4c 45 44 00
.a419					EXGetLength:
.a419	a0 ff		ldy #$ff			ldy 	#255
.a41b	c8		iny		_EXGL:	iny
.a41c	b1 02		lda ($02),y			lda 	(zTemp0),y
.a41e	d0 fb		bne $a41b			bne 	_EXGL
.a420	98		tya				tya
.a421	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/index.asm

.a422					IndexCheck:
.a422	b1 00		lda ($00),y			lda 	(codePtr),y 			; do we have a [
.a424	c9 23		cmp #$23			cmp 	#KWD_LSQPAREN
.a426	f0 01		beq $a429			beq 	_ICFound
.a428	60		rts				rts
.a429					_ICFound:
.a429	c8		iny				iny 							; get next
.a42a	b1 00		lda ($00),y			lda 	(codePtr),y
.a42c	c9 24		cmp #$24			cmp 	#KWD_RSQPAREN 			; is it ], then stack value index.
.a42e	f0 2b		beq $a45b			beq 	_ICStackIndex
.a430	38		sec				sec
.a431	e9 80		sbc #$80			sbc 	#$80 					; this will shift 00-3F into that range
.a433	c9 40		cmp #$40			cmp 	#$40
.a435	b0 1a		bcs $a451			bcs 	_ICError
.a437	0a		asl a				asl 	a 						; double index clear carry
.a438	5a		phy				phy 							; put into Y
.a439	72 02		adc ($02)			adc 	(zTemp0) 				; follow the vector adding the index
.a43b	48		pha				pha
.a43c	a0 01		ldy #$01			ldy 	#1
.a43e	b1 02		lda ($02),y			lda 	(zTemp0),y
.a440	69 00		adc #$00			adc 	#0
.a442	85 03		sta $03				sta 	zTemp0+1
.a444	68		pla				pla
.a445	85 02		sta $02				sta 	zTemp0
.a447	7a		ply				ply 							; restore position.
.a448	c8		iny				iny								; skip index
.a449	b1 00		lda ($00),y			lda 	(codePtr),y 			; get & skip next
.a44b	c8		iny				iny
.a44c	c9 24		cmp #$24			cmp 	#KWD_RSQPAREN 			; should be ]
.a44e	d0 01		bne $a451			bne 	_ICError
.a450	60		rts				rts
.a451					_ICError:
.a451	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a454	49 4e 44 45 58 3f 00				.text 	"INDEX?",0
.a45b					_ICStackIndex:
.a45b	c8		iny				iny 							; skip the ]
.a45c	bd 00 06	lda $0600,x			lda 	lowStack,x 				; get tos -> zTemp1 doubled
.a45f	0a		asl a				asl 	a
.a460	85 04		sta $04				sta 	zTemp1
.a462	bd 00 07	lda $0700,x			lda 	highStack,x
.a465	2a		rol a				rol 	a
.a466	85 05		sta $05				sta 	zTemp1+1
.a468	ca		dex				dex 							; throw TOS.
.a469	5a		phy				phy
.a46a	a0 01		ldy #$01			ldy 	#1 						; calculate new address
.a46c	b2 02		lda ($02)			lda 	(zTemp0)
.a46e	65 04		adc $04				adc 	zTemp1
.a470	48		pha				pha
.a471	b1 02		lda ($02),y			lda 	(zTemp0),y
.a473	65 05		adc $05				adc 	zTemp1+1
.a475	85 03		sta $03				sta 	zTemp0+1
.a477	68		pla				pla
.a478	85 02		sta $02				sta 	zTemp0
.a47a	7a		ply				ply 							; restore pos and exit.
.a47b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/program.asm

.a47c					EditProgram:
.a47c	86 0d		stx $0d				stx 	zTemp5+1 					; save line number.
.a47e	85 0c		sta $0c				sta 	zTemp5
.a480	5a		phy				phy 								; save token buffer offset
.a481	20 a4 a4	jsr $a4a4			jsr 	EDFindLine					; find line address -> zTemp1
.a484	90 0f		bcc $a495			bcc 	_EPNotFound 				; if missing don't delete it.
.a486	a5 04		lda $04				lda 	zTemp1 						; save line address
.a488	48		pha				pha
.a489	a5 05		lda $05				lda 	zTemp1+1
.a48b	48		pha				pha
.a48c	20 d9 a4	jsr $a4d9			jsr 	EDDeleteLine 				; delete the line
.a48f	68		pla				pla 								; restore line address
.a490	85 05		sta $05				sta 	zTemp1+1
.a492	68		pla				pla
.a493	85 04		sta $04				sta 	zTemp1
.a495					_EPNotFound:
.a495	7a		ply				ply 								; get offset
.a496	b9 00 0a	lda $0a00,y			lda 	TokenBuffer,y 				; if something after line#
.a499	f0 03		beq $a49e			beq 	_EPNoInsert
.a49b	20 fc a4	jsr $a4fc			jsr 	EDInsertLine 				; insert line back in.
.a49e					_EPNoInsert:
.a49e	20 5b a5	jsr $a55b			jsr 	ResetMemory
.a4a1	4c 1b a0	jmp $a01b			jmp 	WarmStart
.a4a4					EDFindLine:
.a4a4	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; set zTemp1 to start of program
.a4a6	85 04		sta $04				sta 	zTemp1
.a4a8	a9 10		lda #$10			lda 	#ProgramStart >> 8
.a4aa	85 05		sta $05				sta 	zTemp1+1
.a4ac					_EDFLLoop:
.a4ac	a0 00		ldy #$00			ldy 	#0 							; reached the end
.a4ae	b1 04		lda ($04),y			lda 	(zTemp1),y
.a4b0	f0 23		beq $a4d5			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.a4b2	c8		iny				iny
.a4b3	38		sec				sec
.a4b4	a5 0c		lda $0c				lda 	zTemp5						; subtract the current from the target
.a4b6	f1 04		sbc ($04),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.a4b8	aa		tax				tax	 								; this will return 10.
.a4b9	a5 0d		lda $0d				lda 	zTemp5+1
.a4bb	c8		iny				iny
.a4bc	f1 04		sbc ($04),y			sbc 	(zTemp1),y
.a4be	90 15		bcc $a4d5			bcc 	_EDFLFail					; if target < current then failed.
.a4c0	d0 04		bne $a4c6			bne 	_EDFLNext 					; if non-zero then goto next
.a4c2	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.a4c4	f0 11		beq $a4d7			beq 	_EDFLFound
.a4c6					_EDFLNext:
.a4c6	a0 00		ldy #$00			ldy 	#0 							; get offset
.a4c8	18		clc				clc
.a4c9	b1 04		lda ($04),y			lda 	(zTemp1),y
.a4cb	65 04		adc $04				adc 	zTemp1 						; add to pointer
.a4cd	85 04		sta $04				sta 	zTemp1
.a4cf	90 db		bcc $a4ac			bcc 	_EDFLLoop
.a4d1	e6 05		inc $05				inc 	zTemp1+1 					; carry out.
.a4d3	80 d7		bra $a4ac			bra 	_EDFLLoop
.a4d5					_EDFLFail:
.a4d5	18		clc				clc
.a4d6	60		rts				rts
.a4d7					_EDFLFound:
.a4d7	38		sec				sec
.a4d8	60		rts				rts
.a4d9					EDDeleteLine:
.a4d9	20 79 a5	jsr $a579			jsr 	ResetVarMemory
.a4dc	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.a4de	a2 00		ldx #$00			ldx 	#0
.a4e0	b1 04		lda ($04),y			lda 	(zTemp1),y
.a4e2	a8		tay				tay 								; put in Y
.a4e3					_EDDelLoop:
.a4e3	b1 04		lda ($04),y			lda 	(zTemp1),y 					; get it
.a4e5	81 04		sta ($04,x)			sta 	(zTemp1,x) 					; write it.
.a4e7	a5 04		lda $04				lda 	zTemp1 						; check if pointer has reached the end of
.a4e9	c5 13		cmp $13				cmp		memVarPtr 					; low memory. We will have copied down an
.a4eb	d0 06		bne $a4f3			bne 	_EDDelNext 					; extra pile of stuff - technically should
.a4ed	a5 05		lda $05				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.a4ef	c5 14		cmp $14				cmp 	memVarPtr+1					; doesn't really matter.
.a4f1	f0 08		beq $a4fb			beq		_EDDelExit
.a4f3					_EDDelNext:
.a4f3	e6 04		inc $04				inc 	zTemp1 						; go to next byte.
.a4f5	d0 ec		bne $a4e3			bne 	_EDDelLoop
.a4f7	e6 05		inc $05				inc 	zTemp1+1
.a4f9	80 e8		bra $a4e3			bra 	_EDDelLoop
.a4fb					_EDDelExit:
.a4fb	60		rts				rts
.a4fc					EDInsertLine:
.a4fc	84 02		sty $02				sty 	zTemp0						; zTemp0 = address of code.
.a4fe	a9 0a		lda #$0a			lda 	#TokenBuffer >> 8
.a500	85 03		sta $03				sta 	zTemp0+1
.a502	20 79 a5	jsr $a579			jsr 	ResetVarMemory
.a505	a5 13		lda $13				lda 	memVarPtr 					; copy high memory to zTemp3
.a507	85 08		sta $08				sta 	zTemp3
.a509	a5 14		lda $14				lda 	memVarPtr+1
.a50b	85 09		sta $09				sta 	zTemp3+1
.a50d	a5 19		lda $19				lda 	TokenOffset 				; work out the space needed.
.a50f	38		sec				sec
.a510	e5 02		sbc $02				sbc 	zTemp0
.a512	18		clc				clc
.a513	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.a515	48		pha				pha 								; save total size (e.g. offset)
.a516	85 0a		sta $0a				sta 	zTemp4 						; save for copying
.a518	a8		tay				tay 								; in Y
.a519	a2 00		ldx #$00			ldx 	#0
.a51b					_EDInsLoop:
.a51b	a1 08		lda ($08,x)			lda 	(zTemp3,x)					; copy it up
.a51d	91 08		sta ($08),y			sta 	(zTemp3),y
.a51f	a5 08		lda $08				lda 	zTemp3 						; reached the insert point (zTemp1)
.a521	c5 04		cmp $04				cmp 	zTemp1
.a523	d0 06		bne $a52b			bne 	_EDINextShift
.a525	a5 09		lda $09				lda 	zTemp3+1
.a527	c5 05		cmp $05				cmp 	zTemp1+1
.a529	f0 0a		beq $a535			beq 	_EDIShiftOver
.a52b					_EDINextShift:
.a52b	a5 08		lda $08				lda 	zTemp3 					; decrement the copy pointer.
.a52d	d0 02		bne $a531			bne 	_EDINoBorrow
.a52f	c6 09		dec $09				dec 	zTemp3+1
.a531					_EDINoBorrow:
.a531	c6 08		dec $08				dec 	zTemp3
.a533	80 e6		bra $a51b			bra 	_EDInsLoop
.a535					_EDIShiftOver:
.a535	68		pla				pla 								; this is the size + others, e.g. offset
.a536	a0 00		ldy #$00			ldy 	#0
.a538	91 08		sta ($08),y			sta 	(zTemp3),y 					; write that out.
.a53a	a5 0c		lda $0c				lda 	zTemp5 						; write Line# out
.a53c	c8		iny				iny
.a53d	91 08		sta ($08),y			sta 	(zTemp3),y
.a53f	a5 0d		lda $0d				lda 	zTemp5+1
.a541	c8		iny				iny
.a542	91 08		sta ($08),y			sta 	(zTemp3),y
.a544	c8		iny				iny 								; where the code goes.
.a545	a2 00		ldx #$00			ldx 	#0 							; comes from
.a547					_EDICopyCode:
.a547	a1 02		lda ($02,x)			lda 	(zTemp0,x)					; read from the current line
.a549	91 08		sta ($08),y			sta 	(zTemp3),y 					; write out
.a54b	c8		iny				iny 								; bump pointers
.a54c	e6 02		inc $02				inc 	zTemp0
.a54e	d0 02		bne $a552			bne 	_EDINoCarry
.a550	e6 03		inc $03				inc 	zTemp0+1
.a552					_EDINoCarry:
.a552	c6 0a		dec $0a				dec 	zTemp4 						; copy data in
.a554	a5 0a		lda $0a				lda 	zTemp4 						; this is the total count - first 3 bytes seperate
.a556	c9 03		cmp #$03			cmp 	#3 							; so exit on 3
.a558	d0 ed		bne $a547			bne 	_EDICopyCode
.a55a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/reset.asm

.a55b					ResetMemory:
.a55b	da		phx				phx									; save run address
.a55c	5a		phy				phy
.a55d	a9 00		lda #$00			lda 	#(highMemory) & $FF
.a55f	85 11		sta $11				sta 	allocPtr
.a561	a9 9f		lda #$9f			lda 	#(highMemory) >> 8
.a563	85 12		sta $12				sta 	allocPtr+1
.a565	20 79 a5	jsr $a579			jsr 	ResetVarMemory
.a568	a2 1f		ldx #$1f			ldx 	#HashTableSize*2-1 			; bytes to erase
.a56a					_RMEraseHash:
.a56a	9e 40 0f	stz $0f40,x			stz 	VariableHashTable,x
.a56d	ca		dex				dex
.a56e	10 fa		bpl $a56a			bpl 	_RMEraseHash
.a570	7a		ply				ply 								; restore and set run address
.a571	fa		plx				plx
.a572	84 01		sty $01				sty 	codePtr+1
.a574	86 00		stx $00				stx 	codePtr
.a576	a0 03		ldy #$03			ldy 	#3
.a578	60		rts				rts
.a579					ResetVarMemory:
.a579	a9 00		lda #$00			lda 	#(ProgramStart) & $FF
.a57b	85 13		sta $13				sta 	memVarPtr
.a57d	a9 10		lda #$10			lda 	#(ProgramStart) >> 8
.a57f	85 14		sta $14				sta 	memVarPtr+1
.a581					_RMFindEnd:
.a581	b2 13		lda ($13)			lda 	(memVarPtr)					; offset 0, found end.
.a583	f0 0b		beq $a590			beq 	_RMFoundEnd 				; advance to next.
.a585	18		clc				clc
.a586	65 13		adc $13				adc 	memVarPtr
.a588	85 13		sta $13				sta 	memVarPtr
.a58a	90 f5		bcc $a581			bcc 	_RMFindEnd
.a58c	e6 14		inc $14				inc 	memVarPtr+1
.a58e	80 f1		bra $a581			bra 	_RMFindEnd
.a590					_RMFoundEnd:
.a590	e6 13		inc $13				inc 	memVarPtr 					; advance past last offset $00
.a592	d0 02		bne $a596			bne 	_RMNoCarry
.a594	e6 14		inc $14				inc 	memVarPtr+1
.a596					_RMNoCarry:
.a596	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/stack.asm

.a597					StackReset:
.a597	a9 ff		lda #$ff			lda 	#IntStack & $FF 			; reset SP
.a599	85 0e		sta $0e				sta 	iStack
.a59b	a9 09		lda #$09			lda 	#IntStack >> 8
.a59d	85 0f		sta $0f				sta 	iStack+1
.a59f	a9 ff		lda #$ff			lda 	#$FF						; dummy TOS value
.a5a1	92 0e		sta ($0e)			sta 	(iStack)
.a5a3	60		rts				rts
.a5a4					StackPushByte:
.a5a4	c6 0e		dec $0e				dec 	iStack
.a5a6	92 0e		sta ($0e)			sta 	(iStack)
.a5a8	f0 01		beq $a5ab			beq 	_SPBUnderflow
.a5aa	60		rts				rts
.a5ab					_SPBUnderflow:
.a5ab	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a5ae	53 54 41 43 4b 00				.text 	"STACK",0
.a5b4					StackPushPosition:
.a5b4	98		tya				tya
.a5b5	20 a4 a5	jsr $a5a4			jsr 	StackPushByte
.a5b8	a5 01		lda $01				lda 	codePtr+1
.a5ba	20 a4 a5	jsr $a5a4			jsr 	StackPushByte
.a5bd	a5 00		lda $00				lda 	codePtr
.a5bf	20 a4 a5	jsr $a5a4			jsr 	StackPushByte
.a5c2	60		rts				rts
.a5c3					StackCheckTop:
.a5c3	d2 0e		cmp ($0e)			cmp 	(iStack)
.a5c5	f0 02		beq $a5c9			beq 	_SCTOk
.a5c7	18		clc				clc
.a5c8	60		rts				rts
.a5c9	38		sec		_SCTOk:	sec
.a5ca	60		rts				rts
.a5cb					StackPop:
.a5cb	18		clc				clc
.a5cc	65 0e		adc $0e				adc 	iStack
.a5ce	85 0e		sta $0e				sta 	iStack
.a5d0	60		rts				rts
.a5d1					StackRestorePosition:
.a5d1	b1 0e		lda ($0e),y			lda 	(iStack),y
.a5d3	85 00		sta $00				sta 	codePtr
.a5d5	c8		iny				iny
.a5d6	b1 0e		lda ($0e),y			lda 	(iStack),y
.a5d8	85 01		sta $01				sta 	codePtr+1
.a5da	c8		iny				iny
.a5db	b1 0e		lda ($0e),y			lda 	(iStack),y
.a5dd	a8		tay				tay
.a5de	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/tointeger.asm

.a5df					StringToInt:
.a5df	86 08		stx $08				stx 	zTemp3 						; save string
.a5e1	84 09		sty $09				sty 	zTemp3+1
.a5e3	64 10		stz $10				stz 	signCount 					; signcount is the number of chars copied.
.a5e5	a2 10		ldx #$10			ldx 	#16 						; base to use.
.a5e7	a0 01		ldy #$01			ldy 	#1 							; character offset.
.a5e9	b2 08		lda ($08)			lda 	(zTemp3) 					; first character
.a5eb	c9 24		cmp #$24			cmp 	#"$"						; is it hexadecimal
.a5ed	f0 03		beq $a5f2			beq 	_STIConvert 				; convert from character 1, base 16.
.a5ef	88		dey				dey 								; from character 0
.a5f0	a2 0a		ldx #$0a			ldx 	#10 						; base 10.
.a5f2					_STIConvert:
.a5f2	86 04		stx $04				stx 	zTemp1 						; save base in zTemp1
.a5f4	b1 08		lda ($08),y			lda 	(zTemp3),y 					; get first character
.a5f6	f0 5f		beq $a657			beq 	_STIFail 					; if zero, then it has failed anyway.
.a5f8	64 02		stz $02				stz 	zTemp0 						; clear the result.
.a5fa	64 03		stz $03				stz 	zTemp0+1
.a5fc					_STILoop:
.a5fc	b1 08		lda ($08),y			lda 	(zTemp3),y 					; check in range 0-9 A-F
.a5fe	c9 30		cmp #$30			cmp 	#"0"
.a600	90 55		bcc $a657			bcc 	_STIFail
.a602	c9 3a		cmp #$3a			cmp 	#"9"+1
.a604	90 08		bcc $a60e			bcc 	_STIOkay
.a606	c9 41		cmp #$41			cmp 	#"A"
.a608	90 4d		bcc $a657			bcc 	_STIFail
.a60a	c9 47		cmp #$47			cmp 	#"F"+1
.a60c	b0 49		bcs $a657			bcs 	_STIFail
.a60e					_STIOkay:
.a60e	a5 02		lda $02				lda 	zTemp0 						; copy current to zTemp2
.a610	85 06		sta $06				sta 	zTemp2
.a612	a5 03		lda $03				lda 	zTemp0+1
.a614	85 07		sta $07				sta 	zTemp2+1
.a616	64 02		stz $02				stz 	zTemp0 						; clear result
.a618	64 03		stz $03				stz 	zTemp0+1
.a61a	a6 04		ldx $04				ldx 	zTemp1 						; X contains the base.
.a61c					_STIMultiply:
.a61c	8a		txa				txa 								; shift Y right into carry.
.a61d	4a		lsr a				lsr 	a
.a61e	aa		tax				tax
.a61f	90 0d		bcc $a62e			bcc 	_STINoAdd 					; skip if CC, e.g. LSB was zero
.a621	18		clc				clc
.a622	a5 06		lda $06				lda 	zTemp2 						; add zTemp2 into zTemp0
.a624	65 02		adc $02				adc 	zTemp0
.a626	85 02		sta $02				sta 	zTemp0
.a628	a5 07		lda $07				lda 	zTemp2+1
.a62a	65 03		adc $03				adc 	zTemp0+1
.a62c	85 03		sta $03				sta 	zTemp0+1
.a62e					_STINoAdd:
.a62e	06 06		asl $06				asl 	zTemp2 						; shift zTemp2 left e.g. x 2
.a630	26 07		rol $07				rol 	zTemp2+1
.a632	e0 00		cpx #$00			cpx 	#0 							; multiply finished ?
.a634	d0 e6		bne $a61c			bne 	_STIMultiply
.a636	38		sec				sec 								; hex adjust
.a637	b1 08		lda ($08),y			lda 	(zTemp3),y 					; get digit.
.a639	c9 3a		cmp #$3a			cmp 	#58
.a63b	90 03		bcc $a640			bcc 	_STIDecimal
.a63d	38		sec				sec
.a63e	e9 07		sbc #$07			sbc 	#7
.a640					_STIDecimal:
.a640	38		sec				sec
.a641	e9 30		sbc #$30			sbc 	#48
.a643	c5 04		cmp $04				cmp 	zTemp1  					; if >= base then fail.
.a645	b0 10		bcs $a657			bcs 	_STIFail
.a647	d8		cld				cld
.a648	65 02		adc $02				adc 	zTemp0 						; add into the current value
.a64a	85 02		sta $02				sta 	zTemp0
.a64c	90 02		bcc $a650			bcc 	_STINoCarry
.a64e	e6 03		inc $03				inc 	zTemp0+1
.a650					_STINoCarry:
.a650	b1 08		lda ($08),y			lda 	(zTemp3),y					; get character just done.
.a652	c8		iny				iny 								; point to next
.a653	e6 10		inc $10				inc 	SignCount
.a655	80 a5		bra $a5fc			bra 	_STILoop 					; and go round again.
.a657					_STIFail:
.a657	a5 10		lda $10				lda 	SignCount 					; if converted 0 charactes, fail.
.a659	f0 07		beq $a662			beq 	_STINoConvert
.a65b	98		tya				tya 								; convert count in A.
.a65c	a6 02		ldx $02				ldx 	zTemp0 						; return result
.a65e	a4 03		ldy $03				ldy 	zTemp0+1
.a660	38		sec				sec
.a661	60		rts				rts
.a662					_STINoConvert:
.a662	18		clc				clc
.a663	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/tostring.asm

.a664					IntToString:
.a664	86 02		stx $02				stx 	zTemp0 						; count is in zTemp0
.a666	84 03		sty $03				sty 	zTemp0+1
.a668	a0 00		ldy #$00			ldy 	#0 							; index into token buffer (out)
.a66a	a2 00		ldx #$00			ldx 	#0 							; index into the word table
.a66c					_ITSLoop:
.a66c	64 04		stz $04				stz 	zTemp1 						; this is the count of subtracts.
.a66e					_ITSSubtractLoop:
.a66e	38		sec				sec
.a66f	a5 02		lda $02				lda 	zTemp0 						; try to calculate
.a671	fd a7 a6	sbc $a6a7,x			sbc 	_ITSWords,x
.a674	48		pha				pha
.a675	a5 03		lda $03				lda 	zTemp0+1
.a677	fd a8 a6	sbc $a6a8,x			sbc 	_ITSWords+1,x
.a67a	90 09		bcc $a685			bcc 	_ITSEndSub 					; can't subtract any more.
.a67c	85 03		sta $03				sta 	zTemp0+1 					; update zTemp
.a67e	68		pla				pla
.a67f	85 02		sta $02				sta 	zTemp0
.a681	e6 04		inc $04				inc 	zTemp1 						; bump subtract count.
.a683	80 e9		bra $a66e			bra 	_ITSSubtractLoop
.a685					_ITSEndSub:
.a685	68		pla				pla 								; throw away the interim result
.a686	a5 04		lda $04				lda 	zTemp1 						; if the subtract count is non zero
.a688	d0 04		bne $a68e			bne 	_ITSWriteOut 				; always write it out
.a68a	c0 00		cpy #$00			cpy 	#0 							; don't write if this is the first
.a68c	f0 06		beq $a694			beq 	_ITSNext 					; suppressing leading zeros.
.a68e					_ITSWriteOut:
.a68e	09 30		ora #$30			ora 	#48 						; output digit.
.a690	99 e0 08	sta $08e0,y			sta 	ConvertBuffer,y
.a693	c8		iny				iny
.a694					_ITSNext:
.a694	e8		inx				inx
.a695	e8		inx				inx
.a696	e0 08		cpx #$08			cpx 	#_ITSWordsEnd-_ITSWords 	; done all subtractors
.a698	d0 d2		bne $a66c			bne 	_ITSLoop 					; do the new digits
.a69a	a5 02		lda $02				lda 	zTemp0 						; output the last digit
.a69c	09 30		ora #$30			ora 	#48
.a69e	99 e0 08	sta $08e0,y			sta 	ConvertBuffer,y 				; make it ASCIIZ.
.a6a1	a9 00		lda #$00			lda 	#0
.a6a3	99 e1 08	sta $08e1,y			sta 	ConvertBuffer+1,y
.a6a6	60		rts				rts
.a6a7					_ITSWords:
>a6a7	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10
.a6af					_ITSWordsEnd:

;******  Return to file: main.asm


;******  Processing file: core/variables.asm

.a6af					VariableFind:
.a6af	da		phx				phx 								; save the stack position
.a6b0	08		php				php 								; save the create flag
.a6b1	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the first identifier character
.a6b3	c9 e0		cmp #$e0			cmp 	#$E0						; if it is E0-FF the first is the last
.a6b5	90 10		bcc $a6c7			bcc		_VFIsNotFastVariable 		; so it is a fast variable.
.a6b7	29 1f		and #$1f			and 	#$1F 						; make it an offset
.a6b9	0a		asl a				asl 	a 							; double clear carry
.a6ba	69 00		adc #$00			adc 	#FastVariables & $FF 		; put the final address in zTemp0
.a6bc	85 02		sta $02				sta 	zTemp0
.a6be	a9 0f		lda #$0f			lda		#FastVariables >>8
.a6c0	85 03		sta $03				sta 	zTemp0+1
.a6c2	28		plp				plp 								; create flag is irrelevant.
.a6c3	fa		plx				plx									; restore the old stack position
.a6c4	c8		iny				iny 								; skip over the single identifier character
.a6c5	38		sec				sec 								; return with CS
.a6c6	60		rts				rts
.a6c7					_VFIsNotFastVariable:
.a6c7	20 99 a7	jsr $a799			jsr 	VFSetupHashPointer 			; set up the hash pointer
.a6ca	20 f4 a6	jsr $a6f4			jsr 	VFSearch 					; try to find the variable.
.a6cd	b0 0d		bcs $a6dc			bcs 	_VFEndSearch 				; found it, so exit
.a6cf	28		plp				plp 								; do we want autocreate
.a6d0	b0 03		bcs $a6d5			bcs 	_VFCreate
.a6d2	fa		plx				plx 								; restore stack position and return CC
.a6d3	18		clc				clc
.a6d4	60		rts				rts
.a6d5					_VFCreate:
.a6d5	20 99 a7	jsr $a799			jsr 	VFSetupHashPointer 			; reset the hash pointer
.a6d8	20 30 a7	jsr $a730			jsr 	VFCreate 					; create a new record and link it in.
.a6db	08		php				php 								; save a dummy P to be popped.
.a6dc					_VFEndSearch:
.a6dc	18		clc				clc 								; the data is at offset + 4
.a6dd	a5 04		lda $04				lda 	zTemp1
.a6df	69 04		adc #$04			adc 	#4
.a6e1	85 02		sta $02				sta 	zTemp0
.a6e3	a5 05		lda $05				lda 	zTemp1+1
.a6e5	69 00		adc #$00			adc 	#0
.a6e7	85 03		sta $03				sta 	zTemp0+1
.a6e9	28		plp				plp 								; dump the create flag
.a6ea					_VFSkipExit:
.a6ea	b1 00		lda ($00),y			lda 	(codePtr),y 				; keep read and skip until end-identifier.
.a6ec	c8		iny				iny
.a6ed	c9 e0		cmp #$e0			cmp 	#$E0
.a6ef	90 f9		bcc $a6ea			bcc 	_VFSkipExit
.a6f1	fa		plx				plx 								; restore X
.a6f2	38		sec				sec
.a6f3	60		rts				rts
.a6f4					VFSearch:
.a6f4	48		pha				pha 								; save AXY.
.a6f5	da		phx				phx
.a6f6	5a		phy				phy
.a6f7	98		tya				tya									; add Y to codePtr, put in zTemp2
.a6f8	18		clc				clc 								; so it points to the identifier.
.a6f9	65 00		adc $00				adc 	codePtr
.a6fb	85 06		sta $06				sta 	zTemp2
.a6fd	a5 01		lda $01				lda 	codePtr+1
.a6ff	69 00		adc #$00			adc 	#0
.a701	85 07		sta $07				sta 	zTemp2+1
.a703					_VFSLoop:
.a703	a0 01		ldy #$01			ldy 	#1 							; get MSB of next.
.a705	b1 04		lda ($04),y			lda 	(zTemp1),y 					; if this is zero, then end link (0)
.a707	f0 22		beq $a72b			beq 	_VFSFailed 					; failed.
.a709	aa		tax				tax 								; MSB in X
.a70a	b2 04		lda ($04)			lda 	(zTemp1) 					; LSB in A
.a70c	85 04		sta $04				sta 	zTemp1 						; and update to the next record.
.a70e	86 05		stx $05				stx 	zTemp1+1
.a710	a0 02		ldy #$02			ldy 	#2 							; put the name pointer in zTemp3
.a712	b1 04		lda ($04),y			lda 	(zTemp1),y
.a714	85 08		sta $08				sta 	zTemp3
.a716	c8		iny				iny
.a717	b1 04		lda ($04),y			lda 	(zTemp1),y
.a719	85 09		sta $09				sta 	zTemp3+1
.a71b	a0 ff		ldy #$ff			ldy 	#255 						; now compare the identifiers.
.a71d					_VFSCheckName:
.a71d	c8		iny				iny
.a71e	b1 06		lda ($06),y			lda 	(zTemp2),y 					; if different, try next
.a720	d1 08		cmp ($08),y			cmp 	(zTemp3),y
.a722	d0 df		bne $a703			bne 	_VFSLoop
.a724	c9 e0		cmp #$e0			cmp 	#$E0 						; is it the ending identifier token
.a726	90 f5		bcc $a71d			bcc 	_VFSCheckName
.a728	38		sec				sec 								; return with Carry set, and zTemp1 set up
.a729	80 01		bra $a72c			bra		_VFSExit
.a72b					_VFSFailed:
.a72b	18		clc				clc
.a72c					_VFSExit:
.a72c	7a		ply				ply 								; restore registers and exit.
.a72d	fa		plx				plx
.a72e	68		pla				pla
.a72f	60		rts				rts
.a730					VFCreate:
.a730	48		pha				pha 								; save registers
.a731	da		phx				phx
.a732	5a		phy				phy
.a733	18		clc				clc 								; add 6 to memVarPtr, saving its
.a734	a5 13		lda $13				lda 	memVarPtr 					; address in zTemp0 as we go.
.a736	85 02		sta $02				sta 	zTemp0
.a738	69 06		adc #$06			adc 	#6
.a73a	85 13		sta $13				sta 	memVarPtr
.a73c	a5 14		lda $14				lda 	memVarPtr+1
.a73e	85 03		sta $03				sta 	zTemp0+1
.a740	69 00		adc #$00			adc 	#0
.a742	85 14		sta $14				sta 	memVarPtr+1
.a744	c5 12		cmp $12				cmp 	allocPtr+1 					; out of memory ?
.a746	f0 46		beq $a78e			beq 	_VFCMemory
.a748	98		tya				tya 								; work out identifier address
.a749	18		clc				clc
.a74a	65 00		adc $00				adc 	codePtr
.a74c	48		pha				pha
.a74d	c8		iny				iny
.a74e	a5 01		lda $01				lda 	codePtr+1
.a750	69 00		adc #$00			adc 	#0
.a752	c9 10		cmp #$10			cmp 	#ProgramStart >> 8 			; it must be >= program start
.a754	b0 0b		bcs $a761			bcs 	_VFCInProgram 				; otherwise variable created from command line.
.a756	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a759	43 52 45 41 54 45 3f 00				.text 	"CREATE?",0
.a761					_VFCInProgram:
.a761	a0 03		ldy #$03			ldy 	#3 							; store in new record
.a763	91 02		sta ($02),y			sta 	(zTemp0),y
.a765	88		dey				dey
.a766	68		pla				pla
.a767	91 02		sta ($02),y			sta 	(zTemp0),y
.a769	a0 04		ldy #$04			ldy 	#4 							; clear new data
.a76b	a9 00		lda #$00			lda 	#0
.a76d	91 02		sta ($02),y			sta 	(zTemp0),y
.a76f	c8		iny				iny
.a770	91 02		sta ($02),y			sta 	(zTemp0),y
.a772	a0 01		ldy #$01			ldy 	#1 							; copy old first link to this link
.a774	b2 04		lda ($04)			lda 	(zTemp1)
.a776	92 02		sta ($02)			sta 	(zTemp0)
.a778	b1 04		lda ($04),y			lda 	(zTemp1),y
.a77a	91 02		sta ($02),y			sta 	(zTemp0),y
.a77c	a5 02		lda $02				lda 	zTemp0 						; put the new record at the front of the
.a77e	92 04		sta ($04)			sta 	(zTemp1) 					; list.
.a780	a5 03		lda $03				lda 	zTemp0+1
.a782	91 04		sta ($04),y			sta 	(zTemp1),y
.a784	85 05		sta $05				sta 	zTemp1+1 					; copy into zTemp1
.a786	a5 02		lda $02				lda 	zTemp0
.a788	85 04		sta $04				sta 	zTemp1
.a78a	7a		ply				ply
.a78b	fa		plx				plx
.a78c	68		pla				pla
.a78d	60		rts				rts
.a78e					_VFCMemory:
.a78e	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a791	4d 45 4d 4f 52 59 3f 00				.text 	"MEMORY?",0
.a799					VFSetupHashPointer:
.a799	48		pha				pha
.a79a	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first character
.a79c	29 0f		and #$0f			and 	#(HashTableSize-1) 			; make it in range 0..hash-1
.a79e	0a		asl a				asl 	a 							; double it, also clears carry
.a79f	69 40		adc #$40			adc 	#VariableHashTable & $FF 	; add to the base and store in zTemp1
.a7a1	85 04		sta $04				sta 	zTemp1
.a7a3	a9 0f		lda #$0f			lda 	#VariableHashTable >> 8
.a7a5	85 05		sta $05				sta 	zTemp1+1
.a7a7	68		pla				pla
.a7a8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: tokenise/tokeniser.asm

.a7a9					TokeniseInputBuffer:
.a7a9	48		pha				pha
.a7aa	da		phx				phx
.a7ab	5a		phy				phy
.a7ac	64 19		stz $19				stz 	TokenOffset					; reset index into TokenBuffer
.a7ae	9c 00 0a	stz $0a00			stz 	TokenBuffer 				; empty that buffer
.a7b1	a9 00		lda #$00			lda 	#0 							; create faux line by writing 3 bytes out.
.a7b3	20 15 a8	jsr $a815			jsr 	TokWriteToken
.a7b6	20 15 a8	jsr $a815			jsr 	TokWriteToken
.a7b9	20 15 a8	jsr $a815			jsr 	TokWriteToken
.a7bc	a2 ff		ldx #$ff			ldx 	#255 						; find the end.
.a7be					_TIBForward:
.a7be	e8		inx				inx
.a7bf	bd 00 08	lda $0800,x			lda 	InputBuffer,x
.a7c2	d0 fa		bne $a7be			bne 	_TIBForward
.a7c4					_TIBBackward:
.a7c4	ca		dex				dex 								; back one.
.a7c5	e0 ff		cpx #$ff			cpx 	#255 						; gone too far.
.a7c7	f0 48		beq $a811			beq 	_TIBExit					; return empty buffer
.a7c9	bd 00 08	lda $0800,x			lda 	InputBuffer,x
.a7cc	c9 20		cmp #$20			cmp 	#" "
.a7ce	f0 f4		beq $a7c4			beq 	_TIBBackward
.a7d0	9e 01 08	stz $0801,x			stz 	InputBuffer+1,x 			; truncate at last non space.
.a7d3	a2 00		ldx #$00			ldx		#0 							; start of the input bufferr.
.a7d5					_TIBMainLoop:
.a7d5	bd 00 08	lda $0800,x			lda 	InputBuffer,x 				; next character
.a7d8	f0 37		beq $a811			beq 	_TIBExit 					; done the buffer if zero.
.a7da	e8		inx				inx
.a7db	c9 20		cmp #$20			cmp 	#" " 						; skip over spaces
.a7dd	f0 f6		beq $a7d5			beq 	_TIBMainLoop
.a7df	ca		dex				dex 								; undo the last inx.
.a7e0	c9 24		cmp #$24			cmp 	#"$"						; is it $ ?
.a7e2	f0 08		beq $a7ec			beq 	_TIBConstant
.a7e4	c9 30		cmp #$30			cmp 	#"0"						; check 0-9
.a7e6	90 09		bcc $a7f1			bcc 	_TIBNotConstant
.a7e8	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7ea	b0 05		bcs $a7f1			bcs 	_TIBNotConstant
.a7ec					_TIBConstant:
.a7ec	20 46 a8	jsr $a846			jsr 	TOKConvertConstant
.a7ef	80 e4		bra $a7d5			bra 	_TIBMainLoop
.a7f1					_TIBNotConstant:
.a7f1	c9 3a		cmp #$3a			cmp 	#":"						; definition
.a7f3	d0 05		bne $a7fa			bne 	_TIBNotDefinition
.a7f5	20 98 a8	jsr $a898			jsr 	TOKConvertDefinition
.a7f8	80 db		bra $a7d5			bra 	_TIBMainLoop
.a7fa					_TIBNotDefinition:
.a7fa	c9 27		cmp #$27			cmp 	#"'"
.a7fc	f0 04		beq $a802			beq 	_TIBIsCommentString
.a7fe	c9 22		cmp #$22			cmp 	#'"'
.a800	d0 05		bne $a807			bne 	_TIBNotCommentString
.a802					_TIBIsCommentString:
.a802	20 c0 a8	jsr $a8c0			jsr 	TOKConvertCommentString
.a805	80 ce		bra $a7d5			bra 	_TIBMainLoop
.a807					_TIBNotCommentString:
.a807	20 07 a9	jsr $a907			jsr 	TOKCheckIsToken 			; check if a token.
.a80a	b0 c9		bcs $a7d5			bcs 	_TIBMainLoop
.a80c	20 99 a8	jsr $a899			jsr 	TOKConvertIdentifierOnly
.a80f	80 c4		bra $a7d5			bra 	_TIBMainLoop
.a811					_TIBExit:
.a811	7a		ply				ply
.a812	fa		plx				plx
.a813	68		pla				pla
.a814	60		rts				rts
.a815					TOKWriteToken:
.a815	da		phx				phx
.a816	a6 19		ldx $19				ldx 	TokenOffset
.a818	9d 00 0a	sta $0a00,x			sta 	TokenBuffer,x
.a81b	9e 01 0a	stz $0a01,x			stz 	TokenBuffer+1,x
.a81e	e6 19		inc $19				inc 	TokenOffset
.a820	fa		plx				plx
.a821	60		rts				rts
.a822					TOKFixUpLast:
.a822	da		phx				phx
.a823	a6 19		ldx $19				ldx 	TokenOffset
.a825	bd ff 09	lda $09ff,x			lda 	TokenBuffer-1,x
.a828	09 e0		ora #$e0			ora 	#$E0
.a82a	9d ff 09	sta $09ff,x			sta 	TokenBuffer-1,x
.a82d	fa		plx				plx
.a82e	60		rts				rts
.a82f					TOKConvertIdentifier:
.a82f	c9 2e		cmp #$2e			cmp 	#"."						; dot is special case.
.a831	f0 0f		beq $a842			beq 	_TKCIDot
.a833	38		sec				sec 								; A-Z -> 1-27
.a834	e9 40		sbc #$40			sbc 	#64
.a836	f0 08		beq $a840			beq 	_TKCIFail
.a838	c9 1b		cmp #$1b			cmp 	#27
.a83a	b0 04		bcs $a840			bcs 	_TKCIFail
.a83c	09 c0		ora #$c0			ora 	#$C0 						; fix up
.a83e	38		sec				sec
.a83f	60		rts				rts
.a840					_TKCIFail:
.a840	18		clc				clc
.a841	60		rts				rts
.a842					_TKCIDot:
.a842	a9 db		lda #$db			lda 	#$C0+27
.a844	38		sec				sec
.a845	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: tokenise/tok_const.asm

.a846					TOKConvertConstant:
.a846	a0 08		ldy #$08			ldy 	#InputBuffer >> 8 			; the buffer must be on a $00 page.
.a848	da		phx				phx 								; save X position
.a849	20 df a5	jsr $a5df			jsr 	StringToInt 				; try to convert
.a84c	90 40		bcc $a88e			bcc 	_TKCCError
.a84e	84 03		sty $03				sty 	zTemp0+1 					; save result in zTemp0
.a850	86 02		stx $02				stx 	zTemp0
.a852	85 04		sta $04				sta 	zTemp1 						; save count
.a854	68		pla				pla 								; restore X position, add the count
.a855	18		clc				clc
.a856	65 04		adc $04				adc 	zTemp1
.a858	aa		tax				tax
.a859	bd 00 08	lda $0800,x			lda 	InputBuffer,x 				; followed by - ?
.a85c	c9 2d		cmp #$2d			cmp 	#"-"
.a85e	d0 0e		bne $a86e			bne 	_TKCCNotNegative
.a860	e8		inx				inx 								; consume the -
.a861	38		sec				sec
.a862	a9 00		lda #$00			lda 	#0 							; negate the constant.
.a864	e5 02		sbc $02				sbc 	zTemp0
.a866	85 02		sta $02				sta 	zTemp0
.a868	a9 00		lda #$00			lda 	#0
.a86a	e5 03		sbc $03				sbc 	zTemp0+1
.a86c	85 03		sta $03				sta 	zTemp0+1
.a86e					_TKCCNotNegative:
.a86e	a5 03		lda $03				lda 	zTemp0+1 					; check short/long const ?
.a870	d0 0c		bne $a87e			bne 	_TKCCLongConstant
.a872	a5 02		lda $02				lda 	zTemp0
.a874	c9 40		cmp #$40			cmp 	#$40
.a876	b0 06		bcs $a87e			bcs 	_TKCCLongConstant
.a878	09 80		ora #$80			ora 	#$80 						; write the short token out with bit 7 set
.a87a	20 15 a8	jsr $a815			jsr 	TOKWriteToken
.a87d	60		rts				rts
.a87e					_TKCCLongConstant:
.a87e	a9 01		lda #$01			lda 	#KWD_SYS_CONST 				; write out long constant
.a880	20 15 a8	jsr $a815			jsr 	TOKWriteToken
.a883	a5 02		lda $02				lda 	zTemp0
.a885	20 15 a8	jsr $a815			jsr 	TOKWriteToken
.a888	a5 03		lda $03				lda 	zTemp0+1
.a88a	20 15 a8	jsr $a815			jsr 	TOKWriteToken
.a88d	60		rts				rts
.a88e					_TKCCError:
.a88e	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a891	43 4f 4e 53 54 3f 00				.text 	"CONST?",0

;******  Return to file: main.asm


;******  Processing file: tokenise/tok_def.asm

.a898					TOKConvertDefinition:
.a898	e8		inx				inx 								; skip over :
.a899					TOKConvertIdentifierOnly:
.a899	bd 00 08	lda $0800,x			lda 	InputBuffer,x 				; get first and check there's at least one.
.a89c	20 2f a8	jsr $a82f			jsr 	TOKConvertIdentifier
.a89f	90 10		bcc $a8b1			bcc 	_TKCDFail
.a8a1					_TKCDLoop:
.a8a1	20 15 a8	jsr $a815			jsr 	TOKWriteToken 				; write last one out
.a8a4	e8		inx				inx									; skip over it, get next and check
.a8a5	bd 00 08	lda $0800,x			lda 	InputBuffer,x
.a8a8	20 2f a8	jsr $a82f			jsr 	TOKConvertIdentifier
.a8ab	b0 f4		bcs $a8a1			bcs 	_TKCDLoop 					; keep going while identifier present.
.a8ad	20 22 a8	jsr $a822			jsr 	TOKFixUpLast 				; set bit for last character.
.a8b0	60		rts				rts
.a8b1					_TKCDFail:
.a8b1	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a8b4	49 44 45 4e 54 49 46 49				.text 	"IDENTIFIER?",0
>a8bc	45 52 3f 00

;******  Return to file: main.asm


;******  Processing file: tokenise/tok_cst.asm

.a8c0					TOKConvertCommentString:
.a8c0	c9 27		cmp #$27			cmp 	#"'"						; is it a comment
.a8c2	f0 06		beq $a8ca			beq 	_TKCCSComment
.a8c4	a9 04		lda #$04			lda 	#KWD_SYS_QSTRING 			; token
.a8c6	a0 22		ldy #$22			ldy 	#'"'						; match character
.a8c8	80 04		bra $a8ce			bra 	_TKCCSContinue
.a8ca					_TKCCSComment:
.a8ca	a9 03		lda #$03			lda 	#KWD_SYS_COMMENT 			; token
.a8cc	a0 00		ldy #$00			ldy 	#0 							; match character
.a8ce					_TKCCSContinue:
.a8ce	20 15 a8	jsr $a815			jsr 	TOKWriteToken 				; write initial token
.a8d1	e8		inx				inx 								; skip over ' or "
.a8d2	84 02		sty $02				sty 	zTemp0 						; closing token to search for.
.a8d4	a0 00		ldy #$00			ldy 	#0 							; count of characters
.a8d6	da		phx				phx 								; save start position
.a8d7					_TKCCSFindSize:
.a8d7	bd 00 08	lda $0800,x			lda 	InputBuffer,x 				; found the end
.a8da	c5 02		cmp $02				cmp 	zTemp0
.a8dc	f0 10		beq $a8ee			beq 	_TKCCSFoundEnd
.a8de	e8		inx				inx 								; bump pos, count
.a8df	c8		iny				iny
.a8e0	c9 00		cmp #$00			cmp 	#0 							; if end of line error - quote unmatched
.a8e2	d0 f3		bne $a8d7			bne 	_TKCCSFindSize
.a8e4	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>a8e7	51 55 4f 54 45 3f 00				.text 	"QUOTE?",0
.a8ee					_TKCCSFoundEnd:
.a8ee	98		tya				tya 								; length of element in Y
.a8ef	20 15 a8	jsr $a815			jsr 	TOKWriteToken
.a8f2	fa		plx				plx 								; restore start position and copy out
.a8f3					_TKCCSCopyOut:
.a8f3	c0 00		cpy #$00			cpy 	#0 							; complete ?
.a8f5	f0 0a		beq $a901			beq 	_TKCCSExit
.a8f7	bd 00 08	lda $0800,x			lda 	InputBuffer,x
.a8fa	20 15 a8	jsr $a815			jsr 	TOKWriteToken
.a8fd	e8		inx				inx
.a8fe	88		dey				dey
.a8ff	80 f2		bra $a8f3			bra 	_TKCCSCopyOut
.a901					_TKCCSExit:
.a901	a5 02		lda $02				lda 	zTemp0 						; if closing token was non-zero, it's a quote so skip it
.a903	f0 01		beq $a906			beq 	_TKCSSNotComment
.a905	e8		inx				inx
.a906					_TKCSSNotComment:
.a906	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: tokenise/tok_token.asm

.a907					TOKCheckIsToken:
.a907	a9 94		lda #$94			lda 	#(KeywordText) & $FF
.a909	85 02		sta $02				sta 	zTemp0
.a90b	a9 a0		lda #$a0			lda 	#(KeywordText) >> 8
.a90d	85 03		sta $03				sta 	zTemp0+1
.a90f	64 04		stz $04				stz 	zTemp1 						; best match length
.a911	64 06		stz $06				stz 	zTemp2 						; current token.
.a913					_TCTLoop:
.a913	a0 01		ldy #$01			ldy 	#1 							; position to start comparing
.a915	da		phx				phx 								; save start
.a916					_TCTCompare:
.a916	b1 02		lda ($02),y			lda 	(zTemp0),y 					; compare the characters using EOR.
.a918	5d 00 08	eor $0800,x			eor 	InputBuffer,x 				; because bit 7 of keyword table => end of word.
.a91b	e8		inx				inx 								; bump both pointers.
.a91c	c8		iny				iny
.a91d	0a		asl a				asl 	a 							; A will now be 0 if the same. CS => end.
.a91e	d0 0e		bne $a92e			bne 	_TCTNext 					; different, go to next.
.a920	90 f4		bcc $a916			bcc 	_TCTCompare 				; still comparing.
.a922	b2 02		lda ($02)			lda 	(zTemp0) 					; get current length
.a924	c5 04		cmp $04				cmp 	zTemp1						; best so far
.a926	90 06		bcc $a92e			bcc 	_TCTNext 					; if not, skip to next.
.a928	85 04		sta $04				sta 	zTemp1 						; new best score
.a92a	a5 06		lda $06				lda 	zTemp2 						; copy current token to result
.a92c	85 07		sta $07				sta 	zTemp2+1
.a92e					_TCTNext:
.a92e	fa		plx				plx 								; restore start position.
.a92f	e6 06		inc $06				inc 	zTemp2 						; increment current token.
.a931	b2 02		lda ($02)			lda 	(zTemp0) 					; add the length + 1 to the keyword pointer
.a933	38		sec				sec
.a934	65 02		adc $02				adc 	zTemp0
.a936	85 02		sta $02				sta 	zTemp0
.a938	90 02		bcc $a93c			bcc		_TCTNoCarry
.a93a	e6 03		inc $03				inc 	zTemp0+1
.a93c					_TCTNoCarry:
.a93c	b2 02		lda ($02)			lda 	(zTemp0)					; have we finished ?
.a93e	d0 d3		bne $a913			bne 	_TCTLoop 					; no, check the next keyword.
.a940	18		clc				clc
.a941	a5 04		lda $04				lda 	zTemp1 						; best length is zero, exit with CC
.a943	f0 0b		beq $a950			beq 	_TCTExit
.a945	8a		txa				txa 								; add that length to the input index.
.a946	18		clc				clc
.a947	65 04		adc $04				adc 	zTemp1
.a949	aa		tax				tax
.a94a	a5 07		lda $07				lda 	zTemp2+1 					; token number
.a94c	20 15 a8	jsr $a815			jsr 	TOKWriteToken 				; write it out.
.a94f	38		sec				sec 								; set carry and exit
.a950					_TCTExit:
.a950	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: words/list.asm

.a951					Cmd_List:
.a951	fa		plx				plx
.a952	64 06		stz $06				stz 	zTemp2						; clear the lowest-number
.a954	64 07		stz $07				stz 	zTemp2+1
.a956	e0 ff		cpx #$ff			cpx 	#$FF 						; empty stack
.a958	f0 0b		beq $a965			beq 	_CLNoStart
.a95a	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy TOS in
.a95d	85 06		sta $06				sta 	zTemp2
.a95f	bd 00 07	lda $0700,x			lda 	highStack,x
.a962	85 07		sta $07				sta 	zTemp2+1
.a964	ca		dex				dex
.a965					_CLNoStart:
.a965					_CLNoStartLine:
.a965	a9 00		lda #$00			lda 	#(programStart) & $FF
.a967	85 00		sta $00				sta 	codePtr
.a969	a9 10		lda #$10			lda 	#(programStart) >> 8
.a96b	85 01		sta $01				sta 	codePtr+1
.a96d					_CLILoop:
.a96d	b2 00		lda ($00)			lda 	(codePtr)					; check end of program
.a96f	f0 24		beq $a995			beq 	_CLIEnd
.a971	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.a973	38		sec				sec
.a974	b1 00		lda ($00),y			lda 	(codePtr),y
.a976	e5 06		sbc $06				sbc 	zTemp2
.a978	c8		iny				iny
.a979	b1 00		lda ($00),y			lda 	(codePtr),y
.a97b	e5 07		sbc $07				sbc 	zTemp2+1
.a97d	90 09		bcc $a988			bcc 	_CLISkip
.a97f	da		phx				phx
.a980	20 98 a9	jsr $a998			jsr 	ListCurrent 				; list the line.
.a983	fa		plx				plx
.a984	c6 08		dec $08				dec 	zTemp3 						; done all lines
.a986	f0 0d		beq $a995			beq 	_CLIEnd
.a988					_CLISkip:
.a988	18		clc				clc
.a989	b2 00		lda ($00)			lda 	(codePtr) 					; go to next
.a98b	65 00		adc $00				adc 	codePtr
.a98d	85 00		sta $00				sta 	codePtr
.a98f	90 dc		bcc $a96d			bcc 	_CLILoop
.a991	e6 01		inc $01				inc 	codePtr+1
.a993	80 d8		bra $a96d			bra 	_CLILoop
.a995					_CLIEnd:
.a995	4c 1b a0	jmp $a01b			jmp 	WarmStart
.a998					ListCurrent:
.a998	a9 02		lda #$02			lda 	#COL_GREEN
.a99a	20 5f a3	jsr $a35f			jsr 	ExternColour
.a99d	a0 01		ldy #$01			ldy 	#1							; print line#
.a99f	b1 00		lda ($00),y			lda 	(codePtr),y
.a9a1	aa		tax				tax
.a9a2	c8		iny				iny
.a9a3	b1 00		lda ($00),y			lda 	(codePtr),y
.a9a5	a8		tay				tay
.a9a6	20 47 a2	jsr $a247			jsr 	PrintIntegerUnsigned
.a9a9	a8		tay				tay
.a9aa					_LCPadOut:
.a9aa	a9 20		lda #$20			lda 	#' '
.a9ac	20 55 a3	jsr $a355			jsr 	ExternPrint
.a9af	c8		iny				iny
.a9b0	c0 06		cpy #$06			cpy 	#6
.a9b2	d0 f6		bne $a9aa			bne 	_LCPadOut
.a9b4	a0 03		ldy #$03			ldy 	#3 							; start here
.a9b6	64 17		stz $17				stz 	PrefixCharacter				; no prefix
.a9b8					_LCLoop:
.a9b8	b1 00		lda ($00),y			lda 	(codePtr),y 				; [ ] never have a prefix.
.a9ba	c9 23		cmp #$23			cmp 	#KWD_LSQPAREN
.a9bc	f0 0b		beq $a9c9			beq 	_LCNoPrefix
.a9be	c9 24		cmp #$24			cmp 	#KWD_RSQPAREN
.a9c0	f0 07		beq $a9c9			beq 	_LCNoPrefix
.a9c2	a5 17		lda $17				lda 	PrefixCharacter 			; output prefix, reset to space
.a9c4	f0 03		beq $a9c9			beq		_LCNoPrefix
.a9c6	20 64 a2	jsr $a264			jsr 	PrintCharacter
.a9c9					_LCNoPrefix:
.a9c9	a9 20		lda #$20			lda 	#32
.a9cb	85 17		sta $17				sta 	PrefixCharacter
.a9cd	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at next
.a9cf	f0 13		beq $a9e4			beq 	_LCExit
.a9d1	10 4d		bpl $aa20			bpl 	_LCIsToken 					; +ve goto token.
.a9d3	c9 c0		cmp #$c0			cmp 	#$C0 						; C0-FF
.a9d5	b0 13		bcs $a9ea			bcs 	_LCIsIdentifier
.a9d7	29 3f		and #$3f			and 	#$3F 						; 80-BF 0-63
.a9d9	aa		tax				tax
.a9da	c8		iny				iny
.a9db	5a		phy				phy 								; push pos
.a9dc	a0 00		ldy #$00			ldy 	#0
.a9de	20 47 a2	jsr $a247			jsr 	PrintIntegerUnsigned
.a9e1	7a		ply				ply
.a9e2	80 d4		bra $a9b8			bra 	_LCLoop
.a9e4					_LCExit:
.a9e4	a9 0d		lda #$0d			lda 	#13
.a9e6	20 64 a2	jsr $a264			jsr 	PrintCharacter
.a9e9	60		rts				rts
.a9ea					_LCIsIdentifier:
.a9ea					_LCIdentLoop:
.a9ea	b1 00		lda ($00),y			lda 	(codePtr),y 				; keep printing
.a9ec	20 ef aa	jsr $aaef			jsr 	ListPrintIDChar
.a9ef	b1 00		lda ($00),y			lda 	(codePtr),y 				; get current
.a9f1	c8		iny				iny
.a9f2	c9 e0		cmp #$e0			cmp 	#$E0 						; was it an end marker
.a9f4	b0 c2		bcs $a9b8			bcs 	_LCLoop 					; if so, do next
.a9f6	80 f2		bra $a9ea			bra 	_LCIdentLoop				; if not loop round
.a9f8					_LCConstant:
.a9f8	c8		iny				iny
.a9f9	b1 00		lda ($00),y			lda 	(codePtr),y 				; get LSB into X
.a9fb	aa		tax				tax
.a9fc	c8		iny				iny 								; get MSB into Y
.a9fd	b1 00		lda ($00),y			lda 	(codePtr),y
.a9ff	c8		iny				iny
.aa00	5a		phy				phy
.aa01	a8		tay				tay
.aa02	5a		phy				phy 								; save sign
.aa03	10 0c		bpl $aa11			bpl 	_LCNotNegative
.aa05	98		tya				tya 								; YX = |YX|
.aa06	49 ff		eor #$ff			eor 	#$FF
.aa08	a8		tay				tay
.aa09	8a		txa				txa
.aa0a	49 ff		eor #$ff			eor 	#$FF
.aa0c	aa		tax				tax
.aa0d	e8		inx				inx
.aa0e	d0 01		bne $aa11			bne 	_LCNotNegative
.aa10	c8		iny				iny
.aa11					_LCNotNegative:
.aa11					_LCPrintYX:
.aa11	20 47 a2	jsr $a247			jsr 	PrintIntegerUnsigned
.aa14	68		pla				pla 								; restore sign
.aa15	10 05		bpl $aa1c			bpl 	_LCNoTrail
.aa17	a9 2d		lda #$2d			lda 	#"-"
.aa19	20 64 a2	jsr $a264			jsr 	PrintCharacter
.aa1c					_LCNoTrail:
.aa1c	7a		ply				ply 								; restore Y
.aa1d	4c b8 a9	jmp $a9b8			jmp 	_LCLoop
.aa20					_LCIsToken:
.aa20	c9 01		cmp #$01			cmp 	#KWD_SYS_CONST 				; check for constant.
.aa22	f0 d4		beq $a9f8			beq 	_LCConstant
.aa24	c9 06		cmp #$06			cmp 	#TOK_NOT_CONTROL
.aa26	90 3e		bcc $aa66			bcc 	_LCControl
.aa28					_LCIsKeywordToken:
.aa28	85 02		sta $02				sta 	zTemp0 						; save token #
.aa2a	a9 94		lda #$94			lda 	#(KeywordText) & $FF
.aa2c	85 04		sta $04				sta 	zTemp1
.aa2e	a9 a0		lda #$a0			lda 	#(KeywordText) >> 8
.aa30	85 05		sta $05				sta 	zTemp1+1
.aa32	5a		phy				phy 								; save code offset
.aa33					_LCForward:
.aa33	a5 02		lda $02				lda 	zTemp0 						; done if token number is zero.
.aa35	f0 0f		beq $aa46			beq 	_LCFoundToken
.aa37	c6 02		dec $02				dec 	zTemp0						; dec count.
.aa39	38		sec				sec 								; go to next keyword.
.aa3a	b2 04		lda ($04)			lda 	(zTemp1)
.aa3c	65 04		adc $04				adc 	zTemp1
.aa3e	85 04		sta $04				sta 	zTemp1
.aa40	90 f1		bcc $aa33			bcc 	_LCForward
.aa42	e6 05		inc $05				inc 	zTemp1+1
.aa44	80 ed		bra $aa33			bra 	_LCForward
.aa46					_LCFoundToken:
.aa46	a0 01		ldy #$01			ldy 	#1 							; output the token.
.aa48					_LCOutToken:
.aa48	b1 04		lda ($04),y			lda 	(zTemp1),y 					; print character
.aa4a	29 7f		and #$7f			and 	#$7F
.aa4c	20 64 a2	jsr $a264			jsr 	PrintCharacter
.aa4f	b1 04		lda ($04),y			lda 	(zTemp1),y 					; reget, put bit 7 in C
.aa51	c8		iny				iny
.aa52	0a		asl a				asl 	a
.aa53	90 f3		bcc $aa48			bcc 	_LCOutToken
.aa55	7a		ply				ply 								; restore code offset
.aa56	b1 00		lda ($00),y			lda 	(codePtr),y 				; what did we print ?
.aa58	c8		iny				iny
.aa59	c9 22		cmp #$22			cmp 	#KWD_HAT 					; for ^ and [, do not print space following.
.aa5b	f0 04		beq $aa61			beq 	_LCCancelPrefix
.aa5d	c9 23		cmp #$23			cmp 	#KWD_LSQPAREN
.aa5f	d0 02		bne $aa63			bne 	_LCGoLoop
.aa61					_LCCancelPrefix:
.aa61	64 17		stz $17				stz 	PrefixCharacter
.aa63					_LCGoLoop:
.aa63	4c b8 a9	jmp $a9b8			jmp 	_LCLoop
.aa66					_LCControl:
.aa66	c9 02		cmp #$02			cmp 	#KWD_SYS_CALL
.aa68	f0 3b		beq $aaa5			beq 	_LCDecodeCall
.aa6a	c9 05		cmp #$05			cmp 	#KWD_SYS_DEFINE
.aa6c	f0 22		beq $aa90			beq 	_LCDecodeDefine
.aa6e	5a		phy				phy 								; save Y
.aa6f	a0 22		ldy #$22			ldy 	#'"'						; setup for String
.aa71	c9 04		cmp #$04			cmp 	#KWD_SYS_QSTRING
.aa73	f0 07		beq $aa7c			beq 	_LCDecodeString
.aa75	a0 27		ldy #$27			ldy 	#"'"						; setup for comment
.aa77	a9 07		lda #$07			lda 	#COL_WHITE 					; highlight comment.
.aa79	20 5f a3	jsr $a35f			jsr 	ExternColour
.aa7c					_LCDecodeString
.aa7c	98		tya				tya
.aa7d	20 64 a2	jsr $a264			jsr 	PrintCharacter
.aa80	7a		ply				ply 								; restore Y pos
.aa81	48		pha				pha 								; save end character on stack.
.aa82	20 cf aa	jsr $aacf			jsr 	ListPrintCodeIdentifier
.aa85	68		pla				pla 								; last character
.aa86	c9 27		cmp #$27			cmp 	#"'"						; don't print last
.aa88	f0 03		beq $aa8d			beq 	_LCEDNoQuote
.aa8a	20 64 a2	jsr $a264			jsr 	PrintCharacter
.aa8d					_LCEDNoQuote:
.aa8d	4c b8 a9	jmp $a9b8			jmp 	_LCLoop
.aa90					_LCDecodeDefine:
.aa90	a9 03		lda #$03			lda 	#COL_YELLOW 				; highlight definition.
.aa92	20 5f a3	jsr $a35f			jsr 	ExternColour
.aa95	a9 3a		lda #$3a			lda 	#":"
.aa97	20 64 a2	jsr $a264			jsr 	PrintCharacter
.aa9a	20 cf aa	jsr $aacf			jsr 	ListPrintCodeIdentifier
.aa9d	a9 02		lda #$02			lda 	#COL_GREEN
.aa9f	20 5f a3	jsr $a35f			jsr 	ExternColour
.aaa2	4c b8 a9	jmp $a9b8			jmp 	_LCLoop
.aaa5					_LCDecodeCall:
.aaa5	a9 06		lda #$06			lda 	#COL_CYAN
.aaa7	20 5f a3	jsr $a35f			jsr 	ExternColour
.aaaa	c8		iny				iny 								; get line number into XA
.aaab	b1 00		lda ($00),y			lda 	(codePtr),y
.aaad	48		pha				pha
.aaae	c8		iny				iny
.aaaf	b1 00		lda ($00),y			lda 	(codePtr),y
.aab1	c8		iny				iny
.aab2	aa		tax				tax
.aab3	68		pla				pla
.aab4	20 01 ab	jsr $ab01			jsr 	ListFindLine 				; find that line.
.aab7	90 15		bcc $aace			bcc 	_LCNoDefinition
.aab9	5a		phy				phy
.aaba	a0 03		ldy #$03			ldy 	#3 							; look at first character
.aabc	b1 02		lda ($02),y			lda 	(zTemp0),y
.aabe	c9 05		cmp #$05			cmp 	#KWD_SYS_DEFINE
.aac0	d0 0c		bne $aace			bne 	_LCNoDefinition 			; not define
.aac2	20 d9 aa	jsr $aad9			jsr 	ListPrintIdentifier
.aac5	7a		ply				ply
.aac6	a9 02		lda #$02			lda 	#COL_GREEN
.aac8	20 5f a3	jsr $a35f			jsr 	ExternColour
.aacb	4c b8 a9	jmp $a9b8			jmp 	_LCLoop
.aace					_LCNoDefinition:
>aace	ff						.byte 	$FF 						; definition is missing.
.aacf					ListPrintCodeIdentifier:
.aacf	48		pha				pha 								; copy codePtr -> zTemp0
.aad0	a5 00		lda $00				lda 	codePtr
.aad2	85 02		sta $02				sta 	zTemp0
.aad4	a5 01		lda $01				lda 	codePtr+1
.aad6	85 03		sta $03				sta 	zTemp0+1
.aad8	68		pla				pla
.aad9					ListPrintIdentifier:
.aad9	48		pha				pha
.aada	da		phx				phx
.aadb	c8		iny				iny 								; skip over the type
.aadc	b1 02		lda ($02),y			lda 	(zTemp0),y 					; count in X
.aade	aa		tax				tax
.aadf					_LPILoop:
.aadf	c8		iny				iny
.aae0	e0 00		cpx #$00			cpx 	#0
.aae2	f0 08		beq $aaec			beq 	_LPIExit
.aae4	b1 02		lda ($02),y			lda 	(zTemp0),y
.aae6	20 ef aa	jsr $aaef			jsr 	ListPrintIDChar
.aae9	ca		dex				dex
.aaea	80 f3		bra $aadf			bra 	_LPILoop
.aaec					_LPIExit:
.aaec	fa		plx				plx
.aaed	68		pla				pla
.aaee	60		rts				rts
.aaef					ListPrintIDChar:
.aaef	c9 00		cmp #$00			cmp 	#0 							; check if ID char, if not just print
.aaf1	10 0a		bpl $aafd			bpl	 	_LCNotDot
.aaf3	29 1f		and #$1f			and 	#$1F 						; 1-26 A-Z 27 .
.aaf5	09 40		ora #$40			ora 	#$40 						; ASCII except .
.aaf7	c9 5b		cmp #$5b			cmp 	#$40+27
.aaf9	d0 02		bne $aafd			bne 	_LCNotDot
.aafb	a9 2e		lda #$2e			lda 	#"."
.aafd					_LCNotDot:
.aafd	20 64 a2	jsr $a264			jsr 	PrintCharacter
.ab00	60		rts				rts
.ab01					ListFindLine:
.ab01	5a		phy				phy
.ab02	86 05		stx $05				stx 	zTemp1+1
.ab04	85 04		sta $04				sta 	zTemp1
.ab06	a9 00		lda #$00			lda 	#(ProgramStart) & $FF
.ab08	85 02		sta $02				sta 	zTemp0
.ab0a	a9 10		lda #$10			lda 	#(ProgramStart) >> 8
.ab0c	85 03		sta $03				sta 	zTemp0+1
.ab0e					_LFLSearch:
.ab0e	18		clc				clc									; reached the end.
.ab0f	b2 02		lda ($02)			lda 	(zTemp0)
.ab11	f0 1d		beq $ab30			beq 	_LFLExit 					; exit with CC
.ab13	a0 01		ldy #$01			ldy 	#1
.ab15	a5 04		lda $04				lda 	zTemp1
.ab17	d1 02		cmp ($02),y			cmp 	(zTemp0),y
.ab19	d0 07		bne $ab22			bne 	_LFLNext
.ab1b	c8		iny				iny
.ab1c	a5 05		lda $05				lda 	zTemp1+1
.ab1e	d1 02		cmp ($02),y			cmp 	(zTemp0),y
.ab20	f0 0d		beq $ab2f			beq 	_LFLFound
.ab22					_LFLNext:
.ab22	18		clc				clc
.ab23	b2 02		lda ($02)			lda 	(zTemp0)
.ab25	65 02		adc $02				adc 	zTemp0
.ab27	85 02		sta $02				sta 	zTemp0
.ab29	90 e3		bcc $ab0e			bcc 	_LFLSearch
.ab2b	e6 03		inc $03				inc 	zTemp0+1
.ab2d	80 df		bra $ab0e			bra 	_LFLSearch
.ab2f					_LFLFound:
.ab2f	38		sec				sec
.ab30					_LFLExit:
.ab30	7a		ply				ply
.ab31	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: words/memory.asm

.ab32					Mem_Peek:
.ab32	fa		plx				plx
.ab33	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy address
.ab36	85 02		sta $02				sta 	zTemp0
.ab38	bd 00 07	lda $0700,x			lda 	highStack,x
.ab3b	85 03		sta $03				sta 	zTemp0+1
.ab3d	b2 02		lda ($02)			lda 	(zTemp0)					; read byte
.ab3f	9d 00 06	sta $0600,x			sta 	lowStack,x 					; write to stack
.ab42	9e 00 07	stz $0700,x			stz 	highStack,x
.ab45	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ab48					Mem_WPeek:
.ab48	fa		plx				plx
.ab49	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy address
.ab4c	85 02		sta $02				sta 	zTemp0
.ab4e	bd 00 07	lda $0700,x			lda 	highStack,x
.ab51	85 03		sta $03				sta 	zTemp0+1
.ab53	b2 02		lda ($02)			lda 	(zTemp0)					; read byte
.ab55	9d 00 06	sta $0600,x			sta 	lowStack,x 					; write to stack
.ab58	5a		phy				phy 								; read msb
.ab59	a0 01		ldy #$01			ldy 	#1
.ab5b	b1 02		lda ($02),y			lda 	(zTemp0),y
.ab5d	7a		ply				ply
.ab5e	9d 00 07	sta $0700,x			sta 	highStack,x 				; write to stack
.ab61	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ab64					Mem_Poke:
.ab64	fa		plx				plx
.ab65	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy address
.ab68	85 02		sta $02				sta 	zTemp0
.ab6a	bd 00 07	lda $0700,x			lda 	highStack,x
.ab6d	85 03		sta $03				sta 	zTemp0+1
.ab6f	bd ff 05	lda $05ff,x			lda 	lowStack-1,x 				; byte to write
.ab72	92 02		sta ($02)			sta 	(zTemp0)
.ab74	ca		dex				dex
.ab75	ca		dex				dex
.ab76	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ab79					Mem_WPoke:
.ab79	fa		plx				plx
.ab7a	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy address
.ab7d	85 02		sta $02				sta 	zTemp0
.ab7f	bd 00 07	lda $0700,x			lda 	highStack,x
.ab82	85 03		sta $03				sta 	zTemp0+1
.ab84	bd ff 05	lda $05ff,x			lda 	lowStack-1,x 				; byte to write
.ab87	92 02		sta ($02)			sta 	(zTemp0)
.ab89	5a		phy				phy
.ab8a	a0 01		ldy #$01			ldy 	#1
.ab8c	bd ff 06	lda $06ff,x			lda 	highStack-1,x 				; byte to write
.ab8f	91 02		sta ($02),y			sta 	(zTemp0),y
.ab91	7a		ply				ply
.ab92	ca		dex				dex
.ab93	ca		dex				dex
.ab94	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ab97					Mem_DWPoke:
.ab97	fa		plx				plx
.ab98	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy address
.ab9b	85 02		sta $02				sta 	zTemp0
.ab9d	bd 00 07	lda $0700,x			lda 	highStack,x
.aba0	85 03		sta $03				sta 	zTemp0+1
.aba2	bd ff 05	lda $05ff,x			lda 	lowStack-1,x 				; byte to write
.aba5	92 02		sta ($02)			sta 	(zTemp0)
.aba7	bd ff 06	lda $06ff,x			lda 	highStack-1,x 				; byte to write
.abaa	92 02		sta ($02)			sta 	(zTemp0)
.abac	ca		dex				dex
.abad	ca		dex				dex
.abae	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.abb1					Mem_Alloc:
.abb1	fa		plx				plx
.abb2	38		sec				sec 								; subtract count from alloc ptr
.abb3	a5 11		lda $11				lda 	allocPtr
.abb5	fd 00 06	sbc $0600,x			sbc 	lowStack,x
.abb8	85 11		sta $11				sta 	allocPtr
.abba	48		pha				pha 								; save low.
.abbb	a5 12		lda $12				lda 	allocPtr+1
.abbd	fd 00 07	sbc $0700,x			sbc 	highStack,x
.abc0	85 12		sta $12				sta 	allocPtr+1
.abc2	90 10		bcc $abd4			bcc 	_MAError 					; borrow ?
.abc4	c5 14		cmp $14				cmp 	memVarPtr+1 				; if <= memVarPtr then error ?
.abc6	90 0c		bcc $abd4			bcc 	_MAError
.abc8	f0 0a		beq $abd4			beq 	_MAError
.abca	9d 00 07	sta $0700,x			sta 	highStack,x 				; update address
.abcd	68		pla				pla
.abce	9d 00 06	sta $0600,x			sta 	lowStack,x
.abd1	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.abd4					_MAError:
.abd4	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>abd7	4d 45 4d 4f 52 59 3f 00				.text 	"MEMORY?",0

;******  Return to file: main.asm


;******  Processing file: words/stack.asm

.abdf					Stack_Empty:
.abdf	fa		plx				plx
.abe0	a2 00		ldx #$00			ldx 	#0
.abe2	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.abe5					Stack_Drop:
.abe5	fa		plx				plx
.abe6	ca		dex				dex
.abe7	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.abea					Stack_Dup:
.abea	fa		plx				plx
.abeb	bd 00 06	lda $0600,x			lda 	lowStack,x					; copy to next up
.abee	9d 01 06	sta $0601,x			sta 	lowStack+1,x
.abf1	bd 00 07	lda $0700,x			lda 	highStack,x
.abf4	9d 01 07	sta $0701,x			sta 	highStack+1,x
.abf7	e8		inx				inx 								; bump stack pointer
.abf8	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.abfb					Stack_Nip:
.abfb	fa		plx				plx
.abfc	bd 00 06	lda $0600,x			lda 	lowStack,x	 				; copy top to 2nd
.abff	9d ff 05	sta $05ff,x			sta 	lowStack-1,x
.ac02	bd 00 07	lda $0700,x			lda 	highStack,x
.ac05	9d ff 06	sta $06ff,x			sta 	highStack-1,x
.ac08	ca		dex				dex 								; drop tos
.ac09	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ac0c					Stack_Over:
.ac0c	fa		plx				plx
.ac0d	bd ff 05	lda $05ff,x			lda 	lowStack-1,x				; copy to next up
.ac10	9d 01 06	sta $0601,x			sta 	lowStack+1,x
.ac13	bd ff 06	lda $06ff,x			lda 	highStack-1,x
.ac16	9d 01 07	sta $0701,x			sta 	highStack+1,x
.ac19	e8		inx				inx 							; bump stack pointer
.ac1a	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ac1d					Stack_Swap:
.ac1d	fa		plx				plx
.ac1e	5a		phy				phy
.ac1f	bd 00 06	lda $0600,x			lda 	lowStack,x
.ac22	a8		tay				tay
.ac23	bd ff 05	lda $05ff,x			lda 	lowStack-1,x
.ac26	9d 00 06	sta $0600,x			sta 	lowStack,x
.ac29	98		tya				tya
.ac2a	9d ff 05	sta $05ff,x			sta 	lowStack-1,x
.ac2d	bd 00 07	lda $0700,x			lda 	highStack,x
.ac30	a8		tay				tay
.ac31	bd ff 06	lda $06ff,x			lda 	highStack-1,x
.ac34	9d 00 07	sta $0700,x			sta 	highStack,x
.ac37	98		tya				tya
.ac38	9d ff 06	sta $06ff,x			sta 	highStack-1,x
.ac3b	7a		ply				ply
.ac3c	4c 86 a2	jmp $a286			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/store.asm

.ac3f					Command_Store:
.ac3f	fa		plx				plx
.ac40	b1 00		lda ($00),y			lda 	(codePtr),y 				; next character
.ac42	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a single letter variable ?
.ac44	90 1f		bcc $ac65			bcc 	_CSLongVariable
.ac46	c8		iny				iny 								; get the next
.ac47	b1 00		lda ($00),y			lda 	(codePtr),y
.ac49	88		dey				dey
.ac4a	c9 23		cmp #$23			cmp 	#KWD_LSQPAREN 				; followed by indexing, use long variable
.ac4c	f0 17		beq $ac65			beq 	_CSLongVariable
.ac4e	b1 00		lda ($00),y			lda 	(codePtr),y 				; get variable back.
.ac50	c8		iny				iny 								; skip over it and push on stack
.ac51	5a		phy				phy
.ac52	0a		asl a				asl 	a 							; double it, now C0-FE
.ac53	a8		tay				tay 								; put in Y
.ac54	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy TOS into it
.ac57	99 40 0e	sta $0e40,y			sta 	FastVariables-$C0,y
.ac5a	bd 00 07	lda $0700,x			lda 	highStack,x
.ac5d	99 41 0e	sta $0e41,y			sta 	FastVariables-$C0+1,y
.ac60	ca		dex				dex 								; pop off stack
.ac61	7a		ply				ply 								; restore position and do next
.ac62	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ac65					_CSLongVariable:
.ac65	38		sec				sec 								; create variable if not found.
.ac66	20 af a6	jsr $a6af			jsr 	VariableFind 				; find it - create if not - is in zTemp0
.ac69	20 22 a4	jsr $a422			jsr 	IndexCheck 					; check indexing.
.ac6c	bd 00 06	lda $0600,x			lda 	lowStack,x					; write it out.
.ac6f	92 02		sta ($02)			sta 	(zTemp0)
.ac71	5a		phy				phy
.ac72	a0 01		ldy #$01			ldy 	#1
.ac74	bd 00 07	lda $0700,x			lda 	highStack,x
.ac77	91 02		sta ($02),y			sta 	(zTemp0),y
.ac79	7a		ply				ply
.ac7a	ca		dex				dex 								; pop off stack
.ac7b	4c 86 a2	jmp $a286			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/system.asm

.ac7e					Command_New:
.ac7e	fa		plx				plx
.ac7f	9c 00 10	stz $1000			stz 	ProgramStart
.ac82	4c 1b a0	jmp $a01b			jmp 	WarmStart
.ac85					Command_Old:
.ac85	fa		plx				plx
.ac86	a9 00		lda #$00			lda 	#(ProgramStart) & $FF
.ac88	85 00		sta $00				sta 	codePtr
.ac8a	a9 10		lda #$10			lda 	#(ProgramStart) >> 8
.ac8c	85 01		sta $01				sta 	codePtr+1
.ac8e	a0 03		ldy #$03			ldy 	#3
.ac90					_COAdvance:
.ac90	c0 c0		cpy #$c0			cpy 	#192 						; first lines > this can't be recovered
.ac92	b0 0e		bcs $aca2			bcs		_COFail
.ac94	20 b6 b0	jsr $b0b6			jsr 	AdvanceInCode
.ac97	b1 00		lda ($00),y			lda 	(codePtr),y
.ac99	d0 f5		bne $ac90			bne 	_COAdvance
.ac9b	c8		iny				iny 								; byte after end of line
.ac9c	8c 00 10	sty $1000			sty 	ProgramStart 				; overwrite first byte with offset.
.ac9f					_CONotDeleted:
.ac9f	4c 1b a0	jmp $a01b			jmp 	WarmStart
.aca2					_COFail:
.aca2	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>aca5	43 41 4e 54 3f 00				.text 	"CANT?",0
.acab					Command_End:
.acab	fa		plx				plx
.acac	4c 1b a0	jmp $a01b			jmp 	WarmStart
.acaf					Command_Stop:
>acaf	ff						.byte 	$FF
.acb0	fa		plx				plx
.acb1	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>acb4	53 54 4f 50 00					.text 	"STOP",0
.acb9					Command_Assert:
.acb9	fa		plx				plx
.acba	bd 00 06	lda $0600,x			lda 	lowStack,x 					; check TOS = 0 ?
.acbd	1d 00 07	ora $0700,x			ora 	highStack,x
.acc0	f0 04		beq $acc6			beq 	_CAFail
.acc2	ca		dex				dex 								; throw if not.
.acc3	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.acc6					_CAFail:
.acc6	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>acc9	41 53 53 45 52 54 00				.text 	"ASSERT",0
.acd0					Command_Sys:
.acd0	fa		plx				plx
.acd1	bd 00 06	lda $0600,x			lda 	lowStack,x 					; save call address
.acd4	85 02		sta $02				sta 	zTemp0
.acd6	bd 00 07	lda $0700,x			lda 	highStack,x
.acd9	85 03		sta $03				sta 	zTemp0+1
.acdb	ca		dex				dex 								; pop tos
.acdc	da		phx				phx 								; save XY
.acdd	5a		phy				phy
.acde	ad 02 0f	lda $0f02			lda 	FastVariables+('A'-'A'+1)*2 ; load AXY
.ace1	ae 30 0f	ldx $0f30			ldx 	FastVariables+('X'-'A'+1)*2
.ace4	ac 32 0f	ldy $0f32			ldy 	FastVariables+('Y'-'A'+1)*2
.ace7	20 ef ac	jsr $acef			jsr 	_CSCallInd
.acea	7a		ply				ply 								; restore XY
.aceb	fa		plx				plx
.acec	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.acef					_CSCallInd:
.acef	6c 02 00	jmp ($0002)			jmp 	(zTemp0)
.acf2					Command_DumpStack:
.acf2	fa		plx				plx
.acf3	da		phx				phx 								; save pos and sp
.acf4	5a		phy				phy
.acf5	86 10		stx $10				stx 	SignCount
.acf7	a2 ff		ldx #$ff			ldx 	#$FF
.acf9					_CDSLoop:
.acf9	e4 10		cpx $10				cpx 	SignCount 					; done all ?
.acfb	f0 2a		beq $ad27			beq 	_CDSExit
.acfd	e8		inx				inx
.acfe	da		phx				phx 								; save SP
.acff	bd 00 07	lda $0700,x			lda 	highStack,x 				; get tos
.ad02	a8		tay				tay
.ad03	bd 00 06	lda $0600,x			lda 	lowStack,x
.ad06	aa		tax				tax
.ad07	c0 00		cpy #$00			cpy 	#0
.ad09	10 11		bpl $ad1c			bpl 	_CDSPositive
.ad0b	a9 2d		lda #$2d			lda 	#"-" 						; minus
.ad0d	20 64 a2	jsr $a264			jsr 	PrintCharacter
.ad10	98		tya				tya 								; negate YX
.ad11	49 ff		eor #$ff			eor 	#$FF
.ad13	a8		tay				tay
.ad14	8a		txa				txa
.ad15	49 ff		eor #$ff			eor 	#$FF
.ad17	aa		tax				tax
.ad18	e8		inx				inx
.ad19	d0 01		bne $ad1c			bne 	_CDSPositive
.ad1b	c8		iny				iny
.ad1c					_CDSPositive:
.ad1c	20 47 a2	jsr $a247			jsr 	PrintIntegerUnsigned
.ad1f	a9 20		lda #$20			lda 	#" " 						; space
.ad21	20 64 a2	jsr $a264			jsr 	PrintCharacter
.ad24	fa		plx				plx
.ad25	80 d2		bra $acf9			bra 	_CDSLoop
.ad27					_CDSExit:
.ad27	a9 3c		lda #$3c			lda 	#"<"
.ad29	20 64 a2	jsr $a264			jsr 	PrintCharacter
.ad2c	20 64 a2	jsr $a264			jsr 	PrintCharacter
.ad2f	a9 0d		lda #$0d			lda 	#13 						; CR
.ad31	20 64 a2	jsr $a264			jsr 	PrintCharacter
.ad34	7a		ply				ply
.ad35	fa		plx				plx
.ad36	4c 86 a2	jmp $a286			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/arithmetic/binary.asm

.ad39					Stack_Add:
.ad39	fa		plx				plx
.ad3a	ca		dex				dex
.ad3b	18		clc				clc
.ad3c	bd 00 06	lda $0600,x			lda		lowStack,x
.ad3f	7d 01 06	adc $0601,x			adc 	lowStack+1,x
.ad42	9d 00 06	sta $0600,x			sta 	lowStack,x
.ad45	bd 00 07	lda $0700,x			lda		highStack,x
.ad48	7d 01 07	adc $0701,x			adc 	highStack+1,x
.ad4b	9d 00 07	sta $0700,x			sta 	highStack,x
.ad4e	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ad51					Stack_Sub:
.ad51	fa		plx				plx
.ad52	ca		dex				dex
.ad53	38		sec				sec
.ad54	bd 00 06	lda $0600,x			lda		lowStack,x
.ad57	fd 01 06	sbc $0601,x			sbc 	lowStack+1,x
.ad5a	9d 00 06	sta $0600,x			sta 	lowStack,x
.ad5d	bd 00 07	lda $0700,x			lda		highStack,x
.ad60	fd 01 07	sbc $0701,x			sbc 	highStack+1,x
.ad63	9d 00 07	sta $0700,x			sta 	highStack,x
.ad66	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ad69					Stack_And:
.ad69	fa		plx				plx
.ad6a	ca		dex				dex
.ad6b	bd 00 06	lda $0600,x			lda		lowStack,x
.ad6e	3d 01 06	and $0601,x			and		lowStack+1,x
.ad71	9d 00 06	sta $0600,x			sta 	lowStack,x
.ad74	bd 00 07	lda $0700,x			lda		highStack,x
.ad77	3d 01 07	and $0701,x			and 	highStack+1,x
.ad7a	9d 00 07	sta $0700,x			sta 	highStack,x
.ad7d	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ad80					Stack_Xor:
.ad80	fa		plx				plx
.ad81	ca		dex				dex
.ad82	bd 00 06	lda $0600,x			lda		lowStack,x
.ad85	5d 01 06	eor $0601,x			eor		lowStack+1,x
.ad88	9d 00 06	sta $0600,x			sta 	lowStack,x
.ad8b	bd 00 07	lda $0700,x			lda		highStack,x
.ad8e	5d 01 07	eor $0701,x			eor 	highStack+1,x
.ad91	9d 00 07	sta $0700,x			sta 	highStack,x
.ad94	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ad97					Stack_Or:
.ad97	fa		plx				plx
.ad98	ca		dex				dex
.ad99	bd 00 06	lda $0600,x			lda		lowStack,x
.ad9c	1d 01 06	ora $0601,x			ora		lowStack+1,x
.ad9f	9d 00 06	sta $0600,x			sta 	lowStack,x
.ada2	bd 00 07	lda $0700,x			lda		highStack,x
.ada5	1d 01 07	ora $0701,x			ora 	highStack+1,x
.ada8	9d 00 07	sta $0700,x			sta 	highStack,x
.adab	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.adae					Stack_Shl:
.adae	fa		plx				plx
.adaf	38		sec				sec
.adb0	80 02		bra $adb4			bra 	StackShift
.adb2					Stack_Shr:
.adb2	fa		plx				plx
.adb3	18		clc				clc
.adb4					StackShift:
.adb4	08		php				php
.adb5	ca		dex				dex
.adb6	bd 01 06	lda $0601,x			lda 	lowStack+1,x 					; if the shift >= 32
.adb9	29 e0		and #$e0			and 	#$E0 							; going to be zero.
.adbb	1d 01 07	ora $0701,x			ora 	highStack+1,x
.adbe	d0 19		bne $add9			bne 	_SSZero
.adc0					_SSLoop:
.adc0	de 01 06	dec $0601,x			dec 	lowStack+1,x 				; dec check count
.adc3	30 1a		bmi $addf			bmi 	_SSDone 					; completed ?
.adc5	28		plp				plp 								; restore flag
.adc6	08		php				php
.adc7	b0 08		bcs $add1			bcs 	_SSLeft 					; do either shift.
.adc9	5e 00 07	lsr $0700,x			lsr 	highStack,x
.adcc	7e 00 06	ror $0600,x			ror 	lowStack,x
.adcf	80 ef		bra $adc0			bra 	_SSLoop
.add1					_SSLeft:
.add1	1e 00 06	asl $0600,x			asl 	lowStack,x
.add4	3e 00 07	rol $0700,x			rol 	highStack,x
.add7	80 e7		bra $adc0			bra 	_SSLoop
.add9					_SSZero:
.add9	9e 00 06	stz $0600,x			stz 	lowStack,x 					; too many shifts.
.addc	9e 00 07	stz $0700,x			stz 	highStack,x
.addf					_SSDone:
.addf	28		plp				plp 								; throw flag.
.ade0	4c 86 a2	jmp $a286			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/arithmetic/compare.asm

.ade3					Comp_Equal:
.ade3	fa		plx				plx
.ade4	38		sec				sec
.ade5	80 02		bra $ade9			bra 	Comp_CheckEqual
.ade7					Comp_NotEqual:
.ade7	fa		plx				plx
.ade8	18		clc				clc
.ade9					Comp_CheckEqual:
.ade9	08		php				php
.adea	ca		dex				dex
.adeb	bd 00 06	lda $0600,x			lda		lowStack,x
.adee	5d 01 06	eor $0601,x			eor 	lowStack+1,x
.adf1	d0 06		bne $adf9			bne 	_CCENonZero
.adf3	bd 00 07	lda $0700,x			lda		highStack,x
.adf6	5d 01 07	eor $0701,x			eor 	highStack+1,x
.adf9					_CCENonZero:
.adf9	f0 02		beq $adfd			beq 	_CCENotSet
.adfb	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.adfd					_CCENotSet:
.adfd					CompCheckFlip:
.adfd	28		plp				plp 								; if carry set, we want $FF if equal
.adfe	90 02		bcc $ae02			bcc 	CompReturn
.ae00	49 ff		eor #$ff			eor 	#$FF
.ae02					CompReturn:
.ae02	9d 00 06	sta $0600,x			sta 	lowStack,x 					; save result on stack.
.ae05	9d 00 07	sta $0700,x			sta 	highStack,x
.ae08	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ae0b					Comp_Less:
.ae0b	fa		plx				plx
.ae0c	18		clc				clc
.ae0d	80 02		bra $ae11			bra 	Comp_LessCont
.ae0f					Comp_GreaterEqual:
.ae0f	fa		plx				plx
.ae10	38		sec				sec
.ae11					Comp_LessCont:
.ae11	08		php				php
.ae12	ca		dex				dex
.ae13	38		sec				sec
.ae14	bd 00 06	lda $0600,x			lda 	lowStack,x 					; do a subtraction w/o storing the result
.ae17	fd 01 06	sbc $0601,x			sbc 	lowStack+1,x
.ae1a	bd 00 07	lda $0700,x			lda 	highStack,x
.ae1d	fd 01 07	sbc $0701,x			sbc 	highStack+1,x
.ae20	50 02		bvc $ae24			bvc 	_CLNoFlip 					; unsigned -> signed
.ae22	49 80		eor #$80			eor 	#$80
.ae24					_CLNoFlip:
.ae24	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ae26	f0 d5		beq $adfd			beq 	CompCheckFlip
.ae28	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ae2a	80 d1		bra $adfd			bra 	CompCheckFlip
.ae2c					Comp_LessEqual:
.ae2c	fa		plx				plx
.ae2d	38		sec				sec
.ae2e	80 02		bra $ae32			bra 	Comp_LessEqualCont
.ae30					Comp_Greater:
.ae30	fa		plx				plx
.ae31	18		clc				clc
.ae32					Comp_LessEqualCont:
.ae32	08		php				php
.ae33	ca		dex				dex
.ae34	38		sec				sec
.ae35	bd 01 06	lda $0601,x			lda 	lowStack+1,x 					; do a subtraction w/o storing the result, backwards
.ae38	fd 00 06	sbc $0600,x			sbc 	lowStack,x
.ae3b	bd 01 07	lda $0701,x			lda 	highStack+1,x
.ae3e	fd 00 07	sbc $0700,x			sbc 	highStack,x
.ae41	50 02		bvc $ae45			bvc 	_CLENoFlip 					; unsigned -> signed
.ae43	49 80		eor #$80			eor 	#$80
.ae45					_CLENoFlip:
.ae45	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ae47	f0 b4		beq $adfd			beq 	CompCheckFlip
.ae49	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ae4b	80 b0		bra $adfd			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: words/arithmetic/divide.asm

.ae4d					DivInteger16:
.ae4d	fa		plx				plx
.ae4e	20 54 ae	jsr $ae54			jsr 	IntegerDivide
.ae51	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.ae54					IntegerDivide:
.ae54	ca		dex				dex
.ae55	bd 01 06	lda $0601,x			lda 	lowStack+1,x 					; check for division by zero.
.ae58	1d 01 07	ora $0701,x			ora 	highStack+1,x
.ae5b	d0 14		bne $ae71			bne 	_BFDOkay
.ae5d	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>ae60	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ae68	20 42 59 20 5a 45 52 4f 00
.ae71					_BFDOkay:
.ae71	64 04		stz $04				stz 	zTemp1 						; Q/Dividend/Left in +0
.ae73	64 05		stz $05				stz 	zTemp1+1 					; M/Divisor/Right in +4
.ae75	64 10		stz $10				stz 	SignCount 					; Count of signs.
.ae77	20 b3 ae	jsr $aeb3			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ae7a	e8		inx				inx
.ae7b	20 b3 ae	jsr $aeb3			jsr 	CheckIntegerNegate
.ae7e	ca		dex				dex
.ae7f	5a		phy				phy 								; Y is the counter
.ae80	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.ae82					_BFDLoop:
.ae82	1e 00 06	asl $0600,x			asl 	lowStack,x 					; shift AQ left.
.ae85	3e 00 07	rol $0700,x			rol 	highStack,x
.ae88	26 04		rol $04				rol 	zTemp1
.ae8a	26 05		rol $05				rol 	zTemp1+1
.ae8c	38		sec				sec
.ae8d	a5 04		lda $04				lda 	zTemp1+0 					; Calculate A-M on stack.
.ae8f	fd 01 06	sbc $0601,x			sbc 	lowStack+1,x
.ae92	48		pha				pha
.ae93	a5 05		lda $05				lda 	zTemp1+1
.ae95	fd 01 07	sbc $0701,x			sbc 	highStack+1,x
.ae98	90 0f		bcc $aea9			bcc 	_BFDNoAdd
.ae9a	85 05		sta $05				sta 	zTemp1+1
.ae9c	68		pla				pla
.ae9d	85 04		sta $04				sta 	zTemp1+0
.ae9f	bd 00 06	lda $0600,x			lda 	lowStack,x 					; set Q bit 1.
.aea2	09 01		ora #$01			ora 	#1
.aea4	9d 00 06	sta $0600,x			sta 	lowStack,x
.aea7	80 01		bra $aeaa			bra 	_BFDNext
.aea9					_BFDNoAdd:
.aea9	68		pla				pla 								; Throw away the intermediate calculations
.aeaa					_BFDNext:
.aeaa	88		dey				dey
.aeab	d0 d5		bne $ae82			bne 	_BFDLoop
.aead	7a		ply				ply 								; restore Y
.aeae	46 10		lsr $10				lsr 	SignCount 					; if sign count odd,
.aeb0	b0 07		bcs $aeb9			bcs		IntegerNegateAlways 		; negate the result
.aeb2	60		rts				rts
.aeb3					CheckIntegerNegate:
.aeb3	bd 00 07	lda $0700,x			lda 	highStack,x 				; is it -ve = MSB set ?
.aeb6	30 01		bmi $aeb9			bmi 	IntegerNegateAlways 		; if so negate it
.aeb8	60		rts				rts
.aeb9					IntegerNegateAlways:
.aeb9	e6 10		inc $10				inc 	SignCount 					; bump the count of signs
.aebb	4c 16 af	jmp $af16			jmp 	Unary_Negate
.aebe					ModInteger16:
.aebe	fa		plx				plx
.aebf	20 54 ae	jsr $ae54			jsr 	IntegerDivide
.aec2	a5 04		lda $04				lda 	zTemp1
.aec4	9d 00 06	sta $0600,x			sta 	lowStack,x
.aec7	a5 05		lda $05				lda 	zTemp1+1
.aec9	9d 00 07	sta $0700,x			sta 	highStack,x
.aecc	4c 86 a2	jmp $a286			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/arithmetic/multiply.asm

.aecf					MulInteger16:
.aecf	fa		plx				plx
.aed0	ca		dex				dex
.aed1	bd 00 06	lda $0600,x			lda 	lowStack,x					; copy to workspace
.aed4	85 04		sta $04				sta 	zTemp1
.aed6	bd 00 07	lda $0700,x			lda 	highStack,x
.aed9	85 05		sta $05				sta 	zTemp1+1
.aedb	9e 00 06	stz $0600,x			stz 	lowStack,x 					; zero where the result goes.
.aede	9e 00 07	stz $0700,x			stz 	highStack,x
.aee1					_BFMMultiply:
.aee1	a5 04		lda $04				lda 	zTemp1 						; get LSBit
.aee3	29 01		and #$01			and 	#1
.aee5	f0 13		beq $aefa			beq 	_BFMNoAdd
.aee7	18		clc				clc 								; add old tos to current tos.
.aee8	bd 00 06	lda $0600,x			lda		lowStack,x
.aeeb	7d 01 06	adc $0601,x			adc 	lowStack+1,x
.aeee	9d 00 06	sta $0600,x			sta 	lowStack,x
.aef1	bd 00 07	lda $0700,x			lda		highStack,x
.aef4	7d 01 07	adc $0701,x			adc 	highStack+1,x
.aef7	9d 00 07	sta $0700,x			sta 	highStack,x
.aefa					_BFMNoAdd:
.aefa	1e 01 06	asl $0601,x			asl 	lowStack+1,x 				; shift left
.aefd	3e 01 07	rol $0701,x			rol 	highStack+1,x
.af00	46 05		lsr $05				lsr 	zTemp1+1 					; shift right
.af02	66 04		ror $04				ror 	zTemp1+0
.af04	a5 04		lda $04				lda 	zTemp1 						; continue if is nonzero
.af06	05 05		ora $05				ora 	zTemp1+1
.af08	d0 d7		bne $aee1			bne 	_BFMMultiply
.af0a	4c 86 a2	jmp $a286			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/arithmetic/unary.asm

.af0d					Unary_Absolute:
.af0d	fa		plx				plx
.af0e	bd 00 07	lda $0700,x			lda 	highStack,x
.af11	30 04		bmi $af17			bmi 	Unary_Negate_Code
.af13	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.af16					Unary_Negate:
.af16	fa		plx				plx
.af17					Unary_Negate_Code:
.af17	38		sec				sec
.af18	a9 00		lda #$00			lda		#0
.af1a	fd 00 06	sbc $0600,x			sbc 	lowStack,x
.af1d	9d 00 06	sta $0600,x			sta 	lowStack,x
.af20	a9 00		lda #$00			lda		#0
.af22	fd 00 07	sbc $0700,x			sbc 	highStack,x
.af25	9d 00 07	sta $0700,x			sta 	highStack,x
.af28	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.af2b					Unary_Not:
.af2b	fa		plx				plx
.af2c	bd 00 06	lda $0600,x			lda 	lowStack,x
.af2f	49 ff		eor #$ff			eor 	#$FF
.af31	9d 00 06	sta $0600,x			sta 	lowStack,x
.af34	bd 00 07	lda $0700,x			lda 	highStack,x
.af37	49 ff		eor #$ff			eor 	#$FF
.af39	9d 00 07	sta $0700,x			sta 	highStack,x
.af3c	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.af3f					Unary_Increment:
.af3f	fa		plx				plx
.af40	fe 00 06	inc $0600,x			inc 	lowStack,x
.af43	d0 03		bne $af48			bne 	_UIExit
.af45	fe 00 07	inc $0700,x			inc 	highStack,x
.af48					_UIExit:
.af48	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.af4b					Unary_Decrement:
.af4b	fa		plx				plx
.af4c	bd 00 06	lda $0600,x			lda 	lowStack,x
.af4f	d0 03		bne $af54			bne 	_UDNoBorrow
.af51	de 00 07	dec $0700,x			dec 	highStack,x
.af54					_UDNoBorrow:
.af54	de 00 06	dec $0600,x			dec 	lowStack,x
.af57	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.af5a					Unary_BSwap:
.af5a	fa		plx				plx
.af5b	bd 00 06	lda $0600,x			lda 	lowStack,x
.af5e	48		pha				pha
.af5f	bd 00 07	lda $0700,x			lda 	highStack,x
.af62	9d 00 06	sta $0600,x			sta 	lowStack,x
.af65	68		pla				pla
.af66	9d 00 07	sta $0700,x			sta 	highStack,x
.af69	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.af6c					Unary_Shl:
.af6c	fa		plx				plx
.af6d	1e 00 06	asl $0600,x			asl 	lowStack,x
.af70	3e 00 07	rol $0700,x			rol 	highStack,x
.af73	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.af76					Unary_Shr:
.af76	fa		plx				plx
.af77	5e 00 07	lsr $0700,x			lsr 	highStack,x
.af7a	7e 00 06	ror $0600,x			ror 	lowStack,x
.af7d	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.af80					Unary_Sgn:
.af80	fa		plx				plx
.af81	bd 00 07	lda $0700,x			lda 	highStack,x 				; check bit 7.
.af84	10 0a		bpl $af90			bpl 	_USNotNeg
.af86	a9 ff		lda #$ff			lda 	#$FF 						; if -ve set to -1
.af88	9d 00 06	sta $0600,x			sta 	lowStack,x
.af8b	9d 00 07	sta $0700,x			sta 	highStack,x
.af8e	80 10		bra $afa0			bra 	_USExit
.af90					_USNotNeg:
.af90	1d 00 06	ora $0600,x			ora 	lowStack,x 					; A = Low|High
.af93	9e 00 06	stz $0600,x			stz 	lowStack,x 					; Zero result
.af96	9e 00 07	stz $0700,x			stz 	highStack,x
.af99	c9 00		cmp #$00			cmp 	#0 							; if 0 return 0
.af9b	f0 03		beq $afa0			beq 	_USExit
.af9d	fe 00 06	inc $0600,x			inc 	lowStack,x 					; else return 1.
.afa0					_USExit:
.afa0	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.afa3					Random_Handler:
.afa3	fa		plx				plx
.afa4	a5 15		lda $15				lda 	randomSeed
.afa6	05 16		ora $16				ora 	randomSeed+1
.afa8	d0 08		bne $afb2			bne 	_RH_NoInit
.afaa	a9 7c		lda #$7c			lda 	#$7C
.afac	85 15		sta $15				sta 	randomSeed
.afae	a9 a1		lda #$a1			lda 	#$A1
.afb0	85 16		sta $16				sta 	randomSeed+1
.afb2					_RH_NoInit:
.afb2	a5 15		lda $15				lda 	randomSeed
.afb4	4a		lsr a		        lsr		a
.afb5	26 16		rol $16		        rol 	randomSeed+1
.afb7	90 02		bcc $afbb	        bcc 	_RH_NoEor
.afb9	49 b4		eor #$b4	        eor 	#$B4
.afbb					_RH_NoEor:
.afbb	85 15		sta $15		        sta 	randomSeed
.afbd	45 16		eor $16		        eor 	randomSeed+1
.afbf	e8		inx		        inx
.afc0	9d 00 07	sta $0700,x	        sta 	highStack,x
.afc3	a5 15		lda $15		        lda 	randomSeed
.afc5	9d 00 06	sta $0600,x	        sta 	lowStack,x
.afc8	4c 86 a2	jmp $a286			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/structures/call.asm

.afcb					Command_Call:
.afcb	fa		plx				plx
.afcc	20 b4 a5	jsr $a5b4			jsr 	StackPushPosition 				; save stack position
.afcf	a9 02		lda #$02			lda 	#KWD_SYS_CALL 					; push call marker
.afd1	20 a4 a5	jsr $a5a4			jsr 	StackPushByte
.afd4	b1 00		lda ($00),y			lda 	(codePtr),y 					; copy target address into zTemp0
.afd6	85 02		sta $02				sta 	zTemp0
.afd8	c8		iny				iny
.afd9	b1 00		lda ($00),y			lda 	(codePtr),y
.afdb	85 03		sta $03				sta 	zTemp0+1
.afdd	a9 00		lda #$00			lda 	#(ProgramStart) & $FF
.afdf	85 00		sta $00				sta 	codePtr
.afe1	a9 10		lda #$10			lda 	#(ProgramStart) >> 8
.afe3	85 01		sta $01				sta 	codePtr+1
.afe5	a0 01		ldy #$01			ldy 	#1
.afe7					_CCSearch:
.afe7	b2 00		lda ($00)			lda 	(codePtr)						; end of program
.afe9	f0 2d		beq $b018			beq		_CCFail
.afeb	b1 00		lda ($00),y			lda 	(codePtr),y 					; compare line number LSB.
.afed	c5 02		cmp $02				cmp 	zTemp0 							; if equal, go check the next.
.afef	f0 0d		beq $affe			beq 	_CCCheckMSB
.aff1	18		clc				clc 									; forward to next line.
.aff2	b2 00		lda ($00)			lda 	(codePtr)
.aff4	65 00		adc $00				adc 	codePtr
.aff6	85 00		sta $00				sta 	codePtr
.aff8	90 ed		bcc $afe7			bcc 	_CCSearch
.affa	e6 01		inc $01				inc 	codePtr+1
.affc	80 e9		bra $afe7			bra 	_CCSearch
.affe					_CCCheckMSB:
.affe	c8		iny				iny 									; get MSB, keeping Y as 1
.afff	b1 00		lda ($00),y			lda 	(codePtr),y
.b001	88		dey				dey
.b002	c5 03		cmp $03				cmp 	zTemp0+1						; not found go back.
.b004	d0 e1		bne $afe7			bne 	_CCSearch
.b006	a0 03		ldy #$03			ldy 	#3 								; start running from here.
.b008	b1 00		lda ($00),y			lda 	(codePtr),y 					; check it's a define
.b00a	c9 05		cmp #$05			cmp 	#KWD_SYS_DEFINE
.b00c	d0 0a		bne $b018			bne 	_CCFail
.b00e	c8		iny				iny 									; get the length of this.
.b00f	b1 00		lda ($00),y			lda 	(codePtr),y
.b011	18		clc				clc
.b012	69 05		adc #$05			adc 	#5 								; move to the end of the definition
.b014	a8		tay				tay
.b015	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b018					_CCFail:
.b018	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>b01b	43 41 4c 4c 3f 00				.text 	"CALL?",0
.b021					Command_Return:
.b021	fa		plx				plx
.b022	a9 02		lda #$02			lda 	#KWD_SYS_CALL 					; check it's a call
.b024	20 c3 a5	jsr $a5c3			jsr 	StackCheckTop
.b027	90 0f		bcc $b038			bcc 	_CRFail
.b029	a0 01		ldy #$01			ldy		#1								; return. Add 2 to skip call address
.b02b	20 d1 a5	jsr $a5d1			jsr 	StackRestorePosition
.b02e	c8		iny				iny
.b02f	c8		iny				iny
.b030	a9 04		lda #$04			lda 	#4 								; pop off stack
.b032	20 cb a5	jsr $a5cb			jsr 	StackPop
.b035	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b038					_CRFail:
.b038	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>b03b	43 41 4c 4c 3f 00				.text 	"CALL?",0

;******  Return to file: main.asm


;******  Processing file: words/structures/if.asm

.b041					Structure_If:
.b041	fa		plx				plx
.b042	a9 06		lda #$06			lda 	#KWD_IF 						; push if marker.
.b044	20 a4 a5	jsr $a5a4			jsr 	StackPushByte
.b047	18		clc				clc
.b048	bd 00 06	lda $0600,x			lda 	lowStack,x 						; check TOS is zero
.b04b	1d 00 07	ora $0700,x			ora 	highStack,x
.b04e	ca		dex				dex 									; drop TOS
.b04f	c9 00		cmp #$00			cmp 	#0 								; if zero, skip forward to ELSE or ENDIF
.b051	d0 0e		bne $b061			bne 	_SIFNoSkip 						; at this level.
.b053	da		phx				phx
.b054	a9 37		lda #$37			lda 	#KWD_ELSE
.b056	a2 09		ldx #$09			ldx 	#KWD_ENDIF
.b058	20 8e b0	jsr $b08e			jsr 	StructSkipForward
.b05b	fa		plx				plx 									; restore X
.b05c	c9 37		cmp #$37			cmp 	#KWD_ELSE 						; if it was ELSE skip over that and run ELSE
.b05e	d0 01		bne $b061			bne 	_SIFNoSkip 						; clause.
.b060	c8		iny				iny
.b061					_SIFNoSkip:
.b061	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b064					Structure_Else:
.b064	fa		plx				plx
.b065	a9 06		lda #$06			lda 	#KWD_IF 						; check IF on top
.b067	20 c3 a5	jsr $a5c3			jsr 	StackCheckTop
.b06a	90 0b		bcc $b077			bcc 	SIFail
.b06c	da		phx				phx 									; got here by executing IF clause so skip
.b06d	a9 09		lda #$09			lda 	#KWD_ENDIF 						; forward to ENDIF
.b06f	aa		tax				tax
.b070	20 8e b0	jsr $b08e			jsr 	StructSkipForward
.b073	fa		plx				plx
.b074	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b077					SIFail:
.b077	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>b07a	49 46 3f 00					.text 	"IF?",0
.b07e					Structure_Endif:
.b07e	fa		plx				plx
.b07f	a9 06		lda #$06			lda 	#KWD_IF 						; check IF on top
.b081	20 c3 a5	jsr $a5c3			jsr 	StackCheckTop
.b084	90 f1		bcc $b077			bcc 	SIFail
.b086	a9 01		lda #$01			lda 	#1 								; throw it.
.b088	20 cb a5	jsr $a5cb			jsr 	StackPop
.b08b	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b08e					StructSkipForward:
.b08e	85 02		sta $02				sta 	zTemp0 							; save the tokens to test
.b090	86 03		stx $03				stx 	zTemp0+1
.b092	64 04		stz $04				stz 	zTemp1 							; zero the level counter.
.b094					_SSFLoop:
.b094	b1 00		lda ($00),y			lda 	(codePtr),y 					; get current
.b096	a6 04		ldx $04				ldx 	zTemp1 							; if the structure level is non zero must fail
.b098	d0 08		bne $b0a2			bne		_SSFFail
.b09a	c5 02		cmp $02				cmp 	zTemp0 							; check for match.
.b09c	f0 17		beq $b0b5			beq 	_SSFEnd
.b09e	c5 03		cmp $03				cmp 	zTemp0+1
.b0a0	f0 13		beq $b0b5			beq 	_SSFEnd
.b0a2					_SSFFail:
.b0a2	20 b6 b0	jsr $b0b6			jsr 	AdvanceInCode 					; skip over in code.
.b0a5	b0 ed		bcs $b094			bcs 	_SSFLoop 						; if not end of program, keep going.
.b0a7	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>b0aa	53 54 52 55 43 54 55 52				.text 	"STRUCTURE?",0
>b0b2	45 3f 00
.b0b5					_SSFEnd:
.b0b5	60		rts				rts
.b0b6					AdvanceInCode:
.b0b6	b1 00		lda ($00),y			lda 	(codePtr),y 					; look at current
.b0b8	f0 28		beq $b0e2			beq 	_AICEndOfLine 					; end of line.
.b0ba	c8		iny				iny 									; advance one.
.b0bb	c9 06		cmp #$06			cmp 	#TOK_NOT_CONTROL 				; is it a control
.b0bd	90 10		bcc $b0cf			bcc 	_AICControl
.b0bf	c9 0c		cmp #$0c			cmp 	#TOK_STRUCT_NEUTRAL 			; neutral token ?
.b0c1	b0 0a		bcs $b0cd			bcs 	_AICExit
.b0c3	e6 04		inc $04				inc 	zTemp1 							; bump the structure count.
.b0c5	c9 09		cmp #$09			cmp 	#TOK_STRUCT_DEC 				; if decrement
.b0c7	90 04		bcc $b0cd			bcc 	_AICExit
.b0c9	c6 04		dec $04				dec 	zTemp1
.b0cb	c6 04		dec $04				dec 	zTemp1
.b0cd					_AICExit:
.b0cd	38		sec				sec
.b0ce	60		rts				rts
.b0cf					_AICControl:
.b0cf	c9 01		cmp #$01			cmp 	#KWD_SYS_CONST 					; constant and call advance +3
.b0d1	f0 0b		beq $b0de			beq 	_AICThree
.b0d3	c9 02		cmp #$02			cmp 	#KWD_SYS_CALL
.b0d5	f0 07		beq $b0de			beq 	_AICThree
.b0d7	98		tya				tya										; skip over a string/comment/define.
.b0d8	38		sec				sec
.b0d9	71 00		adc ($00),y			adc 	(codePtr),y
.b0db	a8		tay				tay
.b0dc	38		sec				sec
.b0dd	60		rts				rts
.b0de					_AICThree:
.b0de	c8		iny				iny
.b0df	c8		iny				iny
.b0e0	38		sec				sec
.b0e1	60		rts				rts
.b0e2					_AICEndOfLine:
.b0e2	18		clc				clc 									; forward to next line.
.b0e3	b2 00		lda ($00)			lda 	(codePtr)
.b0e5	65 00		adc $00				adc 	codePtr
.b0e7	85 00		sta $00				sta 	codePtr
.b0e9	90 02		bcc $b0ed			bcc 	_AICNoCarry
.b0eb	e6 01		inc $01				inc 	codePtr+1
.b0ed					_AICNoCarry:
.b0ed	a0 03		ldy #$03			ldy 	#3 								; start of new line
.b0ef	b2 00		lda ($00)			lda 	(codePtr) 						; check offset is non zero
.b0f1	d0 da		bne $b0cd			bne 	_AICExit
.b0f3	18		clc				clc 									; program end.
.b0f4	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: words/structures/repeat.asm

.b0f5					Struct_Repeat:
.b0f5	fa		plx				plx
.b0f6	20 b4 a5	jsr $a5b4			jsr 	StackPushPosition 				; save stack position
.b0f9	a9 07		lda #$07			lda 	#KWD_REPEAT 					; push repeat marker
.b0fb	20 a4 a5	jsr $a5a4			jsr 	StackPushByte
.b0fe	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b101					Struct_Until:
.b101	fa		plx				plx
.b102	a9 07		lda #$07			lda 	#KWD_REPEAT 					; check it's a repeat
.b104	20 c3 a5	jsr $a5c3			jsr 	StackCheckTop
.b107	90 1b		bcc $b124			bcc 	_SUFail
.b109	bd 00 06	lda $0600,x			lda		lowStack,x						; check it was zero ?
.b10c	1d 00 07	ora $0700,x			ora 	highStack,x
.b10f	ca		dex				dex
.b110	09 00		ora #$00			ora 	#0
.b112	f0 08		beq $b11c			beq 	_SULoopBack 					; if so keep going.
.b114	a9 04		lda #$04			lda 	#4 								; pop 4 bytes off the stack
.b116	20 cb a5	jsr $a5cb			jsr 	StackPop
.b119	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b11c					_SULoopBack:
.b11c	a0 01		ldy #$01			ldy 	#1 								; transfer to position at (iStack),y
.b11e	20 d1 a5	jsr $a5d1			jsr 	StackRestorePosition
.b121	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b124					_SUFail:
.b124	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>b127	4e 4f 20 52 45 50 45 41				.text 	"NO REPEAT",0
>b12f	54 00

;******  Return to file: main.asm


;******  Processing file: words/structures/for.asm

.b131					Struct_For:
.b131	fa		plx				plx
.b132	18		clc				clc
.b133	bd 00 06	lda $0600,x			lda 	lowStack,x 					; push ~ count on the stack
.b136	49 ff		eor #$ff			eor 	#$FF
.b138	69 01		adc #$01			adc 	#1
.b13a	08		php				php
.b13b	20 a4 a5	jsr $a5a4			jsr 	StackPushByte
.b13e	bd 00 07	lda $0700,x			lda 	highStack,x
.b141	49 ff		eor #$ff			eor 	#$FF
.b143	28		plp				plp
.b144	69 00		adc #$00			adc 	#0
.b146	20 a4 a5	jsr $a5a4			jsr 	StackPushByte
.b149	ca		dex				dex 									; throw TOS
.b14a	20 b4 a5	jsr $a5b4			jsr 	StackPushPosition 				; save stack position
.b14d	a9 08		lda #$08			lda 	#KWD_FOR 						; push for marker
.b14f	20 a4 a5	jsr $a5a4			jsr 	StackPushByte
.b152	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b155					Struct_Index:
.b155	fa		plx				plx
.b156	a9 08		lda #$08			lda 	#KWD_FOR 						; check it's a for
.b158	20 c3 a5	jsr $a5c3			jsr 	StackCheckTop
.b15b	90 43		bcc $b1a0			bcc 	SNFail
.b15d	e8		inx				inx 									; new stack entry
.b15e	5a		phy				phy
.b15f	a0 04		ldy #$04			ldy 	#4 								; access index value
.b161	b1 0e		lda ($0e),y			lda 	(iStack),y
.b163	49 ff		eor #$ff			eor 	#$FF
.b165	9d 00 07	sta $0700,x			sta 	highStack,x
.b168	c8		iny				iny
.b169	b1 0e		lda ($0e),y			lda 	(iStack),y
.b16b	49 ff		eor #$ff			eor 	#$FF
.b16d	9d 00 06	sta $0600,x			sta 	lowStack,x
.b170	7a		ply				ply 									; restore code pointer
.b171	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b174					Struct_Next:
.b174	fa		plx				plx
.b175	a9 08		lda #$08			lda 	#KWD_FOR 						; check it's a for
.b177	20 c3 a5	jsr $a5c3			jsr 	StackCheckTop
.b17a	90 24		bcc $b1a0			bcc 	SNFail
.b17c	5a		phy				phy 									; save code position
.b17d	a0 05		ldy #$05			ldy 	#5 								; bump the count
.b17f	b1 0e		lda ($0e),y			lda 	(iStack),y
.b181	1a		inc a				inc 	a
.b182	91 0e		sta ($0e),y			sta 	(iStack),y
.b184	d0 11		bne $b197			bne 	_SNLoopBack
.b186	88		dey				dey
.b187	b1 0e		lda ($0e),y			lda 	(iStack),y
.b189	1a		inc a				inc 	a
.b18a	91 0e		sta ($0e),y			sta 	(iStack),y
.b18c	d0 09		bne $b197			bne 	_SNLoopBack  					; non-zero loop back.
.b18e	7a		ply				ply 									; restore code position.
.b18f	a9 06		lda #$06			lda 	#6 								; pop 6 bytes off the stack
.b191	20 cb a5	jsr $a5cb			jsr 	StackPop
.b194	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b197					_SNLoopBack:
.b197	7a		ply				ply 									; restore code position, being junked anyway.
.b198	a0 01		ldy #$01			ldy 	#1 								; transfer to position at (iStack),y
.b19a	20 d1 a5	jsr $a5d1			jsr 	StackRestorePosition
.b19d	4c 86 a2	jmp $a286			jmp 	ExecuteLoop
.b1a0					SNFail:
.b1a0	20 1a a2	jsr $a21a			jsr 	ErrorHandler
>b1a3	4e 4f 20 46 4f 52 00				.text 	"NO FOR",0

;******  Return to file: main.asm


;******  End of listing
