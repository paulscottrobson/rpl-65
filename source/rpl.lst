
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o rpl.prg -L rpl.lst main.asm
; Fri Nov 15 07:49:58 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; Build address
=$0f00					MemoryStart = $0F00 						; Main memory space here
=$9f00					HighMemory = $9F00							; Where memory ends
=$0600					StackAddress = $0600						; Stack (1/2k bytes)
=$0800					InputBuffer = $0800							; Input Buffer (must be on a page boundary)
=$09ff					IntStack = $09FF 							; Interpreter Stack
=$08e0					ConvertBuffer = $08E0 						; Conversion buffer (numbers)
=$0a00					TokenBuffer = $0A00 						; Tokenisation Buffer
=16					HashTableSize = 16 							; size of hash table (# entries)
>0000					CodePtr: 		.word ? 					; code pointer
>0002					zTemp0:			.word ?						; temporary words
>0004					zTemp1: 		.word ?
>0006					zTemp2: 		.word ?
>0008					zTemp3: 		.word ?
>000a					iStack:			.word ?						; stack pointer
>000c					signCount:		.byte ? 					; divide sign count.
>000d					allocPtr:		.word ? 					; memory allocation pointer (down)
>000f					memVarPtr:		.word ? 					; pointer for memory variables (up)
>0011					randomSeed:		.word ? 					; random number seed
>0013					prefixCharacter:.byte ?						; char to print before listed element.
>0014					breakCount:		.byte ? 					; counter avoids repeated break checks
>0015					tokenOffset:	.byte ? 					; position in output token buffer.
>0f00					FastVariables:	.fill 	64 					; fast variable memory.
>0f40					VariableHashTable:.fill	HashTableSize * 2 	; hash tables (variables)
=4096					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0600					lowStack = StackAddress 					; low stack bytes
=1792					highStack = StackAddress+256				; high stack bytes
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8

;******  Return to file: main.asm


;******  Processing file: macros.inc


;******  Return to file: main.asm

.0e00	4c 00 a0	jmp $a000			jmp 	Start

;******  Processing file: generated/program.inc

>1000	0f e8 03 01 00 60 22 c2			.byte	$0f,$e8,$03,$01,$00,$60,$22,$c2,$c1,$cc,$cc,$cd,$c5,$ed,$00,$0b,$f2,$03,$a0,$22,$c3,$cf,$d5,$ce,$f4,$00,$0d,$fc,$03,$01,$8e,$00,$22,$e1,$01,$d2,$ff,$25,$00,$12,$06,$04,$c3,$cf,$d5,$ce,$f4,$08,$38,$02,$38,$04,$02,$42,$04,$0b,$00,$08,$10,$04,$01,$50,$00,$08,$00,$12,$1a,$04,$c3,$cf,$d5,$ce,$f4,$08,$38,$02,$38,$04,$02,$88,$04,$0b,$00,$05,$24,$04,$0b,$00,$05,$2e,$04,$40,$00,$1e,$38,$04,$05,$06,$d3,$c5,$cc,$c5,$c3,$f4,$2d,$2d,$2d,$2d,$c2,$c1,$cc,$cc,$cd,$c5,$ed,$0f,$22,$c2,$c1,$cc,$ec,$39,$00,$29,$42,$04,$05,$09,$c2,$c1,$cc,$cc,$db,$c9,$ce,$c9,$f4,$30,$27,$01,$50,$00,$0e,$22,$c2,$c1,$cc,$ec,$23,$80,$24,$30,$27,$bc,$0e,$22,$c2,$c1,$cc,$ec,$23,$81,$24,$00,$2d,$4c,$04,$02,$56,$04,$22,$c2,$c1,$cc,$ec,$23,$82,$24,$02,$56,$04,$22,$c2,$c1,$cc,$ec,$23,$83,$24,$30,$87,$11,$2a,$22,$c2,$c1,$cc,$ec,$23,$84,$24,$01,$51,$00,$02,$60,$04,$39,$00,$15,$56,$04,$05,$04,$d2,$d3,$c7,$ee,$30,$81,$11,$06,$81,$37,$01,$ff,$ff,$09,$39,$00,$0f,$60,$04,$05,$09,$c2,$c1,$cc,$cc,$db,$c4,$d2,$c1,$f7,$00,$10,$6a,$04,$c2,$c1,$cc,$ec,$23,$80,$24,$2d,$01,$20,$9f,$1d,$00,$0f,$74,$04,$c2,$c1,$cc,$ec,$23,$81,$24,$01,$21,$9f,$1d,$00,$19,$7e,$04,$90,$01,$22,$9f,$1d,$01,$23,$9f,$1d,$c2,$c1,$cc,$ec,$23,$84,$24,$01,$23,$9f,$1d,$39,$00,$0f,$88,$04,$05,$09,$c2,$c1,$cc,$cc,$db,$cd,$cf,$d6,$e5,$00,$08,$92,$04,$a0,$02,$60,$04,$00,$1c,$9c,$04,$c2,$c1,$cc,$ec,$23,$80,$24,$c2,$c1,$cc,$ec,$23,$82,$24,$0f,$33,$22,$c2,$c1,$cc,$ec,$23,$80,$24,$00,$1f,$a6,$04,$33,$01,$50,$00,$1a,$36,$80,$19,$12,$06,$c2,$c1,$cc,$ec,$23,$82,$24,$28,$22,$c2,$c1,$cc,$ec,$23,$82,$24,$09,$00,$1c,$b0,$04,$c2,$c1,$cc,$ec,$23,$81,$24,$c2,$c1,$cc,$ec,$23,$83,$24,$0f,$33,$22,$c2,$c1,$cc,$ec,$23,$81,$24,$00,$1d,$ba,$04,$33,$bc,$1a,$36,$80,$19,$12,$06,$c2,$c1,$cc,$ec,$23,$83,$24,$28,$22,$c2,$c1,$cc,$ec,$23,$83,$24,$09,$00,$0a,$c4,$04,$01,$51,$00,$02,$60,$04,$00,$05,$ce,$04,$39,$00
>1008	c1 cc cc cd c5 ed 00 0b f2 03 a0 22 c3 cf d5 ce
>1018	f4 00 0d fc 03 01 8e 00 22 e1 01 d2 ff 25 00 12
>1028	06 04 c3 cf d5 ce f4 08 38 02 38 04 02 42 04 0b
>1038	00 08 10 04 01 50 00 08 00 12 1a 04 c3 cf d5 ce
>1048	f4 08 38 02 38 04 02 88 04 0b 00 05 24 04 0b 00
>1058	05 2e 04 40 00 1e 38 04 05 06 d3 c5 cc c5 c3 f4
>1068	2d 2d 2d 2d c2 c1 cc cc cd c5 ed 0f 22 c2 c1 cc
>1078	ec 39 00 29 42 04 05 09 c2 c1 cc cc db c9 ce c9
>1088	f4 30 27 01 50 00 0e 22 c2 c1 cc ec 23 80 24 30
>1098	27 bc 0e 22 c2 c1 cc ec 23 81 24 00 2d 4c 04 02
>10a8	56 04 22 c2 c1 cc ec 23 82 24 02 56 04 22 c2 c1
>10b8	cc ec 23 83 24 30 87 11 2a 22 c2 c1 cc ec 23 84
>10c8	24 01 51 00 02 60 04 39 00 15 56 04 05 04 d2 d3
>10d8	c7 ee 30 81 11 06 81 37 01 ff ff 09 39 00 0f 60
>10e8	04 05 09 c2 c1 cc cc db c4 d2 c1 f7 00 10 6a 04
>10f8	c2 c1 cc ec 23 80 24 2d 01 20 9f 1d 00 0f 74 04
>1108	c2 c1 cc ec 23 81 24 01 21 9f 1d 00 19 7e 04 90
>1118	01 22 9f 1d 01 23 9f 1d c2 c1 cc ec 23 84 24 01
>1128	23 9f 1d 39 00 0f 88 04 05 09 c2 c1 cc cc db cd
>1138	cf d6 e5 00 08 92 04 a0 02 60 04 00 1c 9c 04 c2
>1148	c1 cc ec 23 80 24 c2 c1 cc ec 23 82 24 0f 33 22
>1158	c2 c1 cc ec 23 80 24 00 1f a6 04 33 01 50 00 1a
>1168	36 80 19 12 06 c2 c1 cc ec 23 82 24 28 22 c2 c1
>1178	cc ec 23 82 24 09 00 1c b0 04 c2 c1 cc ec 23 81
>1188	24 c2 c1 cc ec 23 83 24 0f 33 22 c2 c1 cc ec 23
>1198	81 24 00 1d ba 04 33 bc 1a 36 80 19 12 06 c2 c1
>11a8	cc ec 23 83 24 28 22 c2 c1 cc ec 23 83 24 09 00
>11b8	0a c4 04 01 51 00 02 60 04 00 05 ce 04 39 00

;******  Return to file: main.asm

.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 a3 a2	jsr $a2a3			jsr 	ExternInitialise
.a006	4c e3 a1	jmp $a1e3			jmp 	ExecuteProgram
.a009					WarmStart:
>a009	ff						.byte 	$FF
.a00a	a2 55		ldx #$55			ldx 	#$55

;******  Processing file: generated/rpl.inc

=$06					TOK_NOT_CONTROL = $06
=$06					TOK_STRUCT_INC = $06
=$09					TOK_STRUCT_DEC = $09
=$0c					TOK_STRUCT_NEUTRAL = $0c
=$0000					KWD_SYS_EOL                    = $0000 ; %eol
=$0001					KWD_SYS_CONST                  = $0001 ; %const
=$0002					KWD_SYS_CALL                   = $0002 ; %call
=$0003					KWD_SYS_COMMENT                = $0003 ; %comment
=$0004					KWD_SYS_QSTRING                = $0004 ; %qstring
=$0005					KWD_SYS_DEFINE                 = $0005 ; %define
=$0006					KWD_IF                         = $0006 ; if
=$0007					KWD_REPEAT                     = $0007 ; repeat
=$0008					KWD_FOR                        = $0008 ; for
=$0009					KWD_ENDIF                      = $0009 ; endif
=$000a					KWD_UNTIL                      = $000a ; until
=$000b					KWD_NEXT                       = $000b ; next
=$000c					KWD_STAR                       = $000c ; *
=$000d					KWD_SLASH                      = $000d ; /
=$000e					KWD_MOD                        = $000e ; mod
=$000f					KWD_PLUS                       = $000f ; +
=$0010					KWD_MINUS                      = $0010 ; -
=$0011					KWD_AND                        = $0011 ; and
=$0012					KWD_OR                         = $0012 ; or
=$0013					KWD_XOR                        = $0013 ; xor
=$0014					KWD_SHL                        = $0014 ; shl
=$0015					KWD_SHR                        = $0015 ; shr
=$0016					KWD_EQUAL                      = $0016 ; =
=$0017					KWD_LESSGREATER                = $0017 ; <>
=$0018					KWD_GREATER                    = $0018 ; >
=$0019					KWD_LESS                       = $0019 ; <
=$001a					KWD_GREATEREQUAL               = $001a ; >=
=$001b					KWD_LESSEQUAL                  = $001b ; <=
=$001c					KWD_CAT                        = $001c ; c@
=$001d					KWD_CPLING                     = $001d ; c!
=$001e					KWD_AT                         = $001e ; @
=$001f					KWD_PLING                      = $001f ; !
=$0020					KWD_DPLING                     = $0020 ; d!
=$0021					KWD_ALLOC                      = $0021 ; alloc
=$0022					KWD_HAT                        = $0022 ; ^
=$0023					KWD_LSQPAREN                   = $0023 ; [
=$0024					KWD_RSQPAREN                   = $0024 ; ]
=$0025					KWD_SYS                        = $0025 ; sys
=$0026					KWD_QMARK                      = $0026 ; ?
=$0027					KWD_ABS                        = $0027 ; abs
=$0028					KWD_NEGATE                     = $0028 ; negate
=$0029					KWD_NOT                        = $0029 ; not
=$002a					KWD_PLUSPLUS                   = $002a ; ++
=$002b					KWD_MINUSMINUS                 = $002b ; --
=$002c					KWD_BSWAP                      = $002c ; bswap
=$002d					KWD_LESSLESS                   = $002d ; <<
=$002e					KWD_GREATERGREATER             = $002e ; >>
=$002f					KWD_SGN                        = $002f ; sgn
=$0030					KWD_RND                        = $0030 ; rnd
=$0031					KWD_CLR                        = $0031 ; clr
=$0032					KWD_DROP                       = $0032 ; drop
=$0033					KWD_DUP                        = $0033 ; dup
=$0034					KWD_NIP                        = $0034 ; nip
=$0035					KWD_OVER                       = $0035 ; over
=$0036					KWD_SWAP                       = $0036 ; swap
=$0037					KWD_ELSE                       = $0037 ; else
=$0038					KWD_INDEX                      = $0038 ; index
=$0039					KWD_SEMICOLON                  = $0039 ; ;
=$003a					KWD_ASSERT                     = $003a ; assert
=$003b					KWD_LIST                       = $003b ; list
=$003c					KWD_NEW                        = $003c ; new
=$003d					KWD_OLD                        = $003d ; old
=$003e					KWD_STOP                       = $003e ; stop
=$003f					KWD_RUN                        = $003f ; run
=$0040					KWD_END                        = $0040 ; end
=$0041					KWD_SAVE                       = $0041 ; save
=$0042					KWD_LOAD                       = $0042 ; load
.a00c					KeywordText:
>a00c	01 ff					.text $01,$ff                          ; $0000 %eol
>a00e	01 ff					.text $01,$ff                          ; $0001 %const
>a010	01 ff					.text $01,$ff                          ; $0002 %call
>a012	01 ff					.text $01,$ff                          ; $0003 %comment
>a014	01 ff					.text $01,$ff                          ; $0004 %qstring
>a016	01 ff					.text $01,$ff                          ; $0005 %define
>a018	02 49 c6				.text $02,$49,$c6                      ; $0006 if
>a01b	06 52 45 50 45 41 d4			.text $06,$52,$45,$50,$45,$41,$d4      ; $0007 repeat
>a022	03 46 4f d2				.text $03,$46,$4f,$d2                  ; $0008 for
>a026	05 45 4e 44 49 c6			.text $05,$45,$4e,$44,$49,$c6          ; $0009 endif
>a02c	05 55 4e 54 49 cc			.text $05,$55,$4e,$54,$49,$cc          ; $000a until
>a032	04 4e 45 58 d4				.text $04,$4e,$45,$58,$d4              ; $000b next
>a037	01 aa					.text $01,$aa                          ; $000c *
>a039	01 af					.text $01,$af                          ; $000d /
>a03b	03 4d 4f c4				.text $03,$4d,$4f,$c4                  ; $000e mod
>a03f	01 ab					.text $01,$ab                          ; $000f +
>a041	01 ad					.text $01,$ad                          ; $0010 -
>a043	03 41 4e c4				.text $03,$41,$4e,$c4                  ; $0011 and
>a047	02 4f d2				.text $02,$4f,$d2                      ; $0012 or
>a04a	03 58 4f d2				.text $03,$58,$4f,$d2                  ; $0013 xor
>a04e	03 53 48 cc				.text $03,$53,$48,$cc                  ; $0014 shl
>a052	03 53 48 d2				.text $03,$53,$48,$d2                  ; $0015 shr
>a056	01 bd					.text $01,$bd                          ; $0016 =
>a058	02 3c be				.text $02,$3c,$be                      ; $0017 <>
>a05b	01 be					.text $01,$be                          ; $0018 >
>a05d	01 bc					.text $01,$bc                          ; $0019 <
>a05f	02 3e bd				.text $02,$3e,$bd                      ; $001a >=
>a062	02 3c bd				.text $02,$3c,$bd                      ; $001b <=
>a065	02 43 c0				.text $02,$43,$c0                      ; $001c c@
>a068	02 43 a1				.text $02,$43,$a1                      ; $001d c!
>a06b	01 c0					.text $01,$c0                          ; $001e @
>a06d	01 a1					.text $01,$a1                          ; $001f !
>a06f	02 44 a1				.text $02,$44,$a1                      ; $0020 d!
>a072	05 41 4c 4c 4f c3			.text $05,$41,$4c,$4c,$4f,$c3          ; $0021 alloc
>a078	01 de					.text $01,$de                          ; $0022 ^
>a07a	01 db					.text $01,$db                          ; $0023 [
>a07c	01 dd					.text $01,$dd                          ; $0024 ]
>a07e	03 53 59 d3				.text $03,$53,$59,$d3                  ; $0025 sys
>a082	01 bf					.text $01,$bf                          ; $0026 ?
>a084	03 41 42 d3				.text $03,$41,$42,$d3                  ; $0027 abs
>a088	06 4e 45 47 41 54 c5			.text $06,$4e,$45,$47,$41,$54,$c5      ; $0028 negate
>a08f	03 4e 4f d4				.text $03,$4e,$4f,$d4                  ; $0029 not
>a093	02 2b ab				.text $02,$2b,$ab                      ; $002a ++
>a096	02 2d ad				.text $02,$2d,$ad                      ; $002b --
>a099	05 42 53 57 41 d0			.text $05,$42,$53,$57,$41,$d0          ; $002c bswap
>a09f	02 3c bc				.text $02,$3c,$bc                      ; $002d <<
>a0a2	02 3e be				.text $02,$3e,$be                      ; $002e >>
>a0a5	03 53 47 ce				.text $03,$53,$47,$ce                  ; $002f sgn
>a0a9	03 52 4e c4				.text $03,$52,$4e,$c4                  ; $0030 rnd
>a0ad	03 43 4c d2				.text $03,$43,$4c,$d2                  ; $0031 clr
>a0b1	04 44 52 4f d0				.text $04,$44,$52,$4f,$d0              ; $0032 drop
>a0b6	03 44 55 d0				.text $03,$44,$55,$d0                  ; $0033 dup
>a0ba	03 4e 49 d0				.text $03,$4e,$49,$d0                  ; $0034 nip
>a0be	04 4f 56 45 d2				.text $04,$4f,$56,$45,$d2              ; $0035 over
>a0c3	04 53 57 41 d0				.text $04,$53,$57,$41,$d0              ; $0036 swap
>a0c8	04 45 4c 53 c5				.text $04,$45,$4c,$53,$c5              ; $0037 else
>a0cd	05 49 4e 44 45 d8			.text $05,$49,$4e,$44,$45,$d8          ; $0038 index
>a0d3	01 bb					.text $01,$bb                          ; $0039 ;
>a0d5	06 41 53 53 45 52 d4			.text $06,$41,$53,$53,$45,$52,$d4      ; $003a assert
>a0dc	04 4c 49 53 d4				.text $04,$4c,$49,$53,$d4              ; $003b list
>a0e1	03 4e 45 d7				.text $03,$4e,$45,$d7                  ; $003c new
>a0e5	03 4f 4c c4				.text $03,$4f,$4c,$c4                  ; $003d old
>a0e9	04 53 54 4f d0				.text $04,$53,$54,$4f,$d0              ; $003e stop
>a0ee	03 52 55 ce				.text $03,$52,$55,$ce                  ; $003f run
>a0f2	03 45 4e c4				.text $03,$45,$4e,$c4                  ; $0040 end
>a0f6	04 53 41 56 c5				.text $04,$53,$41,$56,$c5              ; $0041 save
>a0fb	04 4c 4f 41 c4				.text $04,$4c,$4f,$41,$c4              ; $0042 load
>a100	00					.byte 0
>a101						.align 2
.a102					DispatchHandler:
>a102	64 a2					.word ExecuteNextLine          ; $0000 %eol
>a104	7a a2					.word LongConstant             ; $0001 %const
>a106	35 ae					.word Command_Call             ; $0002 %call
>a108	64 a2					.word ExecuteComment           ; $0003 %comment
>a10a	8b a2					.word StringConstant           ; $0004 %qstring
>a10c	88 a1					.word SyntaxError              ; $0005 %define
>a10e	ab ae					.word Structure_If             ; $0006 if
>a110	5f af					.word Struct_Repeat            ; $0007 repeat
>a112	9b af					.word Struct_For               ; $0008 for
>a114	e8 ae					.word Structure_Endif          ; $0009 endif
>a116	6b af					.word Struct_Until             ; $000a until
>a118	de af					.word Struct_Next              ; $000b next
>a11a	39 ad					.word MulInteger16             ; $000c *
>a11c	b7 ac					.word DivInteger16             ; $000d /
>a11e	28 ad					.word ModInteger16             ; $000e mod
>a120	a3 ab					.word Stack_Add                ; $000f +
>a122	bb ab					.word Stack_Sub                ; $0010 -
>a124	d3 ab					.word Stack_And                ; $0011 and
>a126	01 ac					.word Stack_Or                 ; $0012 or
>a128	ea ab					.word Stack_Xor                ; $0013 xor
>a12a	18 ac					.word Stack_Shl                ; $0014 shl
>a12c	1c ac					.word Stack_Shr                ; $0015 shr
>a12e	4d ac					.word Comp_Equal               ; $0016 =
>a130	51 ac					.word Comp_NotEqual            ; $0017 <>
>a132	9a ac					.word Comp_Greater             ; $0018 >
>a134	75 ac					.word Comp_Less                ; $0019 <
>a136	79 ac					.word Comp_GreaterEqual        ; $001a >=
>a138	96 ac					.word Comp_LessEqual           ; $001b <=
>a13a	9c a9					.word Mem_Peek                 ; $001c c@
>a13c	ce a9					.word Mem_Poke                 ; $001d c!
>a13e	b2 a9					.word Mem_WPeek                ; $001e @
>a140	e3 a9					.word Mem_WPoke                ; $001f !
>a142	01 aa					.word Mem_DWPoke               ; $0020 d!
>a144	1b aa					.word Mem_Alloc                ; $0021 alloc
>a146	a9 aa					.word Command_Store            ; $0022 ^
>a148	88 a1					.word SyntaxError              ; $0023 [
>a14a	88 a1					.word SyntaxError              ; $0024 ]
>a14c	3a ab					.word Command_Sys              ; $0025 sys
>a14e	5c ab					.word Command_DumpStack        ; $0026 ?
>a150	77 ad					.word Unary_Absolute           ; $0027 abs
>a152	80 ad					.word Unary_Negate             ; $0028 negate
>a154	95 ad					.word Unary_Not                ; $0029 not
>a156	a9 ad					.word Unary_Increment          ; $002a ++
>a158	b5 ad					.word Unary_Decrement          ; $002b --
>a15a	c4 ad					.word Unary_BSwap              ; $002c bswap
>a15c	d6 ad					.word Unary_Shl                ; $002d <<
>a15e	e0 ad					.word Unary_Shr                ; $002e >>
>a160	ea ad					.word Unary_Sgn                ; $002f sgn
>a162	0d ae					.word Random_Handler           ; $0030 rnd
>a164	49 aa					.word Stack_Empty              ; $0031 clr
>a166	4f aa					.word Stack_Drop               ; $0032 drop
>a168	54 aa					.word Stack_Dup                ; $0033 dup
>a16a	65 aa					.word Stack_Nip                ; $0034 nip
>a16c	76 aa					.word Stack_Over               ; $0035 over
>a16e	87 aa					.word Stack_Swap               ; $0036 swap
>a170	ce ae					.word Structure_Else           ; $0037 else
>a172	bf af					.word Struct_Index             ; $0038 index
>a174	8b ae					.word Command_Return           ; $0039 ;
>a176	23 ab					.word Command_Assert           ; $003a assert
>a178	d4 a7					.word Cmd_List                 ; $003b list
>a17a	e8 aa					.word Command_New              ; $003c new
>a17c	ef aa					.word Command_Old              ; $003d old
>a17e	19 ab					.word Command_Stop             ; $003e stop
>a180	e3 a1					.word ExecuteProgram           ; $003f run
>a182	15 ab					.word Command_End              ; $0040 end
>a184	88 a1					.word SyntaxError              ; $0041 save
>a186	88 a1					.word SyntaxError              ; $0042 load

;******  Return to file: main.asm


;******  Processing file: core/error.asm

.a188					SyntaxError:
.a188	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a18b	53 59 4e 54 41 58 00				.text 	"SYNTAX",0
.a192					ErrorHandler:
.a192	fa		plx				plx 								; pull address off.
.a193	7a		ply				ply
.a194	e8		inx				inx 								; point to message
.a195	d0 01		bne $a198			bne 	_EHNoCarry
.a197	c8		iny				iny
.a198					_EHNoCarry:
.a198	20 c8 a1	jsr $a1c8			jsr 	PrintStringXY 				; print string at XY
.a19b	b2 00		lda ($00)			lda 	(codePtr) 					; gone off the end, like in structures ?
.a19d	f0 13		beq $a1b2			beq 	_EHNoLine
.a19f	a2 b7		ldx #$b7			ldx 	#_EHMessage & $FF 			; print " AT "
.a1a1	a0 a1		ldy #$a1			ldy 	#_EHMessage >> 8
.a1a3	20 c8 a1	jsr $a1c8			jsr 	PrintStringXY
.a1a6	a0 01		ldy #$01			ldy 	#1 							; line# into YX.
.a1a8	b1 00		lda ($00),y			lda 	(codePtr),y
.a1aa	aa		tax				tax
.a1ab	c8		iny				iny
.a1ac	b1 00		lda ($00),y			lda 	(codePtr),y
.a1ae	a8		tay				tay
.a1af	20 bc a1	jsr $a1bc			jsr 	PrintIntegerUnsigned
.a1b2					_EHNoLine:
.a1b2	80 fe		bra $a1b2			bra 	_EHNoLine
.a1b4	4c 09 a0	jmp $a009			jmp 	WarmStart
.a1b7					_EHMessage:
>a1b7	20 41 54 20 00					.text	" AT ",0
.a1bc					PrintIntegerUnsigned:
.a1bc	20 f2 a4	jsr $a4f2			jsr 	IntToString
.a1bf	a2 e0		ldx #$e0			ldx 	#ConvertBuffer & $FF 		; print number
.a1c1	a0 08		ldy #$08			ldy 	#ConvertBuffer >> 8
.a1c3	20 c8 a1	jsr $a1c8			jsr 	PrintStringXY
.a1c6	98		tya				tya
.a1c7	60		rts				rts
.a1c8					PrintStringXY:
.a1c8	86 02		stx $02				stx 	zTemp0
.a1ca	84 03		sty $03				sty 	zTemp0+1
.a1cc	a0 00		ldy #$00			ldy 	#0
.a1ce	b1 02		lda ($02),y	_PSLoop:lda 	(zTemp0),y
.a1d0	f0 06		beq $a1d8			beq 	_PSExit
.a1d2	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.a1d5	c8		iny				iny
.a1d6	80 f6		bra $a1ce			bra 	_PSLoop
.a1d8	60		rts		_PSExit:rts
.a1d9					PrintCharacter:
.a1d9	48		pha				pha
.a1da	da		phx				phx
.a1db	5a		phy				phy
.a1dc	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a1df	7a		ply				ply
.a1e0	fa		plx				plx
.a1e1	68		pla				pla
.a1e2	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/execute.asm

.a1e3					ExecuteProgram:
.a1e3	20 25 a4	jsr $a425			jsr 	StackReset 					; reset the CPU stack.
.a1e6	20 ed a3	jsr $a3ed			jsr 	ResetMemory 				; reset alloc pointers, variables etc.
.a1e9	a2 ff		ldx #$ff			ldx 	#$FF 						; empty the data stack
.a1eb	80 0a		bra $a1f7			bra 	ExecuteLoop
.a1ed					ShortConstant:
.a1ed	c8		iny				iny 								; skip short const
.a1ee	e8		inx				inx 								; space on stack
.a1ef	29 3f		and #$3f			and 	#$3F 						; the value
.a1f1	9d 00 06	sta $0600,x			sta 	lowStack,x 					; put on stack..
.a1f4	9e 00 07	stz $0700,x			stz 	highStack,x
.a1f7					ExecuteLoop:
.a1f7	e6 14		inc $14				inc 	breakCount 					; check break sometimes.
.a1f9	d0 03		bne $a1fe			bne 	_EXNoBreak
.a1fb	20 b2 a2	jsr $a2b2			jsr 	ExternCheckBreak
.a1fe					_EXNoBreak:
.a1fe	e0 fe		cpx #$fe			cpx		#254 						; stack underflow
.a200	f0 58		beq $a25a			beq 	_ELUnderflow
.a202	b1 00		lda ($00),y			lda 	(codePtr),y 				; get next character
.a204	30 07		bmi $a20d			bmi 	_ELNotToken
.a206	c8		iny				iny 								; skip the token
.a207	da		phx				phx 								; save X on the stack
.a208	0a		asl a				asl 	a 							; double the token, put into X
.a209	aa		tax				tax
.a20a	7c 02 a1	jmp ($a102,x)			jmp 	(DispatchHandler,x)
.a20d					_ELNotToken:
.a20d	c9 c0		cmp #$c0			cmp 	#$C0 						; is it 80-BF
.a20f	90 dc		bcc $a1ed			bcc 	ShortConstant 				; yes, it's a short constant
.a211	c9 e0		cmp #$e0			cmp 	#$E0 						; is it E0-FF - i.e. it is one letter variable.
.a213	90 1e		bcc $a233			bcc 	_ELNotFastVariable
.a215	c8		iny				iny 								; get the next token.
.a216	b1 00		lda ($00),y			lda 	(codePtr),y
.a218	88		dey				dey
.a219	c9 23		cmp #$23			cmp 	#KWD_LSQPAREN 				; if not [ then it is a simple variable
.a21b	f0 16		beq $a233			beq 	_ELNotFastVariable 			; which we can optimise.
.a21d	5a		phy				phy 								; save Y
.a21e	b1 00		lda ($00),y			lda 	(codePtr),y 				; variable E0-FF
.a220	0a		asl a				asl 	a 							; it is now C0-FE, steps of 2.
.a221	a8		tay				tay 								; access via Y
.a222	e8		inx				inx 								; make space on the stack.
.a223	b9 40 0e	lda $0e40,y			lda 	FastVariables-$C0,y 		; copy the fast variable
.a226	9d 00 06	sta $0600,x			sta 	lowStack,x
.a229	b9 41 0e	lda $0e41,y			lda 	FastVariables-$C0+1,y
.a22c	9d 00 07	sta $0700,x			sta 	highStack,x
.a22f	7a		ply				ply 								; restore code pointer
.a230	c8		iny				iny 								; skip variable.
.a231	80 c4		bra $a1f7			bra 	ExecuteLoop
.a233					_ELNotFastVariable:
.a233	18		clc				clc									; do not autocreate if not found.
.a234	20 3d a5	jsr $a53d			jsr 	VariableFind				; find the variable.
.a237	90 14		bcc $a24d			bcc 	_ELUnknown
.a239	20 93 a3	jsr $a393			jsr 	IndexCheck
.a23c	5a		phy				phy 								; copy to stack
.a23d	e8		inx				inx
.a23e	b2 02		lda ($02)			lda 	(zTemp0)
.a240	9d 00 06	sta $0600,x			sta 	lowStack,x
.a243	a0 01		ldy #$01			ldy 	#1
.a245	b1 02		lda ($02),y			lda 	(zTemp0),y
.a247	9d 00 07	sta $0700,x			sta 	highStack,x
.a24a	7a		ply				ply
.a24b	80 aa		bra $a1f7			bra 	ExecuteLoop
.a24d					_ELUnknown:
>a24d	ff						.byte 	$FF
.a24e	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a251	55 4e 4b 4e 4f 57 4e 3f				.text 	"UNKNOWN?",0
>a259	00
.a25a					_ELUnderflow:
.a25a	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a25d	53 54 41 43 4b 3f 00				.text 	"STACK?",0
.a264					ExecuteNextLine:
.a264					ExecuteComment:
.a264	fa		plx				plx
.a265	18		clc				clc 								; skip forward
.a266	b2 00		lda ($00)			lda 	(codePtr)
.a268	18		clc				clc
.a269	65 00		adc $00				adc 	codePtr
.a26b	85 00		sta $00				sta 	codePtr
.a26d	90 02		bcc $a271			bcc 	_ENLNoCarry
.a26f	e6 01		inc $01				inc 	codePtr+1
.a271					_ENLNoCarry:
.a271	a0 03		ldy #$03			ldy 	#3 							; start of next line
.a273	b2 00		lda ($00)			lda 	(codePtr) 					; check offset non zero
.a275	d0 80		bne $a1f7			bne 	ExecuteLoop
.a277	4c 15 ab	jmp $ab15			jmp	 	Command_End 				; if zero end program.
.a27a					LongConstant:
.a27a	fa		plx				plx
.a27b	e8		inx				inx 								; space for constant
.a27c	b1 00		lda ($00),y			lda 	(codePtr),y 				; copy it in.
.a27e	9d 00 06	sta $0600,x			sta 	lowStack,x
.a281	c8		iny				iny
.a282	b1 00		lda ($00),y			lda 	(codePtr),y
.a284	9d 00 07	sta $0700,x			sta 	highStack,x
.a287	c8		iny				iny
.a288	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.a28b					StringConstant:
.a28b	fa		plx				plx
.a28c	e8		inx				inx
.a28d	18		clc				clc 								; copy Y + codePtr in.
.a28e	98		tya				tya
.a28f	65 00		adc $00				adc 	codePtr
.a291	9d 00 06	sta $0600,x			sta 	lowStack,x
.a294	a5 01		lda $01				lda 	codePtr+1
.a296	69 00		adc #$00			adc 	#0
.a298	9d 00 07	sta $0700,x			sta 	highStack,x
.a29b	98		tya				tya 								; add 1 + length to Y
.a29c	38		sec				sec
.a29d	71 00		adc ($00),y			adc 	(codePtr),y
.a29f	a8		tay				tay
.a2a0	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: core/extern.asm

.a2a3					ExternInitialise:
.a2a3	a9 07		lda #$07			lda 	#$07 						; set colour
.a2a5	8d 86 02	sta $0286			sta 	646
.a2a8	a9 93		lda #$93			lda 	#147 						; clear screen
.a2aa	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a2ad	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a2af	4c d0 a2	jmp $a2d0			jmp 	ExternColour
.a2b2					ExternCheckBreak:
.a2b2	da		phx				phx 								; make sure we keep XY
.a2b3	5a		phy				phy
.a2b4	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a2b7	f0 03		beq $a2bc			beq		_ECBExit 					; stopped
.a2b9	7a		ply				ply 								; restore and exit.
.a2ba	fa		plx				plx
.a2bb	60		rts				rts
.a2bc					_ECBExit:
.a2bc	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a2bf	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.a2c6					ExternPrint:
.a2c6	48		pha				pha
.a2c7	da		phx				phx
.a2c8	5a		phy				phy
.a2c9	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a2cc	7a		ply				ply
.a2cd	fa		plx				plx
.a2ce	68		pla				pla
.a2cf	60		rts				rts
.a2d0					ExternColour:
.a2d0	48		pha				pha
.a2d1	da		phx				phx
.a2d2	48		pha				pha
.a2d3	29 08		and #$08			and 	#8
.a2d5	0a		asl a				asl 	a
.a2d6	0a		asl a				asl 	a
.a2d7	0a		asl a				asl 	a
.a2d8	0a		asl a				asl 	a
.a2d9	49 92		eor #$92			eor 	#$92
.a2db	20 c6 a2	jsr $a2c6			jsr 	ExternPrint
.a2de	a9 0e		lda #$0e			lda 	#14							; lower case
.a2e0	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a2e3	68		pla				pla
.a2e4	29 07		and #$07			and 	#7
.a2e6	aa		tax				tax
.a2e7	bd f0 a2	lda $a2f0,x			lda 	_ECTable,x
.a2ea	20 c6 a2	jsr $a2c6			jsr 	ExternPrint
.a2ed	fa		plx				plx
.a2ee	68		pla				pla
.a2ef	60		rts				rts
.a2f0					_ECTable:
>a2f0	90						.byte 	144
>a2f1	1c						.byte 	28
>a2f2	1e						.byte 	30
>a2f3	9e						.byte 	158
>a2f4	1f						.byte 	31
>a2f5	9c						.byte 	156
>a2f6	9f						.byte 	159
>a2f7	05						.byte 	5
.a2f8					ExternInput:
.a2f8	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a2fa	85 02		sta $02				sta 	zTemp0
.a2fc	a9 08		lda #$08			lda 	#(InputBuffer >> 8)
.a2fe	85 03		sta $03				sta 	zTemp0+1
.a300	a9 07		lda #$07			lda 	#COL_WHITE
.a302	20 d0 a2	jsr $a2d0			jsr 	ExternColour
.a305	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a308	29 7f		and #$7f			and 	#$7F
.a30a	c9 0d		cmp #$0d			cmp 	#13
.a30c	f0 0a		beq $a318			beq 	_EIExit
.a30e	92 02		sta ($02)			sta 	(zTemp0)
.a310	e6 02		inc $02				inc 	zTemp0
.a312	d0 f1		bne $a305			bne 	_EIRead
.a314	e6 03		inc $03				inc 	zTemp0+1
.a316	80 ed		bra $a305			bra 	_EIRead
.a318	a9 00		lda #$00	_EIExit:lda 	#0
.a31a	92 02		sta ($02)			sta 	(zTemp0)
.a31c	a9 0d		lda #$0d			lda 	#13
.a31e	20 c6 a2	jsr $a2c6			jsr 	ExternPrint
.a321	60		rts				rts
.a322					ExternSave:
.a322	da		phx				phx
.a323	5a		phy				phy
.a324	85 06		sta $06				sta 	zTemp2 						; save start
.a326	84 07		sty $07				sty 	zTemp2+1
.a328	20 8a a3	jsr $a38a			jsr 	EXGetLength 				; get length of file into A
.a32b	a6 02		ldx $02				ldx 	zTemp0
.a32d	a4 03		ldy $03				ldy 	zTemp0+1
.a32f	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a332	a9 01		lda #$01			lda 	#1
.a334	a2 01		ldx #$01			ldx 	#1	 						; device #1
.a336	a0 00		ldy #$00			ldy 	#0
.a338	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a33b	a6 04		ldx $04				ldx 	zTemp1 						; end address
.a33d	a4 05		ldy $05				ldy 	zTemp1+1
.a33f	a9 06		lda #$06			lda 	#zTemp2
.a341	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.a344	b0 03		bcs $a349			bcs 	_ESSave
.a346	7a		ply				ply
.a347	fa		plx				plx
.a348	60		rts				rts
.a349					_ESSave:
.a349	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a34c	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>a354	4c 45 44 00
.a358					ExternLoad:
.a358	da		phx				phx 								; save XY
.a359	5a		phy				phy
.a35a	48		pha				pha 								; save target
.a35b	5a		phy				phy
.a35c	20 8a a3	jsr $a38a			jsr 	EXGetLength 				; get length of file into A
.a35f	a6 02		ldx $02				ldx 	zTemp0
.a361	a4 03		ldy $03				ldy 	zTemp0+1
.a363	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a366	a9 01		lda #$01			lda 	#1
.a368	a2 01		ldx #$01			ldx 	#1	 						; device #1
.a36a	a0 00		ldy #$00			ldy 	#0
.a36c	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a36f	7a		ply				ply 								; restore target to YX and call load
.a370	fa		plx				plx
.a371	a9 00		lda #$00			lda 	#0 							; load command
.a373	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.a376	b0 03		bcs $a37b			bcs 	_ESLoad
.a378	7a		ply				ply
.a379	fa		plx				plx
.a37a	60		rts				rts
.a37b					_ESLoad:
.a37b	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a37e	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>a386	4c 45 44 00
.a38a					EXGetLength:
.a38a	a0 ff		ldy #$ff			ldy 	#255
.a38c	c8		iny		_EXGL:	iny
.a38d	b1 02		lda ($02),y			lda 	(zTemp0),y
.a38f	d0 fb		bne $a38c			bne 	_EXGL
.a391	98		tya				tya
.a392	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/index.asm

.a393					IndexCheck:
.a393	b1 00		lda ($00),y			lda 	(codePtr),y 			; do we have a [
.a395	c9 23		cmp #$23			cmp 	#KWD_LSQPAREN
.a397	f0 01		beq $a39a			beq 	_ICFound
.a399	60		rts				rts
.a39a					_ICFound:
.a39a	c8		iny				iny 							; get next
.a39b	b1 00		lda ($00),y			lda 	(codePtr),y
.a39d	c9 24		cmp #$24			cmp 	#KWD_RSQPAREN 			; is it ], then stack value index.
.a39f	f0 2b		beq $a3cc			beq 	_ICStackIndex
.a3a1	38		sec				sec
.a3a2	e9 80		sbc #$80			sbc 	#$80 					; this will shift 00-3F into that range
.a3a4	c9 40		cmp #$40			cmp 	#$40
.a3a6	b0 1a		bcs $a3c2			bcs 	_ICError
.a3a8	0a		asl a				asl 	a 						; double index clear carry
.a3a9	5a		phy				phy 							; put into Y
.a3aa	72 02		adc ($02)			adc 	(zTemp0) 				; follow the vector adding the index
.a3ac	48		pha				pha
.a3ad	a0 01		ldy #$01			ldy 	#1
.a3af	b1 02		lda ($02),y			lda 	(zTemp0),y
.a3b1	69 00		adc #$00			adc 	#0
.a3b3	85 03		sta $03				sta 	zTemp0+1
.a3b5	68		pla				pla
.a3b6	85 02		sta $02				sta 	zTemp0
.a3b8	7a		ply				ply 							; restore position.
.a3b9	c8		iny				iny								; skip index
.a3ba	b1 00		lda ($00),y			lda 	(codePtr),y 			; get & skip next
.a3bc	c8		iny				iny
.a3bd	c9 24		cmp #$24			cmp 	#KWD_RSQPAREN 			; should be ]
.a3bf	d0 01		bne $a3c2			bne 	_ICError
.a3c1	60		rts				rts
.a3c2					_ICError:
.a3c2	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a3c5	49 4e 44 45 58 3f 00				.text 	"INDEX?",0
.a3cc					_ICStackIndex:
.a3cc	c8		iny				iny 							; skip the ]
.a3cd	bd 00 06	lda $0600,x			lda 	lowStack,x 				; get tos -> zTemp1 doubled
.a3d0	0a		asl a				asl 	a
.a3d1	85 04		sta $04				sta 	zTemp1
.a3d3	bd 00 07	lda $0700,x			lda 	highStack,x
.a3d6	2a		rol a				rol 	a
.a3d7	85 05		sta $05				sta 	zTemp1+1
.a3d9	ca		dex				dex 							; throw TOS.
.a3da	5a		phy				phy
.a3db	a0 01		ldy #$01			ldy 	#1 						; calculate new address
.a3dd	b2 02		lda ($02)			lda 	(zTemp0)
.a3df	65 04		adc $04				adc 	zTemp1
.a3e1	48		pha				pha
.a3e2	b1 02		lda ($02),y			lda 	(zTemp0),y
.a3e4	65 05		adc $05				adc 	zTemp1+1
.a3e6	85 03		sta $03				sta 	zTemp0+1
.a3e8	68		pla				pla
.a3e9	85 02		sta $02				sta 	zTemp0
.a3eb	7a		ply				ply 							; restore pos and exit.
.a3ec	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/reset.asm

.a3ed					ResetMemory:
.a3ed	a9 00		lda #$00			lda 	#(highMemory) & $FF
.a3ef	85 0d		sta $0d				sta 	allocPtr
.a3f1	a9 9f		lda #$9f			lda 	#(highMemory) >> 8
.a3f3	85 0e		sta $0e				sta 	allocPtr+1
.a3f5	a9 00		lda #$00			lda 	#(ProgramStart) & $FF
.a3f7	85 0f		sta $0f				sta 	memVarPtr
.a3f9	a9 10		lda #$10			lda 	#(ProgramStart) >> 8
.a3fb	85 10		sta $10				sta 	memVarPtr+1
.a3fd					_RMFindEnd:
.a3fd	b2 0f		lda ($0f)			lda 	(memVarPtr)					; offset 0, found end.
.a3ff	f0 0b		beq $a40c			beq 	_RMFoundEnd 				; advance to next.
.a401	18		clc				clc
.a402	65 0f		adc $0f				adc 	memVarPtr
.a404	85 0f		sta $0f				sta 	memVarPtr
.a406	90 f5		bcc $a3fd			bcc 	_RMFindEnd
.a408	e6 10		inc $10				inc 	memVarPtr+1
.a40a	80 f1		bra $a3fd			bra 	_RMFindEnd
.a40c					_RMFoundEnd:
.a40c	e6 0f		inc $0f				inc 	memVarPtr 					; advance past last offset $00
.a40e	d0 02		bne $a412			bne 	_RMNoCarry
.a410	e6 10		inc $10				inc 	memVarPtr+1
.a412					_RMNoCarry:
.a412	a2 1f		ldx #$1f			ldx 	#HashTableSize*2-1 			; bytes to erase
.a414					_RMEraseHash:
.a414	9e 40 0f	stz $0f40,x			stz 	VariableHashTable,x
.a417	ca		dex				dex
.a418	10 fa		bpl $a414			bpl 	_RMEraseHash
.a41a	a9 00		lda #$00			lda 	#(ProgramStart) & $FF
.a41c	85 00		sta $00				sta 	codePtr
.a41e	a9 10		lda #$10			lda 	#(ProgramStart) >> 8
.a420	85 01		sta $01				sta 	codePtr+1
.a422	a0 03		ldy #$03			ldy 	#3
.a424	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/stack.asm

.a425					StackReset:
.a425	a9 ff		lda #$ff			lda 	#IntStack & $FF 			; reset SP
.a427	85 0a		sta $0a				sta 	iStack
.a429	a9 09		lda #$09			lda 	#IntStack >> 8
.a42b	85 0b		sta $0b				sta 	iStack+1
.a42d	a9 ff		lda #$ff			lda 	#$FF						; dummy TOS value
.a42f	92 0a		sta ($0a)			sta 	(iStack)
.a431	60		rts				rts
.a432					StackPushByte:
.a432	c6 0a		dec $0a				dec 	iStack
.a434	92 0a		sta ($0a)			sta 	(iStack)
.a436	f0 01		beq $a439			beq 	_SPBUnderflow
.a438	60		rts				rts
.a439					_SPBUnderflow:
.a439	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a43c	53 54 41 43 4b 00				.text 	"STACK",0
.a442					StackPushPosition:
.a442	98		tya				tya
.a443	20 32 a4	jsr $a432			jsr 	StackPushByte
.a446	a5 01		lda $01				lda 	codePtr+1
.a448	20 32 a4	jsr $a432			jsr 	StackPushByte
.a44b	a5 00		lda $00				lda 	codePtr
.a44d	20 32 a4	jsr $a432			jsr 	StackPushByte
.a450	60		rts				rts
.a451					StackCheckTop:
.a451	d2 0a		cmp ($0a)			cmp 	(iStack)
.a453	f0 02		beq $a457			beq 	_SCTOk
.a455	18		clc				clc
.a456	60		rts				rts
.a457	38		sec		_SCTOk:	sec
.a458	60		rts				rts
.a459					StackPop:
.a459	18		clc				clc
.a45a	65 0a		adc $0a				adc 	iStack
.a45c	85 0a		sta $0a				sta 	iStack
.a45e	60		rts				rts
.a45f					StackRestorePosition:
.a45f	b1 0a		lda ($0a),y			lda 	(iStack),y
.a461	85 00		sta $00				sta 	codePtr
.a463	c8		iny				iny
.a464	b1 0a		lda ($0a),y			lda 	(iStack),y
.a466	85 01		sta $01				sta 	codePtr+1
.a468	c8		iny				iny
.a469	b1 0a		lda ($0a),y			lda 	(iStack),y
.a46b	a8		tay				tay
.a46c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/tointeger.asm

.a46d					StringToInt:
.a46d	86 08		stx $08				stx 	zTemp3 						; save string
.a46f	84 09		sty $09				sty 	zTemp3+1
.a471	64 0c		stz $0c				stz 	signCount 					; signcount is the number of chars copied.
.a473	a2 10		ldx #$10			ldx 	#16 						; base to use.
.a475	a0 01		ldy #$01			ldy 	#1 							; character offset.
.a477	b2 08		lda ($08)			lda 	(zTemp3) 					; first character
.a479	c9 24		cmp #$24			cmp 	#"$"						; is it hexadecimal
.a47b	f0 03		beq $a480			beq 	_STIConvert 				; convert from character 1, base 16.
.a47d	88		dey				dey 								; from character 0
.a47e	a2 0a		ldx #$0a			ldx 	#10 						; base 10.
.a480					_STIConvert:
.a480	86 04		stx $04				stx 	zTemp1 						; save base in zTemp1
.a482	b1 08		lda ($08),y			lda 	(zTemp3),y 					; get first character
.a484	f0 5f		beq $a4e5			beq 	_STIFail 					; if zero, then it has failed anyway.
.a486	64 02		stz $02				stz 	zTemp0 						; clear the result.
.a488	64 03		stz $03				stz 	zTemp0+1
.a48a					_STILoop:
.a48a	b1 08		lda ($08),y			lda 	(zTemp3),y 					; check in range 0-9 A-F
.a48c	c9 30		cmp #$30			cmp 	#"0"
.a48e	90 55		bcc $a4e5			bcc 	_STIFail
.a490	c9 3a		cmp #$3a			cmp 	#"9"+1
.a492	90 08		bcc $a49c			bcc 	_STIOkay
.a494	c9 41		cmp #$41			cmp 	#"A"
.a496	90 4d		bcc $a4e5			bcc 	_STIFail
.a498	c9 47		cmp #$47			cmp 	#"F"+1
.a49a	b0 49		bcs $a4e5			bcs 	_STIFail
.a49c					_STIOkay:
.a49c	a5 02		lda $02				lda 	zTemp0 						; copy current to zTemp2
.a49e	85 06		sta $06				sta 	zTemp2
.a4a0	a5 03		lda $03				lda 	zTemp0+1
.a4a2	85 07		sta $07				sta 	zTemp2+1
.a4a4	64 02		stz $02				stz 	zTemp0 						; clear result
.a4a6	64 03		stz $03				stz 	zTemp0+1
.a4a8	a6 04		ldx $04				ldx 	zTemp1 						; X contains the base.
.a4aa					_STIMultiply:
.a4aa	8a		txa				txa 								; shift Y right into carry.
.a4ab	4a		lsr a				lsr 	a
.a4ac	aa		tax				tax
.a4ad	90 0d		bcc $a4bc			bcc 	_STINoAdd 					; skip if CC, e.g. LSB was zero
.a4af	18		clc				clc
.a4b0	a5 06		lda $06				lda 	zTemp2 						; add zTemp2 into zTemp0
.a4b2	65 02		adc $02				adc 	zTemp0
.a4b4	85 02		sta $02				sta 	zTemp0
.a4b6	a5 07		lda $07				lda 	zTemp2+1
.a4b8	65 03		adc $03				adc 	zTemp0+1
.a4ba	85 03		sta $03				sta 	zTemp0+1
.a4bc					_STINoAdd:
.a4bc	06 06		asl $06				asl 	zTemp2 						; shift zTemp2 left e.g. x 2
.a4be	26 07		rol $07				rol 	zTemp2+1
.a4c0	e0 00		cpx #$00			cpx 	#0 							; multiply finished ?
.a4c2	d0 e6		bne $a4aa			bne 	_STIMultiply
.a4c4	38		sec				sec 								; hex adjust
.a4c5	b1 08		lda ($08),y			lda 	(zTemp3),y 					; get digit.
.a4c7	c9 3a		cmp #$3a			cmp 	#58
.a4c9	90 03		bcc $a4ce			bcc 	_STIDecimal
.a4cb	38		sec				sec
.a4cc	e9 07		sbc #$07			sbc 	#7
.a4ce					_STIDecimal:
.a4ce	38		sec				sec
.a4cf	e9 30		sbc #$30			sbc 	#48
.a4d1	c5 04		cmp $04				cmp 	zTemp1  					; if >= base then fail.
.a4d3	b0 10		bcs $a4e5			bcs 	_STIFail
.a4d5	d8		cld				cld
.a4d6	65 02		adc $02				adc 	zTemp0 						; add into the current value
.a4d8	85 02		sta $02				sta 	zTemp0
.a4da	90 02		bcc $a4de			bcc 	_STINoCarry
.a4dc	e6 03		inc $03				inc 	zTemp0+1
.a4de					_STINoCarry:
.a4de	b1 08		lda ($08),y			lda 	(zTemp3),y					; get character just done.
.a4e0	c8		iny				iny 								; point to next
.a4e1	e6 0c		inc $0c				inc 	SignCount
.a4e3	80 a5		bra $a48a			bra 	_STILoop 					; and go round again.
.a4e5					_STIFail:
.a4e5	a5 0c		lda $0c				lda 	SignCount 					; if converted 0 charactes, fail.
.a4e7	f0 07		beq $a4f0			beq 	_STINoConvert
.a4e9	98		tya				tya 								; convert count in A.
.a4ea	a6 02		ldx $02				ldx 	zTemp0 						; return result
.a4ec	a4 03		ldy $03				ldy 	zTemp0+1
.a4ee	38		sec				sec
.a4ef	60		rts				rts
.a4f0					_STINoConvert:
.a4f0	18		clc				clc
.a4f1	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: core/tostring.asm

.a4f2					IntToString:
.a4f2	86 02		stx $02				stx 	zTemp0 						; count is in zTemp0
.a4f4	84 03		sty $03				sty 	zTemp0+1
.a4f6	a0 00		ldy #$00			ldy 	#0 							; index into token buffer (out)
.a4f8	a2 00		ldx #$00			ldx 	#0 							; index into the word table
.a4fa					_ITSLoop:
.a4fa	64 04		stz $04				stz 	zTemp1 						; this is the count of subtracts.
.a4fc					_ITSSubtractLoop:
.a4fc	38		sec				sec
.a4fd	a5 02		lda $02				lda 	zTemp0 						; try to calculate
.a4ff	fd 35 a5	sbc $a535,x			sbc 	_ITSWords,x
.a502	48		pha				pha
.a503	a5 03		lda $03				lda 	zTemp0+1
.a505	fd 36 a5	sbc $a536,x			sbc 	_ITSWords+1,x
.a508	90 09		bcc $a513			bcc 	_ITSEndSub 					; can't subtract any more.
.a50a	85 03		sta $03				sta 	zTemp0+1 					; update zTemp
.a50c	68		pla				pla
.a50d	85 02		sta $02				sta 	zTemp0
.a50f	e6 04		inc $04				inc 	zTemp1 						; bump subtract count.
.a511	80 e9		bra $a4fc			bra 	_ITSSubtractLoop
.a513					_ITSEndSub:
.a513	68		pla				pla 								; throw away the interim result
.a514	a5 04		lda $04				lda 	zTemp1 						; if the subtract count is non zero
.a516	d0 04		bne $a51c			bne 	_ITSWriteOut 				; always write it out
.a518	c0 00		cpy #$00			cpy 	#0 							; don't write if this is the first
.a51a	f0 06		beq $a522			beq 	_ITSNext 					; suppressing leading zeros.
.a51c					_ITSWriteOut:
.a51c	09 30		ora #$30			ora 	#48 						; output digit.
.a51e	99 e0 08	sta $08e0,y			sta 	ConvertBuffer,y
.a521	c8		iny				iny
.a522					_ITSNext:
.a522	e8		inx				inx
.a523	e8		inx				inx
.a524	e0 08		cpx #$08			cpx 	#_ITSWordsEnd-_ITSWords 	; done all subtractors
.a526	d0 d2		bne $a4fa			bne 	_ITSLoop 					; do the new digits
.a528	a5 02		lda $02				lda 	zTemp0 						; output the last digit
.a52a	09 30		ora #$30			ora 	#48
.a52c	99 e0 08	sta $08e0,y			sta 	ConvertBuffer,y 				; make it ASCIIZ.
.a52f	a9 00		lda #$00			lda 	#0
.a531	99 e1 08	sta $08e1,y			sta 	ConvertBuffer+1,y
.a534	60		rts				rts
.a535					_ITSWords:
>a535	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10
.a53d					_ITSWordsEnd:

;******  Return to file: main.asm


;******  Processing file: core/variables.asm

.a53d					VariableFind:
.a53d	da		phx				phx 								; save the stack position
.a53e	08		php				php 								; save the create flag
.a53f	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the first identifier character
.a541	c9 e0		cmp #$e0			cmp 	#$E0						; if it is E0-FF the first is the last
.a543	90 10		bcc $a555			bcc		_VFIsNotFastVariable 		; so it is a fast variable.
.a545	29 1f		and #$1f			and 	#$1F 						; make it an offset
.a547	0a		asl a				asl 	a 							; double clear carry
.a548	69 00		adc #$00			adc 	#FastVariables & $FF 		; put the final address in zTemp0
.a54a	85 02		sta $02				sta 	zTemp0
.a54c	a9 0f		lda #$0f			lda		#FastVariables >>8
.a54e	85 03		sta $03				sta 	zTemp0+1
.a550	28		plp				plp 								; create flag is irrelevant.
.a551	fa		plx				plx									; restore the old stack position
.a552	c8		iny				iny 								; skip over the single identifier character
.a553	38		sec				sec 								; return with CS
.a554	60		rts				rts
.a555					_VFIsNotFastVariable:
.a555	20 27 a6	jsr $a627			jsr 	VFSetupHashPointer 			; set up the hash pointer
.a558	20 82 a5	jsr $a582			jsr 	VFSearch 					; try to find the variable.
.a55b	b0 0d		bcs $a56a			bcs 	_VFEndSearch 				; found it, so exit
.a55d	28		plp				plp 								; do we want autocreate
.a55e	b0 03		bcs $a563			bcs 	_VFCreate
.a560	fa		plx				plx 								; restore stack position and return CC
.a561	18		clc				clc
.a562	60		rts				rts
.a563					_VFCreate:
.a563	20 27 a6	jsr $a627			jsr 	VFSetupHashPointer 			; reset the hash pointer
.a566	20 be a5	jsr $a5be			jsr 	VFCreate 					; create a new record and link it in.
.a569	08		php				php 								; save a dummy P to be popped.
.a56a					_VFEndSearch:
.a56a	18		clc				clc 								; the data is at offset + 4
.a56b	a5 04		lda $04				lda 	zTemp1
.a56d	69 04		adc #$04			adc 	#4
.a56f	85 02		sta $02				sta 	zTemp0
.a571	a5 05		lda $05				lda 	zTemp1+1
.a573	69 00		adc #$00			adc 	#0
.a575	85 03		sta $03				sta 	zTemp0+1
.a577	28		plp				plp 								; dump the create flag
.a578					_VFSkipExit:
.a578	b1 00		lda ($00),y			lda 	(codePtr),y 				; keep read and skip until end-identifier.
.a57a	c8		iny				iny
.a57b	c9 e0		cmp #$e0			cmp 	#$E0
.a57d	90 f9		bcc $a578			bcc 	_VFSkipExit
.a57f	fa		plx				plx 								; restore X
.a580	38		sec				sec
.a581	60		rts				rts
.a582					VFSearch:
.a582	48		pha				pha 								; save AXY.
.a583	da		phx				phx
.a584	5a		phy				phy
.a585	98		tya				tya									; add Y to codePtr, put in zTemp2
.a586	18		clc				clc 								; so it points to the identifier.
.a587	65 00		adc $00				adc 	codePtr
.a589	85 06		sta $06				sta 	zTemp2
.a58b	a5 01		lda $01				lda 	codePtr+1
.a58d	69 00		adc #$00			adc 	#0
.a58f	85 07		sta $07				sta 	zTemp2+1
.a591					_VFSLoop:
.a591	a0 01		ldy #$01			ldy 	#1 							; get MSB of next.
.a593	b1 04		lda ($04),y			lda 	(zTemp1),y 					; if this is zero, then end link (0)
.a595	f0 22		beq $a5b9			beq 	_VFSFailed 					; failed.
.a597	aa		tax				tax 								; MSB in X
.a598	b2 04		lda ($04)			lda 	(zTemp1) 					; LSB in A
.a59a	85 04		sta $04				sta 	zTemp1 						; and update to the next record.
.a59c	86 05		stx $05				stx 	zTemp1+1
.a59e	a0 02		ldy #$02			ldy 	#2 							; put the name pointer in zTemp3
.a5a0	b1 04		lda ($04),y			lda 	(zTemp1),y
.a5a2	85 08		sta $08				sta 	zTemp3
.a5a4	c8		iny				iny
.a5a5	b1 04		lda ($04),y			lda 	(zTemp1),y
.a5a7	85 09		sta $09				sta 	zTemp3+1
.a5a9	a0 ff		ldy #$ff			ldy 	#255 						; now compare the identifiers.
.a5ab					_VFSCheckName:
.a5ab	c8		iny				iny
.a5ac	b1 06		lda ($06),y			lda 	(zTemp2),y 					; if different, try next
.a5ae	d1 08		cmp ($08),y			cmp 	(zTemp3),y
.a5b0	d0 df		bne $a591			bne 	_VFSLoop
.a5b2	c9 e0		cmp #$e0			cmp 	#$E0 						; is it the ending identifier token
.a5b4	90 f5		bcc $a5ab			bcc 	_VFSCheckName
.a5b6	38		sec				sec 								; return with Carry set, and zTemp1 set up
.a5b7	80 01		bra $a5ba			bra		_VFSExit
.a5b9					_VFSFailed:
.a5b9	18		clc				clc
.a5ba					_VFSExit:
.a5ba	7a		ply				ply 								; restore registers and exit.
.a5bb	fa		plx				plx
.a5bc	68		pla				pla
.a5bd	60		rts				rts
.a5be					VFCreate:
.a5be	48		pha				pha 								; save registers
.a5bf	da		phx				phx
.a5c0	5a		phy				phy
.a5c1	18		clc				clc 								; add 6 to memVarPtr, saving its
.a5c2	a5 0f		lda $0f				lda 	memVarPtr 					; address in zTemp0 as we go.
.a5c4	85 02		sta $02				sta 	zTemp0
.a5c6	69 06		adc #$06			adc 	#6
.a5c8	85 0f		sta $0f				sta 	memVarPtr
.a5ca	a5 10		lda $10				lda 	memVarPtr+1
.a5cc	85 03		sta $03				sta 	zTemp0+1
.a5ce	69 00		adc #$00			adc 	#0
.a5d0	85 10		sta $10				sta 	memVarPtr+1
.a5d2	c5 0e		cmp $0e				cmp 	allocPtr+1 					; out of memory ?
.a5d4	f0 46		beq $a61c			beq 	_VFCMemory
.a5d6	98		tya				tya 								; work out identifier address
.a5d7	18		clc				clc
.a5d8	65 00		adc $00				adc 	codePtr
.a5da	48		pha				pha
.a5db	c8		iny				iny
.a5dc	a5 01		lda $01				lda 	codePtr+1
.a5de	69 00		adc #$00			adc 	#0
.a5e0	c9 10		cmp #$10			cmp 	#ProgramStart >> 8 			; it must be >= program start
.a5e2	b0 0b		bcs $a5ef			bcs 	_VFCInProgram 				; otherwise variable created from command line.
.a5e4	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a5e7	43 52 45 41 54 45 3f 00				.text 	"CREATE?",0
.a5ef					_VFCInProgram:
.a5ef	a0 03		ldy #$03			ldy 	#3 							; store in new record
.a5f1	91 02		sta ($02),y			sta 	(zTemp0),y
.a5f3	88		dey				dey
.a5f4	68		pla				pla
.a5f5	91 02		sta ($02),y			sta 	(zTemp0),y
.a5f7	a0 04		ldy #$04			ldy 	#4 							; clear new data
.a5f9	a9 00		lda #$00			lda 	#0
.a5fb	91 02		sta ($02),y			sta 	(zTemp0),y
.a5fd	c8		iny				iny
.a5fe	91 02		sta ($02),y			sta 	(zTemp0),y
.a600	a0 01		ldy #$01			ldy 	#1 							; copy old first link to this link
.a602	b2 04		lda ($04)			lda 	(zTemp1)
.a604	92 02		sta ($02)			sta 	(zTemp0)
.a606	b1 04		lda ($04),y			lda 	(zTemp1),y
.a608	91 02		sta ($02),y			sta 	(zTemp0),y
.a60a	a5 02		lda $02				lda 	zTemp0 						; put the new record at the front of the
.a60c	92 04		sta ($04)			sta 	(zTemp1) 					; list.
.a60e	a5 03		lda $03				lda 	zTemp0+1
.a610	91 04		sta ($04),y			sta 	(zTemp1),y
.a612	85 05		sta $05				sta 	zTemp1+1 					; copy into zTemp1
.a614	a5 02		lda $02				lda 	zTemp0
.a616	85 04		sta $04				sta 	zTemp1
.a618	7a		ply				ply
.a619	fa		plx				plx
.a61a	68		pla				pla
.a61b	60		rts				rts
.a61c					_VFCMemory:
.a61c	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a61f	4d 45 4d 4f 52 59 3f 00				.text 	"MEMORY?",0
.a627					VFSetupHashPointer:
.a627	48		pha				pha
.a628	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first character
.a62a	29 0f		and #$0f			and 	#(HashTableSize-1) 			; make it in range 0..hash-1
.a62c	0a		asl a				asl 	a 							; double it, also clears carry
.a62d	69 40		adc #$40			adc 	#VariableHashTable & $FF 	; add to the base and store in zTemp1
.a62f	85 04		sta $04				sta 	zTemp1
.a631	a9 0f		lda #$0f			lda 	#VariableHashTable >> 8
.a633	85 05		sta $05				sta 	zTemp1+1
.a635	68		pla				pla
.a636	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: tokenise/tokeniser.asm

.a637					TokeniseInputBuffer:
.a637	48		pha				pha
.a638	da		phx				phx
.a639	5a		phy				phy
.a63a	64 15		stz $15				stz 	TokenOffset					; reset index into TokenBuffer
.a63c	9c 00 0a	stz $0a00			stz 	TokenBuffer 				; empty that buffer
.a63f	a2 ff		ldx #$ff			ldx 	#255 						; find the end.
.a641					_TIBForward:
.a641	e8		inx				inx
.a642	bd 00 08	lda $0800,x			lda 	InputBuffer,x
.a645	d0 fa		bne $a641			bne 	_TIBForward
.a647					_TIBBackward:
.a647	ca		dex				dex 								; back one.
.a648	e0 ff		cpx #$ff			cpx 	#255 						; gone too far.
.a64a	f0 48		beq $a694			beq 	_TIBExit					; return empty buffer
.a64c	bd 00 08	lda $0800,x			lda 	InputBuffer,x
.a64f	c9 20		cmp #$20			cmp 	#" "
.a651	f0 f4		beq $a647			beq 	_TIBBackward
.a653	9e 01 08	stz $0801,x			stz 	InputBuffer+1,x 			; truncate at last non space.
.a656	a2 00		ldx #$00			ldx		#0 							; start of the input bufferr.
.a658					_TIBMainLoop:
.a658	bd 00 08	lda $0800,x			lda 	InputBuffer,x 				; next character
.a65b	f0 37		beq $a694			beq 	_TIBExit 					; done the buffer if zero.
.a65d	e8		inx				inx
.a65e	c9 20		cmp #$20			cmp 	#" " 						; skip over spaces
.a660	f0 f6		beq $a658			beq 	_TIBMainLoop
.a662	ca		dex				dex 								; undo the last inx.
.a663	c9 24		cmp #$24			cmp 	#"$"						; is it $ ?
.a665	f0 08		beq $a66f			beq 	_TIBConstant
.a667	c9 30		cmp #$30			cmp 	#"0"						; check 0-9
.a669	90 09		bcc $a674			bcc 	_TIBNotConstant
.a66b	c9 3a		cmp #$3a			cmp 	#"9"+1
.a66d	b0 05		bcs $a674			bcs 	_TIBNotConstant
.a66f					_TIBConstant:
.a66f	20 c9 a6	jsr $a6c9			jsr 	TOKConvertConstant
.a672	80 e4		bra $a658			bra 	_TIBMainLoop
.a674					_TIBNotConstant:
.a674	c9 3a		cmp #$3a			cmp 	#":"						; definition
.a676	d0 05		bne $a67d			bne 	_TIBNotDefinition
.a678	20 1b a7	jsr $a71b			jsr 	TOKConvertDefinition
.a67b	80 db		bra $a658			bra 	_TIBMainLoop
.a67d					_TIBNotDefinition:
.a67d	c9 27		cmp #$27			cmp 	#"'"
.a67f	f0 04		beq $a685			beq 	_TIBIsCommentString
.a681	c9 22		cmp #$22			cmp 	#'"'
.a683	d0 05		bne $a68a			bne 	_TIBNotCommentString
.a685					_TIBIsCommentString:
.a685	20 43 a7	jsr $a743			jsr 	TOKConvertCommentString
.a688	80 ce		bra $a658			bra 	_TIBMainLoop
.a68a					_TIBNotCommentString:
.a68a	20 8a a7	jsr $a78a			jsr 	TOKCheckIsToken 			; check if a token.
.a68d	b0 c9		bcs $a658			bcs 	_TIBMainLoop
.a68f	20 1c a7	jsr $a71c			jsr 	TOKConvertIdentifierOnly
.a692	80 c4		bra $a658			bra 	_TIBMainLoop
.a694					_TIBExit:
.a694	7a		ply				ply
.a695	fa		plx				plx
.a696	68		pla				pla
.a697	60		rts				rts
.a698					TOKWriteToken:
.a698	da		phx				phx
.a699	a6 15		ldx $15				ldx 	TokenOffset
.a69b	9d 00 0a	sta $0a00,x			sta 	TokenBuffer,x
.a69e	9e 01 0a	stz $0a01,x			stz 	TokenBuffer+1,x
.a6a1	e6 15		inc $15				inc 	TokenOffset
.a6a3	fa		plx				plx
.a6a4	60		rts				rts
.a6a5					TOKFixUpLast:
.a6a5	da		phx				phx
.a6a6	a6 15		ldx $15				ldx 	TokenOffset
.a6a8	bd ff 09	lda $09ff,x			lda 	TokenBuffer-1,x
.a6ab	09 e0		ora #$e0			ora 	#$E0
.a6ad	9d ff 09	sta $09ff,x			sta 	TokenBuffer-1,x
.a6b0	fa		plx				plx
.a6b1	60		rts				rts
.a6b2					TOKConvertIdentifier:
.a6b2	c9 2e		cmp #$2e			cmp 	#"."						; dot is special case.
.a6b4	f0 0f		beq $a6c5			beq 	_TKCIDot
.a6b6	38		sec				sec 								; A-Z -> 1-27
.a6b7	e9 40		sbc #$40			sbc 	#64
.a6b9	f0 08		beq $a6c3			beq 	_TKCIFail
.a6bb	c9 1b		cmp #$1b			cmp 	#27
.a6bd	b0 04		bcs $a6c3			bcs 	_TKCIFail
.a6bf	09 c0		ora #$c0			ora 	#$C0 						; fix up
.a6c1	38		sec				sec
.a6c2	60		rts				rts
.a6c3					_TKCIFail:
.a6c3	18		clc				clc
.a6c4	60		rts				rts
.a6c5					_TKCIDot:
.a6c5	a9 db		lda #$db			lda 	#$C0+27
.a6c7	38		sec				sec
.a6c8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: tokenise/tok_const.asm

.a6c9					TOKConvertConstant:
.a6c9	a0 08		ldy #$08			ldy 	#InputBuffer >> 8 			; the buffer must be on a $00 page.
.a6cb	da		phx				phx 								; save X position
.a6cc	20 6d a4	jsr $a46d			jsr 	StringToInt 				; try to convert
.a6cf	90 40		bcc $a711			bcc 	_TKCCError
.a6d1	84 03		sty $03				sty 	zTemp0+1 					; save result in zTemp0
.a6d3	86 02		stx $02				stx 	zTemp0
.a6d5	85 04		sta $04				sta 	zTemp1 						; save count
.a6d7	68		pla				pla 								; restore X position, add the count
.a6d8	18		clc				clc
.a6d9	65 04		adc $04				adc 	zTemp1
.a6db	aa		tax				tax
.a6dc	bd 00 08	lda $0800,x			lda 	InputBuffer,x 				; followed by - ?
.a6df	c9 2d		cmp #$2d			cmp 	#"-"
.a6e1	d0 0e		bne $a6f1			bne 	_TKCCNotNegative
.a6e3	e8		inx				inx 								; consume the -
.a6e4	38		sec				sec
.a6e5	a9 00		lda #$00			lda 	#0 							; negate the constant.
.a6e7	e5 02		sbc $02				sbc 	zTemp0
.a6e9	85 02		sta $02				sta 	zTemp0
.a6eb	a9 00		lda #$00			lda 	#0
.a6ed	e5 03		sbc $03				sbc 	zTemp0+1
.a6ef	85 03		sta $03				sta 	zTemp0+1
.a6f1					_TKCCNotNegative:
.a6f1	a5 03		lda $03				lda 	zTemp0+1 					; check short/long const ?
.a6f3	d0 0c		bne $a701			bne 	_TKCCLongConstant
.a6f5	a5 02		lda $02				lda 	zTemp0
.a6f7	c9 40		cmp #$40			cmp 	#$40
.a6f9	b0 06		bcs $a701			bcs 	_TKCCLongConstant
.a6fb	09 80		ora #$80			ora 	#$80 						; write the short token out with bit 7 set
.a6fd	20 98 a6	jsr $a698			jsr 	TOKWriteToken
.a700	60		rts				rts
.a701					_TKCCLongConstant:
.a701	a9 01		lda #$01			lda 	#KWD_SYS_CONST 				; write out long constant
.a703	20 98 a6	jsr $a698			jsr 	TOKWriteToken
.a706	a5 02		lda $02				lda 	zTemp0
.a708	20 98 a6	jsr $a698			jsr 	TOKWriteToken
.a70b	a5 03		lda $03				lda 	zTemp0+1
.a70d	20 98 a6	jsr $a698			jsr 	TOKWriteToken
.a710	60		rts				rts
.a711					_TKCCError:
.a711	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a714	43 4f 4e 53 54 3f 00				.text 	"CONST?",0

;******  Return to file: main.asm


;******  Processing file: tokenise/tok_def.asm

.a71b					TOKConvertDefinition:
.a71b	e8		inx				inx 								; skip over :
.a71c					TOKConvertIdentifierOnly:
.a71c	bd 00 08	lda $0800,x			lda 	InputBuffer,x 				; get first and check there's at least one.
.a71f	20 b2 a6	jsr $a6b2			jsr 	TOKConvertIdentifier
.a722	90 10		bcc $a734			bcc 	_TKCDFail
.a724					_TKCDLoop:
.a724	20 98 a6	jsr $a698			jsr 	TOKWriteToken 				; write last one out
.a727	e8		inx				inx									; skip over it, get next and check
.a728	bd 00 08	lda $0800,x			lda 	InputBuffer,x
.a72b	20 b2 a6	jsr $a6b2			jsr 	TOKConvertIdentifier
.a72e	b0 f4		bcs $a724			bcs 	_TKCDLoop 					; keep going while identifier present.
.a730	20 a5 a6	jsr $a6a5			jsr 	TOKFixUpLast 				; set bit for last character.
.a733	60		rts				rts
.a734					_TKCDFail:
.a734	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a737	49 44 45 4e 54 49 46 49				.text 	"IDENTIFIER?",0
>a73f	45 52 3f 00

;******  Return to file: main.asm


;******  Processing file: tokenise/tok_cst.asm

.a743					TOKConvertCommentString:
.a743	c9 27		cmp #$27			cmp 	#"'"						; is it a comment
.a745	f0 06		beq $a74d			beq 	_TKCCSComment
.a747	a9 04		lda #$04			lda 	#KWD_SYS_QSTRING 			; token
.a749	a0 22		ldy #$22			ldy 	#'"'						; match character
.a74b	80 04		bra $a751			bra 	_TKCCSContinue
.a74d					_TKCCSComment:
.a74d	a9 03		lda #$03			lda 	#KWD_SYS_COMMENT 			; token
.a74f	a0 00		ldy #$00			ldy 	#0 							; match character
.a751					_TKCCSContinue:
.a751	20 98 a6	jsr $a698			jsr 	TOKWriteToken 				; write initial token
.a754	e8		inx				inx 								; skip over ' or "
.a755	84 02		sty $02				sty 	zTemp0 						; closing token to search for.
.a757	a0 00		ldy #$00			ldy 	#0 							; count of characters
.a759	da		phx				phx 								; save start position
.a75a					_TKCCSFindSize:
.a75a	bd 00 08	lda $0800,x			lda 	InputBuffer,x 				; found the end
.a75d	c5 02		cmp $02				cmp 	zTemp0
.a75f	f0 10		beq $a771			beq 	_TKCCSFoundEnd
.a761	e8		inx				inx 								; bump pos, count
.a762	c8		iny				iny
.a763	c9 00		cmp #$00			cmp 	#0 							; if end of line error - quote unmatched
.a765	d0 f3		bne $a75a			bne 	_TKCCSFindSize
.a767	20 92 a1	jsr $a192			jsr 	ErrorHandler
>a76a	51 55 4f 54 45 3f 00				.text 	"QUOTE?",0
.a771					_TKCCSFoundEnd:
.a771	98		tya				tya 								; length of element in Y
.a772	20 98 a6	jsr $a698			jsr 	TOKWriteToken
.a775	fa		plx				plx 								; restore start position and copy out
.a776					_TKCCSCopyOut:
.a776	c0 00		cpy #$00			cpy 	#0 							; complete ?
.a778	f0 0a		beq $a784			beq 	_TKCCSExit
.a77a	bd 00 08	lda $0800,x			lda 	InputBuffer,x
.a77d	20 98 a6	jsr $a698			jsr 	TOKWriteToken
.a780	e8		inx				inx
.a781	88		dey				dey
.a782	80 f2		bra $a776			bra 	_TKCCSCopyOut
.a784					_TKCCSExit:
.a784	a5 02		lda $02				lda 	zTemp0 						; if closing token was non-zero, it's a quote so skip it
.a786	f0 01		beq $a789			beq 	_TKCSSNotComment
.a788	e8		inx				inx
.a789					_TKCSSNotComment:
.a789	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: tokenise/tok_token.asm

.a78a					TOKCheckIsToken:
.a78a	a9 0c		lda #$0c			lda 	#(KeywordText) & $FF
.a78c	85 02		sta $02				sta 	zTemp0
.a78e	a9 a0		lda #$a0			lda 	#(KeywordText) >> 8
.a790	85 03		sta $03				sta 	zTemp0+1
.a792	64 04		stz $04				stz 	zTemp1 						; best match length
.a794	64 06		stz $06				stz 	zTemp2 						; current token.
.a796					_TCTLoop:
.a796	a0 01		ldy #$01			ldy 	#1 							; position to start comparing
.a798	da		phx				phx 								; save start
.a799					_TCTCompare:
.a799	b1 02		lda ($02),y			lda 	(zTemp0),y 					; compare the characters using EOR.
.a79b	5d 00 08	eor $0800,x			eor 	InputBuffer,x 				; because bit 7 of keyword table => end of word.
.a79e	e8		inx				inx 								; bump both pointers.
.a79f	c8		iny				iny
.a7a0	0a		asl a				asl 	a 							; A will now be 0 if the same. CS => end.
.a7a1	d0 0e		bne $a7b1			bne 	_TCTNext 					; different, go to next.
.a7a3	90 f4		bcc $a799			bcc 	_TCTCompare 				; still comparing.
.a7a5	b2 02		lda ($02)			lda 	(zTemp0) 					; get current length
.a7a7	c5 04		cmp $04				cmp 	zTemp1						; best so far
.a7a9	90 06		bcc $a7b1			bcc 	_TCTNext 					; if not, skip to next.
.a7ab	85 04		sta $04				sta 	zTemp1 						; new best score
.a7ad	a5 06		lda $06				lda 	zTemp2 						; copy current token to result
.a7af	85 07		sta $07				sta 	zTemp2+1
.a7b1					_TCTNext:
.a7b1	fa		plx				plx 								; restore start position.
.a7b2	e6 06		inc $06				inc 	zTemp2 						; increment current token.
.a7b4	b2 02		lda ($02)			lda 	(zTemp0) 					; add the length + 1 to the keyword pointer
.a7b6	38		sec				sec
.a7b7	65 02		adc $02				adc 	zTemp0
.a7b9	85 02		sta $02				sta 	zTemp0
.a7bb	90 02		bcc $a7bf			bcc		_TCTNoCarry
.a7bd	e6 03		inc $03				inc 	zTemp0+1
.a7bf					_TCTNoCarry:
.a7bf	b2 02		lda ($02)			lda 	(zTemp0)					; have we finished ?
.a7c1	d0 d3		bne $a796			bne 	_TCTLoop 					; no, check the next keyword.
.a7c3	18		clc				clc
.a7c4	a5 04		lda $04				lda 	zTemp1 						; best length is zero, exit with CC
.a7c6	f0 0b		beq $a7d3			beq 	_TCTExit
.a7c8	8a		txa				txa 								; add that length to the input index.
.a7c9	18		clc				clc
.a7ca	65 04		adc $04				adc 	zTemp1
.a7cc	aa		tax				tax
.a7cd	a5 07		lda $07				lda 	zTemp2+1 					; token number
.a7cf	20 98 a6	jsr $a698			jsr 	TOKWriteToken 				; write it out.
.a7d2	38		sec				sec 								; set carry and exit
.a7d3					_TCTExit:
.a7d3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: words/list.asm

.a7d4					Cmd_List:
.a7d4	fa		plx				plx
.a7d5	64 06		stz $06				stz 	zTemp2						; clear the lowest-number
.a7d7	64 07		stz $07				stz 	zTemp2+1
.a7d9	e0 ff		cpx #$ff			cpx 	#$FF 						; empty stack
.a7db	f0 0b		beq $a7e8			beq 	_CLNoStart
.a7dd	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy TOS in
.a7e0	85 06		sta $06				sta 	zTemp2
.a7e2	bd 00 07	lda $0700,x			lda 	highStack,x
.a7e5	85 07		sta $07				sta 	zTemp2+1
.a7e7	ca		dex				dex
.a7e8					_CLNoStart:
.a7e8	a9 02		lda #$02			lda 	#COL_GREEN
.a7ea	20 d0 a2	jsr $a2d0			jsr 	ExternColour
.a7ed					_CLNoStartLine:
.a7ed	a9 00		lda #$00			lda 	#(programStart) & $FF
.a7ef	85 00		sta $00				sta 	codePtr
.a7f1	a9 10		lda #$10			lda 	#(programStart) >> 8
.a7f3	85 01		sta $01				sta 	codePtr+1
.a7f5					_CLILoop:
.a7f5	b2 00		lda ($00)			lda 	(codePtr)					; check end of program
.a7f7	f0 24		beq $a81d			beq 	_CLIEnd
.a7f9	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.a7fb	38		sec				sec
.a7fc	b1 00		lda ($00),y			lda 	(codePtr),y
.a7fe	e5 06		sbc $06				sbc 	zTemp2
.a800	c8		iny				iny
.a801	b1 00		lda ($00),y			lda 	(codePtr),y
.a803	e5 07		sbc $07				sbc 	zTemp2+1
.a805	90 09		bcc $a810			bcc 	_CLISkip
.a807	da		phx				phx
.a808	20 20 a8	jsr $a820			jsr 	ListCurrent 				; list the line.
.a80b	fa		plx				plx
.a80c	c6 08		dec $08				dec 	zTemp3 						; done all lines
.a80e	f0 0d		beq $a81d			beq 	_CLIEnd
.a810					_CLISkip:
.a810	18		clc				clc
.a811	b2 00		lda ($00)			lda 	(codePtr) 					; go to next
.a813	65 00		adc $00				adc 	codePtr
.a815	85 00		sta $00				sta 	codePtr
.a817	90 dc		bcc $a7f5			bcc 	_CLILoop
.a819	e6 01		inc $01				inc 	codePtr+1
.a81b	80 d8		bra $a7f5			bra 	_CLILoop
.a81d					_CLIEnd:
.a81d	4c 09 a0	jmp $a009			jmp 	WarmStart
.a820					ListCurrent:
.a820	a0 01		ldy #$01			ldy 	#1							; print line#
.a822	b1 00		lda ($00),y			lda 	(codePtr),y
.a824	aa		tax				tax
.a825	c8		iny				iny
.a826	b1 00		lda ($00),y			lda 	(codePtr),y
.a828	a8		tay				tay
.a829	20 bc a1	jsr $a1bc			jsr 	PrintIntegerUnsigned
.a82c	a8		tay				tay
.a82d					_LCPadOut:
.a82d	a9 20		lda #$20			lda 	#' '
.a82f	20 c6 a2	jsr $a2c6			jsr 	ExternPrint
.a832	c8		iny				iny
.a833	c0 06		cpy #$06			cpy 	#6
.a835	d0 f6		bne $a82d			bne 	_LCPadOut
.a837	a0 03		ldy #$03			ldy 	#3 							; start here
.a839	64 13		stz $13				stz 	PrefixCharacter				; no prefix
.a83b					_LCLoop:
.a83b	b1 00		lda ($00),y			lda 	(codePtr),y 				; [ ] never have a prefix.
.a83d	c9 23		cmp #$23			cmp 	#KWD_LSQPAREN
.a83f	f0 0b		beq $a84c			beq 	_LCNoPrefix
.a841	c9 24		cmp #$24			cmp 	#KWD_RSQPAREN
.a843	f0 07		beq $a84c			beq 	_LCNoPrefix
.a845	a5 13		lda $13				lda 	PrefixCharacter 			; output prefix, reset to space
.a847	f0 03		beq $a84c			beq		_LCNoPrefix
.a849	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.a84c					_LCNoPrefix:
.a84c	a9 20		lda #$20			lda 	#32
.a84e	85 13		sta $13				sta 	PrefixCharacter
.a850	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at next
.a852	f0 13		beq $a867			beq 	_LCExit
.a854	10 4d		bpl $a8a3			bpl 	_LCIsToken 					; +ve goto token.
.a856	c9 c0		cmp #$c0			cmp 	#$C0 						; C0-FF
.a858	b0 13		bcs $a86d			bcs 	_LCIsIdentifier
.a85a	29 3f		and #$3f			and 	#$3F 						; 80-BF 0-63
.a85c	aa		tax				tax
.a85d	c8		iny				iny
.a85e	5a		phy				phy 								; push pos
.a85f	a0 00		ldy #$00			ldy 	#0
.a861	20 bc a1	jsr $a1bc			jsr 	PrintIntegerUnsigned
.a864	7a		ply				ply
.a865	80 d4		bra $a83b			bra 	_LCLoop
.a867					_LCExit:
.a867	a9 0d		lda #$0d			lda 	#13
.a869	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.a86c	60		rts				rts
.a86d					_LCIsIdentifier:
.a86d					_LCIdentLoop:
.a86d	b1 00		lda ($00),y			lda 	(codePtr),y 				; keep printing
.a86f	20 59 a9	jsr $a959			jsr 	ListPrintIDChar
.a872	b1 00		lda ($00),y			lda 	(codePtr),y 				; get current
.a874	c8		iny				iny
.a875	c9 e0		cmp #$e0			cmp 	#$E0 						; was it an end marker
.a877	b0 c2		bcs $a83b			bcs 	_LCLoop 					; if so, do next
.a879	80 f2		bra $a86d			bra 	_LCIdentLoop				; if not loop round
.a87b					_LCConstant:
.a87b	c8		iny				iny
.a87c	b1 00		lda ($00),y			lda 	(codePtr),y 				; get LSB into X
.a87e	aa		tax				tax
.a87f	c8		iny				iny 								; get MSB into Y
.a880	b1 00		lda ($00),y			lda 	(codePtr),y
.a882	c8		iny				iny
.a883	5a		phy				phy
.a884	a8		tay				tay
.a885	5a		phy				phy 								; save sign
.a886	10 0c		bpl $a894			bpl 	_LCNotNegative
.a888	98		tya				tya 								; YX = |YX|
.a889	49 ff		eor #$ff			eor 	#$FF
.a88b	a8		tay				tay
.a88c	8a		txa				txa
.a88d	49 ff		eor #$ff			eor 	#$FF
.a88f	aa		tax				tax
.a890	e8		inx				inx
.a891	d0 01		bne $a894			bne 	_LCNotNegative
.a893	c8		iny				iny
.a894					_LCNotNegative:
.a894					_LCPrintYX:
.a894	20 bc a1	jsr $a1bc			jsr 	PrintIntegerUnsigned
.a897	68		pla				pla 								; restore sign
.a898	10 05		bpl $a89f			bpl 	_LCNoTrail
.a89a	a9 2d		lda #$2d			lda 	#"-"
.a89c	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.a89f					_LCNoTrail:
.a89f	7a		ply				ply 								; restore Y
.a8a0	4c 3b a8	jmp $a83b			jmp 	_LCLoop
.a8a3					_LCIsToken:
.a8a3	c9 01		cmp #$01			cmp 	#KWD_SYS_CONST 				; check for constant.
.a8a5	f0 d4		beq $a87b			beq 	_LCConstant
.a8a7	c9 06		cmp #$06			cmp 	#TOK_NOT_CONTROL
.a8a9	90 3e		bcc $a8e9			bcc 	_LCControl
.a8ab					_LCIsKeywordToken:
.a8ab	85 02		sta $02				sta 	zTemp0 						; save token #
.a8ad	a9 0c		lda #$0c			lda 	#(KeywordText) & $FF
.a8af	85 04		sta $04				sta 	zTemp1
.a8b1	a9 a0		lda #$a0			lda 	#(KeywordText) >> 8
.a8b3	85 05		sta $05				sta 	zTemp1+1
.a8b5	5a		phy				phy 								; save code offset
.a8b6					_LCForward:
.a8b6	a5 02		lda $02				lda 	zTemp0 						; done if token number is zero.
.a8b8	f0 0f		beq $a8c9			beq 	_LCFoundToken
.a8ba	c6 02		dec $02				dec 	zTemp0						; dec count.
.a8bc	38		sec				sec 								; go to next keyword.
.a8bd	b2 04		lda ($04)			lda 	(zTemp1)
.a8bf	65 04		adc $04				adc 	zTemp1
.a8c1	85 04		sta $04				sta 	zTemp1
.a8c3	90 f1		bcc $a8b6			bcc 	_LCForward
.a8c5	e6 05		inc $05				inc 	zTemp1+1
.a8c7	80 ed		bra $a8b6			bra 	_LCForward
.a8c9					_LCFoundToken:
.a8c9	a0 01		ldy #$01			ldy 	#1 							; output the token.
.a8cb					_LCOutToken:
.a8cb	b1 04		lda ($04),y			lda 	(zTemp1),y 					; print character
.a8cd	29 7f		and #$7f			and 	#$7F
.a8cf	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.a8d2	b1 04		lda ($04),y			lda 	(zTemp1),y 					; reget, put bit 7 in C
.a8d4	c8		iny				iny
.a8d5	0a		asl a				asl 	a
.a8d6	90 f3		bcc $a8cb			bcc 	_LCOutToken
.a8d8	7a		ply				ply 								; restore code offset
.a8d9	b1 00		lda ($00),y			lda 	(codePtr),y 				; what did we print ?
.a8db	c8		iny				iny
.a8dc	c9 22		cmp #$22			cmp 	#KWD_HAT 					; for ^ and [, do not print space following.
.a8de	f0 04		beq $a8e4			beq 	_LCCancelPrefix
.a8e0	c9 23		cmp #$23			cmp 	#KWD_LSQPAREN
.a8e2	d0 02		bne $a8e6			bne 	_LCGoLoop
.a8e4					_LCCancelPrefix:
.a8e4	64 13		stz $13				stz 	PrefixCharacter
.a8e6					_LCGoLoop:
.a8e6	4c 3b a8	jmp $a83b			jmp 	_LCLoop
.a8e9					_LCControl:
.a8e9	c9 02		cmp #$02			cmp 	#KWD_SYS_CALL
.a8eb	f0 2c		beq $a919			beq 	_LCDecodeCall
.a8ed	c9 05		cmp #$05			cmp 	#KWD_SYS_DEFINE
.a8ef	f0 1d		beq $a90e			beq 	_LCDecodeDefine
.a8f1	5a		phy				phy 								; save Y
.a8f2	a0 22		ldy #$22			ldy 	#'"'						; setup for String
.a8f4	c9 04		cmp #$04			cmp 	#KWD_SYS_QSTRING
.a8f6	f0 02		beq $a8fa			beq 	_LCDecodeString
.a8f8	a0 27		ldy #$27			ldy 	#"'"						; setup for comment
.a8fa					_LCDecodeString
.a8fa	98		tya				tya
.a8fb	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.a8fe	7a		ply				ply 								; restore Y pos
.a8ff	48		pha				pha 								; save end character on stack.
.a900	20 39 a9	jsr $a939			jsr 	ListPrintCodeIdentifier
.a903	68		pla				pla 								; last character
.a904	c9 27		cmp #$27			cmp 	#"'"						; don't print last
.a906	f0 03		beq $a90b			beq 	_LCEDNoQuote
.a908	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.a90b					_LCEDNoQuote:
.a90b	4c 3b a8	jmp $a83b			jmp 	_LCLoop
.a90e					_LCDecodeDefine:
.a90e	a9 3a		lda #$3a			lda 	#":"
.a910	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.a913	20 39 a9	jsr $a939			jsr 	ListPrintCodeIdentifier
.a916	4c 3b a8	jmp $a83b			jmp 	_LCLoop
.a919					_LCDecodeCall:
.a919	c8		iny				iny 								; get line number into XA
.a91a	b1 00		lda ($00),y			lda 	(codePtr),y
.a91c	48		pha				pha
.a91d	c8		iny				iny
.a91e	b1 00		lda ($00),y			lda 	(codePtr),y
.a920	c8		iny				iny
.a921	aa		tax				tax
.a922	68		pla				pla
.a923	20 6b a9	jsr $a96b			jsr 	ListFindLine 				; find that line.
.a926	90 10		bcc $a938			bcc 	_LCNoDefinition
.a928	5a		phy				phy
.a929	a0 03		ldy #$03			ldy 	#3 							; look at first character
.a92b	b1 02		lda ($02),y			lda 	(zTemp0),y
.a92d	c9 05		cmp #$05			cmp 	#KWD_SYS_DEFINE
.a92f	d0 07		bne $a938			bne 	_LCNoDefinition 			; not define
.a931	20 43 a9	jsr $a943			jsr 	ListPrintIdentifier
.a934	7a		ply				ply
.a935	4c 3b a8	jmp $a83b			jmp 	_LCLoop
.a938					_LCNoDefinition:
>a938	ff						.byte 	$FF 						; definition is missing.
.a939					ListPrintCodeIdentifier:
.a939	48		pha				pha 								; copy codePtr -> zTemp0
.a93a	a5 00		lda $00				lda 	codePtr
.a93c	85 02		sta $02				sta 	zTemp0
.a93e	a5 01		lda $01				lda 	codePtr+1
.a940	85 03		sta $03				sta 	zTemp0+1
.a942	68		pla				pla
.a943					ListPrintIdentifier:
.a943	48		pha				pha
.a944	da		phx				phx
.a945	c8		iny				iny 								; skip over the type
.a946	b1 02		lda ($02),y			lda 	(zTemp0),y 					; count in X
.a948	aa		tax				tax
.a949					_LPILoop:
.a949	c8		iny				iny
.a94a	e0 00		cpx #$00			cpx 	#0
.a94c	f0 08		beq $a956			beq 	_LPIExit
.a94e	b1 02		lda ($02),y			lda 	(zTemp0),y
.a950	20 59 a9	jsr $a959			jsr 	ListPrintIDChar
.a953	ca		dex				dex
.a954	80 f3		bra $a949			bra 	_LPILoop
.a956					_LPIExit:
.a956	fa		plx				plx
.a957	68		pla				pla
.a958	60		rts				rts
.a959					ListPrintIDChar:
.a959	c9 00		cmp #$00			cmp 	#0 							; check if ID char, if not just print
.a95b	10 0a		bpl $a967			bpl	 	_LCNotDot
.a95d	29 1f		and #$1f			and 	#$1F 						; 1-26 A-Z 27 .
.a95f	09 40		ora #$40			ora 	#$40 						; ASCII except .
.a961	c9 5b		cmp #$5b			cmp 	#$40+27
.a963	d0 02		bne $a967			bne 	_LCNotDot
.a965	a9 2e		lda #$2e			lda 	#"."
.a967					_LCNotDot:
.a967	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.a96a	60		rts				rts
.a96b					ListFindLine:
.a96b	5a		phy				phy
.a96c	86 05		stx $05				stx 	zTemp1+1
.a96e	85 04		sta $04				sta 	zTemp1
.a970	a9 00		lda #$00			lda 	#(ProgramStart) & $FF
.a972	85 02		sta $02				sta 	zTemp0
.a974	a9 10		lda #$10			lda 	#(ProgramStart) >> 8
.a976	85 03		sta $03				sta 	zTemp0+1
.a978					_LFLSearch:
.a978	18		clc				clc									; reached the end.
.a979	b2 02		lda ($02)			lda 	(zTemp0)
.a97b	f0 1d		beq $a99a			beq 	_LFLExit 					; exit with CC
.a97d	a0 01		ldy #$01			ldy 	#1
.a97f	a5 04		lda $04				lda 	zTemp1
.a981	d1 02		cmp ($02),y			cmp 	(zTemp0),y
.a983	d0 07		bne $a98c			bne 	_LFLNext
.a985	c8		iny				iny
.a986	a5 05		lda $05				lda 	zTemp1+1
.a988	d1 02		cmp ($02),y			cmp 	(zTemp0),y
.a98a	f0 0d		beq $a999			beq 	_LFLFound
.a98c					_LFLNext:
.a98c	18		clc				clc
.a98d	b2 02		lda ($02)			lda 	(zTemp0)
.a98f	65 02		adc $02				adc 	zTemp0
.a991	85 02		sta $02				sta 	zTemp0
.a993	90 e3		bcc $a978			bcc 	_LFLSearch
.a995	e6 03		inc $03				inc 	zTemp0+1
.a997	80 df		bra $a978			bra 	_LFLSearch
.a999					_LFLFound:
.a999	38		sec				sec
.a99a					_LFLExit:
.a99a	7a		ply				ply
.a99b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: words/memory.asm

.a99c					Mem_Peek:
.a99c	fa		plx				plx
.a99d	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy address
.a9a0	85 02		sta $02				sta 	zTemp0
.a9a2	bd 00 07	lda $0700,x			lda 	highStack,x
.a9a5	85 03		sta $03				sta 	zTemp0+1
.a9a7	b2 02		lda ($02)			lda 	(zTemp0)					; read byte
.a9a9	9d 00 06	sta $0600,x			sta 	lowStack,x 					; write to stack
.a9ac	9e 00 07	stz $0700,x			stz 	highStack,x
.a9af	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.a9b2					Mem_WPeek:
.a9b2	fa		plx				plx
.a9b3	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy address
.a9b6	85 02		sta $02				sta 	zTemp0
.a9b8	bd 00 07	lda $0700,x			lda 	highStack,x
.a9bb	85 03		sta $03				sta 	zTemp0+1
.a9bd	b2 02		lda ($02)			lda 	(zTemp0)					; read byte
.a9bf	9d 00 06	sta $0600,x			sta 	lowStack,x 					; write to stack
.a9c2	5a		phy				phy 								; read msb
.a9c3	a0 01		ldy #$01			ldy 	#1
.a9c5	b1 02		lda ($02),y			lda 	(zTemp0),y
.a9c7	7a		ply				ply
.a9c8	9d 00 07	sta $0700,x			sta 	highStack,x 				; write to stack
.a9cb	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.a9ce					Mem_Poke:
.a9ce	fa		plx				plx
.a9cf	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy address
.a9d2	85 02		sta $02				sta 	zTemp0
.a9d4	bd 00 07	lda $0700,x			lda 	highStack,x
.a9d7	85 03		sta $03				sta 	zTemp0+1
.a9d9	bd ff 05	lda $05ff,x			lda 	lowStack-1,x 				; byte to write
.a9dc	92 02		sta ($02)			sta 	(zTemp0)
.a9de	ca		dex				dex
.a9df	ca		dex				dex
.a9e0	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.a9e3					Mem_WPoke:
.a9e3	fa		plx				plx
.a9e4	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy address
.a9e7	85 02		sta $02				sta 	zTemp0
.a9e9	bd 00 07	lda $0700,x			lda 	highStack,x
.a9ec	85 03		sta $03				sta 	zTemp0+1
.a9ee	bd ff 05	lda $05ff,x			lda 	lowStack-1,x 				; byte to write
.a9f1	92 02		sta ($02)			sta 	(zTemp0)
.a9f3	5a		phy				phy
.a9f4	a0 01		ldy #$01			ldy 	#1
.a9f6	bd ff 06	lda $06ff,x			lda 	highStack-1,x 				; byte to write
.a9f9	91 02		sta ($02),y			sta 	(zTemp0),y
.a9fb	7a		ply				ply
.a9fc	ca		dex				dex
.a9fd	ca		dex				dex
.a9fe	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aa01					Mem_DWPoke:
.aa01	fa		plx				plx
.aa02	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy address
.aa05	85 02		sta $02				sta 	zTemp0
.aa07	bd 00 07	lda $0700,x			lda 	highStack,x
.aa0a	85 03		sta $03				sta 	zTemp0+1
.aa0c	bd ff 05	lda $05ff,x			lda 	lowStack-1,x 				; byte to write
.aa0f	92 02		sta ($02)			sta 	(zTemp0)
.aa11	bd ff 06	lda $06ff,x			lda 	highStack-1,x 				; byte to write
.aa14	92 02		sta ($02)			sta 	(zTemp0)
.aa16	ca		dex				dex
.aa17	ca		dex				dex
.aa18	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aa1b					Mem_Alloc:
.aa1b	fa		plx				plx
.aa1c	38		sec				sec 								; subtract count from alloc ptr
.aa1d	a5 0d		lda $0d				lda 	allocPtr
.aa1f	fd 00 06	sbc $0600,x			sbc 	lowStack,x
.aa22	85 0d		sta $0d				sta 	allocPtr
.aa24	48		pha				pha 								; save low.
.aa25	a5 0e		lda $0e				lda 	allocPtr+1
.aa27	fd 00 07	sbc $0700,x			sbc 	highStack,x
.aa2a	85 0e		sta $0e				sta 	allocPtr+1
.aa2c	90 10		bcc $aa3e			bcc 	_MAError 					; borrow ?
.aa2e	c5 10		cmp $10				cmp 	memVarPtr+1 				; if <= memVarPtr then error ?
.aa30	90 0c		bcc $aa3e			bcc 	_MAError
.aa32	f0 0a		beq $aa3e			beq 	_MAError
.aa34	9d 00 07	sta $0700,x			sta 	highStack,x 				; update address
.aa37	68		pla				pla
.aa38	9d 00 06	sta $0600,x			sta 	lowStack,x
.aa3b	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aa3e					_MAError:
.aa3e	20 92 a1	jsr $a192			jsr 	ErrorHandler
>aa41	4d 45 4d 4f 52 59 3f 00				.text 	"MEMORY?",0

;******  Return to file: main.asm


;******  Processing file: words/stack.asm

.aa49					Stack_Empty:
.aa49	fa		plx				plx
.aa4a	a2 00		ldx #$00			ldx 	#0
.aa4c	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aa4f					Stack_Drop:
.aa4f	fa		plx				plx
.aa50	ca		dex				dex
.aa51	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aa54					Stack_Dup:
.aa54	fa		plx				plx
.aa55	bd 00 06	lda $0600,x			lda 	lowStack,x					; copy to next up
.aa58	9d 01 06	sta $0601,x			sta 	lowStack+1,x
.aa5b	bd 00 07	lda $0700,x			lda 	highStack,x
.aa5e	9d 01 07	sta $0701,x			sta 	highStack+1,x
.aa61	e8		inx				inx 								; bump stack pointer
.aa62	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aa65					Stack_Nip:
.aa65	fa		plx				plx
.aa66	bd 00 06	lda $0600,x			lda 	lowStack,x	 				; copy top to 2nd
.aa69	9d ff 05	sta $05ff,x			sta 	lowStack-1,x
.aa6c	bd 00 07	lda $0700,x			lda 	highStack,x
.aa6f	9d ff 06	sta $06ff,x			sta 	highStack-1,x
.aa72	ca		dex				dex 								; drop tos
.aa73	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aa76					Stack_Over:
.aa76	fa		plx				plx
.aa77	bd ff 05	lda $05ff,x			lda 	lowStack-1,x				; copy to next up
.aa7a	9d 01 06	sta $0601,x			sta 	lowStack+1,x
.aa7d	bd ff 06	lda $06ff,x			lda 	highStack-1,x
.aa80	9d 01 07	sta $0701,x			sta 	highStack+1,x
.aa83	e8		inx				inx 							; bump stack pointer
.aa84	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aa87					Stack_Swap:
.aa87	fa		plx				plx
.aa88	5a		phy				phy
.aa89	bd 00 06	lda $0600,x			lda 	lowStack,x
.aa8c	a8		tay				tay
.aa8d	bd ff 05	lda $05ff,x			lda 	lowStack-1,x
.aa90	9d 00 06	sta $0600,x			sta 	lowStack,x
.aa93	98		tya				tya
.aa94	9d ff 05	sta $05ff,x			sta 	lowStack-1,x
.aa97	bd 00 07	lda $0700,x			lda 	highStack,x
.aa9a	a8		tay				tay
.aa9b	bd ff 06	lda $06ff,x			lda 	highStack-1,x
.aa9e	9d 00 07	sta $0700,x			sta 	highStack,x
.aaa1	98		tya				tya
.aaa2	9d ff 06	sta $06ff,x			sta 	highStack-1,x
.aaa5	7a		ply				ply
.aaa6	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/store.asm

.aaa9					Command_Store:
.aaa9	fa		plx				plx
.aaaa	b1 00		lda ($00),y			lda 	(codePtr),y 				; next character
.aaac	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a single letter variable ?
.aaae	90 1f		bcc $aacf			bcc 	_CSLongVariable
.aab0	c8		iny				iny 								; get the next
.aab1	b1 00		lda ($00),y			lda 	(codePtr),y
.aab3	88		dey				dey
.aab4	c9 23		cmp #$23			cmp 	#KWD_LSQPAREN 				; followed by indexing, use long variable
.aab6	f0 17		beq $aacf			beq 	_CSLongVariable
.aab8	b1 00		lda ($00),y			lda 	(codePtr),y 				; get variable back.
.aaba	c8		iny				iny 								; skip over it and push on stack
.aabb	5a		phy				phy
.aabc	0a		asl a				asl 	a 							; double it, now C0-FE
.aabd	a8		tay				tay 								; put in Y
.aabe	bd 00 06	lda $0600,x			lda 	lowStack,x 					; copy TOS into it
.aac1	99 40 0e	sta $0e40,y			sta 	FastVariables-$C0,y
.aac4	bd 00 07	lda $0700,x			lda 	highStack,x
.aac7	99 41 0e	sta $0e41,y			sta 	FastVariables-$C0+1,y
.aaca	ca		dex				dex 								; pop off stack
.aacb	7a		ply				ply 								; restore position and do next
.aacc	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aacf					_CSLongVariable:
.aacf	38		sec				sec 								; create variable if not found.
.aad0	20 3d a5	jsr $a53d			jsr 	VariableFind 				; find it - create if not - is in zTemp0
.aad3	20 93 a3	jsr $a393			jsr 	IndexCheck 					; check indexing.
.aad6	bd 00 06	lda $0600,x			lda 	lowStack,x					; write it out.
.aad9	92 02		sta ($02)			sta 	(zTemp0)
.aadb	5a		phy				phy
.aadc	a0 01		ldy #$01			ldy 	#1
.aade	bd 00 07	lda $0700,x			lda 	highStack,x
.aae1	91 02		sta ($02),y			sta 	(zTemp0),y
.aae3	7a		ply				ply
.aae4	ca		dex				dex 								; pop off stack
.aae5	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/system.asm

.aae8					Command_New:
.aae8	fa		plx				plx
.aae9	9c 00 10	stz $1000			stz 	ProgramStart
.aaec	4c 09 a0	jmp $a009			jmp 	WarmStart
.aaef					Command_Old:
.aaef	fa		plx				plx
.aaf0	a9 00		lda #$00			lda 	#(ProgramStart) & $FF
.aaf2	85 00		sta $00				sta 	codePtr
.aaf4	a9 10		lda #$10			lda 	#(ProgramStart) >> 8
.aaf6	85 01		sta $01				sta 	codePtr+1
.aaf8	a0 03		ldy #$03			ldy 	#3
.aafa					_COAdvance:
.aafa	c0 c0		cpy #$c0			cpy 	#192 						; first lines > this can't be recovered
.aafc	b0 0e		bcs $ab0c			bcs		_COFail
.aafe	20 20 af	jsr $af20			jsr 	AdvanceInCode
.ab01	b1 00		lda ($00),y			lda 	(codePtr),y
.ab03	d0 f5		bne $aafa			bne 	_COAdvance
.ab05	c8		iny				iny 								; byte after end of line
.ab06	8c 00 10	sty $1000			sty 	ProgramStart 				; overwrite first byte with offset.
.ab09					_CONotDeleted:
.ab09	4c 09 a0	jmp $a009			jmp 	WarmStart
.ab0c					_COFail:
.ab0c	20 92 a1	jsr $a192			jsr 	ErrorHandler
>ab0f	43 41 4e 54 3f 00				.text 	"CANT?",0
.ab15					Command_End:
.ab15	fa		plx				plx
.ab16	4c 09 a0	jmp $a009			jmp 	WarmStart
.ab19					Command_Stop:
>ab19	ff						.byte 	$FF
.ab1a	fa		plx				plx
.ab1b	20 92 a1	jsr $a192			jsr 	ErrorHandler
>ab1e	53 54 4f 50 00					.text 	"STOP",0
.ab23					Command_Assert:
.ab23	fa		plx				plx
.ab24	bd 00 06	lda $0600,x			lda 	lowStack,x 					; check TOS = 0 ?
.ab27	1d 00 07	ora $0700,x			ora 	highStack,x
.ab2a	f0 04		beq $ab30			beq 	_CAFail
.ab2c	ca		dex				dex 								; throw if not.
.ab2d	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ab30					_CAFail:
.ab30	20 92 a1	jsr $a192			jsr 	ErrorHandler
>ab33	41 53 53 45 52 54 00				.text 	"ASSERT",0
.ab3a					Command_Sys:
.ab3a	fa		plx				plx
.ab3b	bd 00 06	lda $0600,x			lda 	lowStack,x 					; save call address
.ab3e	85 02		sta $02				sta 	zTemp0
.ab40	bd 00 07	lda $0700,x			lda 	highStack,x
.ab43	85 03		sta $03				sta 	zTemp0+1
.ab45	ca		dex				dex 								; pop tos
.ab46	da		phx				phx 								; save XY
.ab47	5a		phy				phy
.ab48	ad 02 0f	lda $0f02			lda 	FastVariables+('A'-'A'+1)*2 ; load AXY
.ab4b	ae 30 0f	ldx $0f30			ldx 	FastVariables+('X'-'A'+1)*2
.ab4e	ac 32 0f	ldy $0f32			ldy 	FastVariables+('Y'-'A'+1)*2
.ab51	20 59 ab	jsr $ab59			jsr 	_CSCallInd
.ab54	7a		ply				ply 								; restore XY
.ab55	fa		plx				plx
.ab56	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ab59					_CSCallInd:
.ab59	6c 02 00	jmp ($0002)			jmp 	(zTemp0)
.ab5c					Command_DumpStack:
.ab5c	fa		plx				plx
.ab5d	da		phx				phx 								; save pos and sp
.ab5e	5a		phy				phy
.ab5f	86 0c		stx $0c				stx 	SignCount
.ab61	a2 ff		ldx #$ff			ldx 	#$FF
.ab63					_CDSLoop:
.ab63	e4 0c		cpx $0c				cpx 	SignCount 					; done all ?
.ab65	f0 2a		beq $ab91			beq 	_CDSExit
.ab67	e8		inx				inx
.ab68	da		phx				phx 								; save SP
.ab69	bd 00 07	lda $0700,x			lda 	highStack,x 				; get tos
.ab6c	a8		tay				tay
.ab6d	bd 00 06	lda $0600,x			lda 	lowStack,x
.ab70	aa		tax				tax
.ab71	c0 00		cpy #$00			cpy 	#0
.ab73	10 11		bpl $ab86			bpl 	_CDSPositive
.ab75	a9 2d		lda #$2d			lda 	#"-" 						; minus
.ab77	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.ab7a	98		tya				tya 								; negate YX
.ab7b	49 ff		eor #$ff			eor 	#$FF
.ab7d	a8		tay				tay
.ab7e	8a		txa				txa
.ab7f	49 ff		eor #$ff			eor 	#$FF
.ab81	aa		tax				tax
.ab82	e8		inx				inx
.ab83	d0 01		bne $ab86			bne 	_CDSPositive
.ab85	c8		iny				iny
.ab86					_CDSPositive:
.ab86	20 bc a1	jsr $a1bc			jsr 	PrintIntegerUnsigned
.ab89	a9 20		lda #$20			lda 	#" " 						; space
.ab8b	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.ab8e	fa		plx				plx
.ab8f	80 d2		bra $ab63			bra 	_CDSLoop
.ab91					_CDSExit:
.ab91	a9 3c		lda #$3c			lda 	#"<"
.ab93	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.ab96	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.ab99	a9 0d		lda #$0d			lda 	#13 						; CR
.ab9b	20 d9 a1	jsr $a1d9			jsr 	PrintCharacter
.ab9e	7a		ply				ply
.ab9f	fa		plx				plx
.aba0	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/arithmetic/binary.asm

.aba3					Stack_Add:
.aba3	fa		plx				plx
.aba4	ca		dex				dex
.aba5	18		clc				clc
.aba6	bd 00 06	lda $0600,x			lda		lowStack,x
.aba9	7d 01 06	adc $0601,x			adc 	lowStack+1,x
.abac	9d 00 06	sta $0600,x			sta 	lowStack,x
.abaf	bd 00 07	lda $0700,x			lda		highStack,x
.abb2	7d 01 07	adc $0701,x			adc 	highStack+1,x
.abb5	9d 00 07	sta $0700,x			sta 	highStack,x
.abb8	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.abbb					Stack_Sub:
.abbb	fa		plx				plx
.abbc	ca		dex				dex
.abbd	38		sec				sec
.abbe	bd 00 06	lda $0600,x			lda		lowStack,x
.abc1	fd 01 06	sbc $0601,x			sbc 	lowStack+1,x
.abc4	9d 00 06	sta $0600,x			sta 	lowStack,x
.abc7	bd 00 07	lda $0700,x			lda		highStack,x
.abca	fd 01 07	sbc $0701,x			sbc 	highStack+1,x
.abcd	9d 00 07	sta $0700,x			sta 	highStack,x
.abd0	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.abd3					Stack_And:
.abd3	fa		plx				plx
.abd4	ca		dex				dex
.abd5	bd 00 06	lda $0600,x			lda		lowStack,x
.abd8	3d 01 06	and $0601,x			and		lowStack+1,x
.abdb	9d 00 06	sta $0600,x			sta 	lowStack,x
.abde	bd 00 07	lda $0700,x			lda		highStack,x
.abe1	3d 01 07	and $0701,x			and 	highStack+1,x
.abe4	9d 00 07	sta $0700,x			sta 	highStack,x
.abe7	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.abea					Stack_Xor:
.abea	fa		plx				plx
.abeb	ca		dex				dex
.abec	bd 00 06	lda $0600,x			lda		lowStack,x
.abef	5d 01 06	eor $0601,x			eor		lowStack+1,x
.abf2	9d 00 06	sta $0600,x			sta 	lowStack,x
.abf5	bd 00 07	lda $0700,x			lda		highStack,x
.abf8	5d 01 07	eor $0701,x			eor 	highStack+1,x
.abfb	9d 00 07	sta $0700,x			sta 	highStack,x
.abfe	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ac01					Stack_Or:
.ac01	fa		plx				plx
.ac02	ca		dex				dex
.ac03	bd 00 06	lda $0600,x			lda		lowStack,x
.ac06	1d 01 06	ora $0601,x			ora		lowStack+1,x
.ac09	9d 00 06	sta $0600,x			sta 	lowStack,x
.ac0c	bd 00 07	lda $0700,x			lda		highStack,x
.ac0f	1d 01 07	ora $0701,x			ora 	highStack+1,x
.ac12	9d 00 07	sta $0700,x			sta 	highStack,x
.ac15	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ac18					Stack_Shl:
.ac18	fa		plx				plx
.ac19	38		sec				sec
.ac1a	80 02		bra $ac1e			bra 	StackShift
.ac1c					Stack_Shr:
.ac1c	fa		plx				plx
.ac1d	18		clc				clc
.ac1e					StackShift:
.ac1e	08		php				php
.ac1f	ca		dex				dex
.ac20	bd 01 06	lda $0601,x			lda 	lowStack+1,x 					; if the shift >= 32
.ac23	29 e0		and #$e0			and 	#$E0 							; going to be zero.
.ac25	1d 01 07	ora $0701,x			ora 	highStack+1,x
.ac28	d0 19		bne $ac43			bne 	_SSZero
.ac2a					_SSLoop:
.ac2a	de 01 06	dec $0601,x			dec 	lowStack+1,x 				; dec check count
.ac2d	30 1a		bmi $ac49			bmi 	_SSDone 					; completed ?
.ac2f	28		plp				plp 								; restore flag
.ac30	08		php				php
.ac31	b0 08		bcs $ac3b			bcs 	_SSLeft 					; do either shift.
.ac33	5e 00 07	lsr $0700,x			lsr 	highStack,x
.ac36	7e 00 06	ror $0600,x			ror 	lowStack,x
.ac39	80 ef		bra $ac2a			bra 	_SSLoop
.ac3b					_SSLeft:
.ac3b	1e 00 06	asl $0600,x			asl 	lowStack,x
.ac3e	3e 00 07	rol $0700,x			rol 	highStack,x
.ac41	80 e7		bra $ac2a			bra 	_SSLoop
.ac43					_SSZero:
.ac43	9e 00 06	stz $0600,x			stz 	lowStack,x 					; too many shifts.
.ac46	9e 00 07	stz $0700,x			stz 	highStack,x
.ac49					_SSDone:
.ac49	28		plp				plp 								; throw flag.
.ac4a	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/arithmetic/compare.asm

.ac4d					Comp_Equal:
.ac4d	fa		plx				plx
.ac4e	38		sec				sec
.ac4f	80 02		bra $ac53			bra 	Comp_CheckEqual
.ac51					Comp_NotEqual:
.ac51	fa		plx				plx
.ac52	18		clc				clc
.ac53					Comp_CheckEqual:
.ac53	08		php				php
.ac54	ca		dex				dex
.ac55	bd 00 06	lda $0600,x			lda		lowStack,x
.ac58	5d 01 06	eor $0601,x			eor 	lowStack+1,x
.ac5b	d0 06		bne $ac63			bne 	_CCENonZero
.ac5d	bd 00 07	lda $0700,x			lda		highStack,x
.ac60	5d 01 07	eor $0701,x			eor 	highStack+1,x
.ac63					_CCENonZero:
.ac63	f0 02		beq $ac67			beq 	_CCENotSet
.ac65	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.ac67					_CCENotSet:
.ac67					CompCheckFlip:
.ac67	28		plp				plp 								; if carry set, we want $FF if equal
.ac68	90 02		bcc $ac6c			bcc 	CompReturn
.ac6a	49 ff		eor #$ff			eor 	#$FF
.ac6c					CompReturn:
.ac6c	9d 00 06	sta $0600,x			sta 	lowStack,x 					; save result on stack.
.ac6f	9d 00 07	sta $0700,x			sta 	highStack,x
.ac72	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ac75					Comp_Less:
.ac75	fa		plx				plx
.ac76	18		clc				clc
.ac77	80 02		bra $ac7b			bra 	Comp_LessCont
.ac79					Comp_GreaterEqual:
.ac79	fa		plx				plx
.ac7a	38		sec				sec
.ac7b					Comp_LessCont:
.ac7b	08		php				php
.ac7c	ca		dex				dex
.ac7d	38		sec				sec
.ac7e	bd 00 06	lda $0600,x			lda 	lowStack,x 					; do a subtraction w/o storing the result
.ac81	fd 01 06	sbc $0601,x			sbc 	lowStack+1,x
.ac84	bd 00 07	lda $0700,x			lda 	highStack,x
.ac87	fd 01 07	sbc $0701,x			sbc 	highStack+1,x
.ac8a	50 02		bvc $ac8e			bvc 	_CLNoFlip 					; unsigned -> signed
.ac8c	49 80		eor #$80			eor 	#$80
.ac8e					_CLNoFlip:
.ac8e	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ac90	f0 d5		beq $ac67			beq 	CompCheckFlip
.ac92	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ac94	80 d1		bra $ac67			bra 	CompCheckFlip
.ac96					Comp_LessEqual:
.ac96	fa		plx				plx
.ac97	38		sec				sec
.ac98	80 02		bra $ac9c			bra 	Comp_LessEqualCont
.ac9a					Comp_Greater:
.ac9a	fa		plx				plx
.ac9b	18		clc				clc
.ac9c					Comp_LessEqualCont:
.ac9c	08		php				php
.ac9d	ca		dex				dex
.ac9e	38		sec				sec
.ac9f	bd 01 06	lda $0601,x			lda 	lowStack+1,x 					; do a subtraction w/o storing the result, backwards
.aca2	fd 00 06	sbc $0600,x			sbc 	lowStack,x
.aca5	bd 01 07	lda $0701,x			lda 	highStack+1,x
.aca8	fd 00 07	sbc $0700,x			sbc 	highStack,x
.acab	50 02		bvc $acaf			bvc 	_CLENoFlip 					; unsigned -> signed
.acad	49 80		eor #$80			eor 	#$80
.acaf					_CLENoFlip:
.acaf	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.acb1	f0 b4		beq $ac67			beq 	CompCheckFlip
.acb3	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.acb5	80 b0		bra $ac67			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: words/arithmetic/divide.asm

.acb7					DivInteger16:
.acb7	fa		plx				plx
.acb8	20 be ac	jsr $acbe			jsr 	IntegerDivide
.acbb	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.acbe					IntegerDivide:
.acbe	ca		dex				dex
.acbf	bd 01 06	lda $0601,x			lda 	lowStack+1,x 					; check for division by zero.
.acc2	1d 01 07	ora $0701,x			ora 	highStack+1,x
.acc5	d0 14		bne $acdb			bne 	_BFDOkay
.acc7	20 92 a1	jsr $a192			jsr 	ErrorHandler
>acca	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>acd2	20 42 59 20 5a 45 52 4f 00
.acdb					_BFDOkay:
.acdb	64 04		stz $04				stz 	zTemp1 						; Q/Dividend/Left in +0
.acdd	64 05		stz $05				stz 	zTemp1+1 					; M/Divisor/Right in +4
.acdf	64 0c		stz $0c				stz 	SignCount 					; Count of signs.
.ace1	20 1d ad	jsr $ad1d			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ace4	e8		inx				inx
.ace5	20 1d ad	jsr $ad1d			jsr 	CheckIntegerNegate
.ace8	ca		dex				dex
.ace9	5a		phy				phy 								; Y is the counter
.acea	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.acec					_BFDLoop:
.acec	1e 00 06	asl $0600,x			asl 	lowStack,x 					; shift AQ left.
.acef	3e 00 07	rol $0700,x			rol 	highStack,x
.acf2	26 04		rol $04				rol 	zTemp1
.acf4	26 05		rol $05				rol 	zTemp1+1
.acf6	38		sec				sec
.acf7	a5 04		lda $04				lda 	zTemp1+0 					; Calculate A-M on stack.
.acf9	fd 01 06	sbc $0601,x			sbc 	lowStack+1,x
.acfc	48		pha				pha
.acfd	a5 05		lda $05				lda 	zTemp1+1
.acff	fd 01 07	sbc $0701,x			sbc 	highStack+1,x
.ad02	90 0f		bcc $ad13			bcc 	_BFDNoAdd
.ad04	85 05		sta $05				sta 	zTemp1+1
.ad06	68		pla				pla
.ad07	85 04		sta $04				sta 	zTemp1+0
.ad09	bd 00 06	lda $0600,x			lda 	lowStack,x 					; set Q bit 1.
.ad0c	09 01		ora #$01			ora 	#1
.ad0e	9d 00 06	sta $0600,x			sta 	lowStack,x
.ad11	80 01		bra $ad14			bra 	_BFDNext
.ad13					_BFDNoAdd:
.ad13	68		pla				pla 								; Throw away the intermediate calculations
.ad14					_BFDNext:
.ad14	88		dey				dey
.ad15	d0 d5		bne $acec			bne 	_BFDLoop
.ad17	7a		ply				ply 								; restore Y
.ad18	46 0c		lsr $0c				lsr 	SignCount 					; if sign count odd,
.ad1a	b0 07		bcs $ad23			bcs		IntegerNegateAlways 		; negate the result
.ad1c	60		rts				rts
.ad1d					CheckIntegerNegate:
.ad1d	bd 00 07	lda $0700,x			lda 	highStack,x 				; is it -ve = MSB set ?
.ad20	30 01		bmi $ad23			bmi 	IntegerNegateAlways 		; if so negate it
.ad22	60		rts				rts
.ad23					IntegerNegateAlways:
.ad23	e6 0c		inc $0c				inc 	SignCount 					; bump the count of signs
.ad25	4c 80 ad	jmp $ad80			jmp 	Unary_Negate
.ad28					ModInteger16:
.ad28	fa		plx				plx
.ad29	20 be ac	jsr $acbe			jsr 	IntegerDivide
.ad2c	a5 04		lda $04				lda 	zTemp1
.ad2e	9d 00 06	sta $0600,x			sta 	lowStack,x
.ad31	a5 05		lda $05				lda 	zTemp1+1
.ad33	9d 00 07	sta $0700,x			sta 	highStack,x
.ad36	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/arithmetic/multiply.asm

.ad39					MulInteger16:
.ad39	fa		plx				plx
.ad3a	ca		dex				dex
.ad3b	bd 00 06	lda $0600,x			lda 	lowStack,x					; copy to workspace
.ad3e	85 04		sta $04				sta 	zTemp1
.ad40	bd 00 07	lda $0700,x			lda 	highStack,x
.ad43	85 05		sta $05				sta 	zTemp1+1
.ad45	9e 00 06	stz $0600,x			stz 	lowStack,x 					; zero where the result goes.
.ad48	9e 00 07	stz $0700,x			stz 	highStack,x
.ad4b					_BFMMultiply:
.ad4b	a5 04		lda $04				lda 	zTemp1 						; get LSBit
.ad4d	29 01		and #$01			and 	#1
.ad4f	f0 13		beq $ad64			beq 	_BFMNoAdd
.ad51	18		clc				clc 								; add old tos to current tos.
.ad52	bd 00 06	lda $0600,x			lda		lowStack,x
.ad55	7d 01 06	adc $0601,x			adc 	lowStack+1,x
.ad58	9d 00 06	sta $0600,x			sta 	lowStack,x
.ad5b	bd 00 07	lda $0700,x			lda		highStack,x
.ad5e	7d 01 07	adc $0701,x			adc 	highStack+1,x
.ad61	9d 00 07	sta $0700,x			sta 	highStack,x
.ad64					_BFMNoAdd:
.ad64	1e 01 06	asl $0601,x			asl 	lowStack+1,x 				; shift left
.ad67	3e 01 07	rol $0701,x			rol 	highStack+1,x
.ad6a	46 05		lsr $05				lsr 	zTemp1+1 					; shift right
.ad6c	66 04		ror $04				ror 	zTemp1+0
.ad6e	a5 04		lda $04				lda 	zTemp1 						; continue if is nonzero
.ad70	05 05		ora $05				ora 	zTemp1+1
.ad72	d0 d7		bne $ad4b			bne 	_BFMMultiply
.ad74	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/arithmetic/unary.asm

.ad77					Unary_Absolute:
.ad77	fa		plx				plx
.ad78	bd 00 07	lda $0700,x			lda 	highStack,x
.ad7b	30 04		bmi $ad81			bmi 	Unary_Negate_Code
.ad7d	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ad80					Unary_Negate:
.ad80	fa		plx				plx
.ad81					Unary_Negate_Code:
.ad81	38		sec				sec
.ad82	a9 00		lda #$00			lda		#0
.ad84	fd 00 06	sbc $0600,x			sbc 	lowStack,x
.ad87	9d 00 06	sta $0600,x			sta 	lowStack,x
.ad8a	a9 00		lda #$00			lda		#0
.ad8c	fd 00 07	sbc $0700,x			sbc 	highStack,x
.ad8f	9d 00 07	sta $0700,x			sta 	highStack,x
.ad92	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ad95					Unary_Not:
.ad95	fa		plx				plx
.ad96	bd 00 06	lda $0600,x			lda 	lowStack,x
.ad99	49 ff		eor #$ff			eor 	#$FF
.ad9b	9d 00 06	sta $0600,x			sta 	lowStack,x
.ad9e	bd 00 07	lda $0700,x			lda 	highStack,x
.ada1	49 ff		eor #$ff			eor 	#$FF
.ada3	9d 00 07	sta $0700,x			sta 	highStack,x
.ada6	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ada9					Unary_Increment:
.ada9	fa		plx				plx
.adaa	fe 00 06	inc $0600,x			inc 	lowStack,x
.adad	d0 03		bne $adb2			bne 	_UIExit
.adaf	fe 00 07	inc $0700,x			inc 	highStack,x
.adb2					_UIExit:
.adb2	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.adb5					Unary_Decrement:
.adb5	fa		plx				plx
.adb6	bd 00 06	lda $0600,x			lda 	lowStack,x
.adb9	d0 03		bne $adbe			bne 	_UDNoBorrow
.adbb	de 00 07	dec $0700,x			dec 	highStack,x
.adbe					_UDNoBorrow:
.adbe	de 00 06	dec $0600,x			dec 	lowStack,x
.adc1	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.adc4					Unary_BSwap:
.adc4	fa		plx				plx
.adc5	bd 00 06	lda $0600,x			lda 	lowStack,x
.adc8	48		pha				pha
.adc9	bd 00 07	lda $0700,x			lda 	highStack,x
.adcc	9d 00 06	sta $0600,x			sta 	lowStack,x
.adcf	68		pla				pla
.add0	9d 00 07	sta $0700,x			sta 	highStack,x
.add3	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.add6					Unary_Shl:
.add6	fa		plx				plx
.add7	1e 00 06	asl $0600,x			asl 	lowStack,x
.adda	3e 00 07	rol $0700,x			rol 	highStack,x
.addd	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ade0					Unary_Shr:
.ade0	fa		plx				plx
.ade1	5e 00 07	lsr $0700,x			lsr 	highStack,x
.ade4	7e 00 06	ror $0600,x			ror 	lowStack,x
.ade7	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.adea					Unary_Sgn:
.adea	fa		plx				plx
.adeb	bd 00 07	lda $0700,x			lda 	highStack,x 				; check bit 7.
.adee	10 0a		bpl $adfa			bpl 	_USNotNeg
.adf0	a9 ff		lda #$ff			lda 	#$FF 						; if -ve set to -1
.adf2	9d 00 06	sta $0600,x			sta 	lowStack,x
.adf5	9d 00 07	sta $0700,x			sta 	highStack,x
.adf8	80 10		bra $ae0a			bra 	_USExit
.adfa					_USNotNeg:
.adfa	1d 00 06	ora $0600,x			ora 	lowStack,x 					; A = Low|High
.adfd	9e 00 06	stz $0600,x			stz 	lowStack,x 					; Zero result
.ae00	9e 00 07	stz $0700,x			stz 	highStack,x
.ae03	c9 00		cmp #$00			cmp 	#0 							; if 0 return 0
.ae05	f0 03		beq $ae0a			beq 	_USExit
.ae07	fe 00 06	inc $0600,x			inc 	lowStack,x 					; else return 1.
.ae0a					_USExit:
.ae0a	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ae0d					Random_Handler:
.ae0d	fa		plx				plx
.ae0e	a5 11		lda $11				lda 	randomSeed
.ae10	05 12		ora $12				ora 	randomSeed+1
.ae12	d0 08		bne $ae1c			bne 	_RH_NoInit
.ae14	a9 7c		lda #$7c			lda 	#$7C
.ae16	85 11		sta $11				sta 	randomSeed
.ae18	a9 a1		lda #$a1			lda 	#$A1
.ae1a	85 12		sta $12				sta 	randomSeed+1
.ae1c					_RH_NoInit:
.ae1c	a5 11		lda $11				lda 	randomSeed
.ae1e	4a		lsr a		        lsr		a
.ae1f	26 12		rol $12		        rol 	randomSeed+1
.ae21	90 02		bcc $ae25	        bcc 	_RH_NoEor
.ae23	49 b4		eor #$b4	        eor 	#$B4
.ae25					_RH_NoEor:
.ae25	85 11		sta $11		        sta 	randomSeed
.ae27	45 12		eor $12		        eor 	randomSeed+1
.ae29	e8		inx		        inx
.ae2a	9d 00 07	sta $0700,x	        sta 	highStack,x
.ae2d	a5 11		lda $11		        lda 	randomSeed
.ae2f	9d 00 06	sta $0600,x	        sta 	lowStack,x
.ae32	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop

;******  Return to file: main.asm


;******  Processing file: words/structures/call.asm

.ae35					Command_Call:
.ae35	fa		plx				plx
.ae36	20 42 a4	jsr $a442			jsr 	StackPushPosition 				; save stack position
.ae39	a9 02		lda #$02			lda 	#KWD_SYS_CALL 					; push call marker
.ae3b	20 32 a4	jsr $a432			jsr 	StackPushByte
.ae3e	b1 00		lda ($00),y			lda 	(codePtr),y 					; copy target address into zTemp0
.ae40	85 02		sta $02				sta 	zTemp0
.ae42	c8		iny				iny
.ae43	b1 00		lda ($00),y			lda 	(codePtr),y
.ae45	85 03		sta $03				sta 	zTemp0+1
.ae47	a9 00		lda #$00			lda 	#(ProgramStart) & $FF
.ae49	85 00		sta $00				sta 	codePtr
.ae4b	a9 10		lda #$10			lda 	#(ProgramStart) >> 8
.ae4d	85 01		sta $01				sta 	codePtr+1
.ae4f	a0 01		ldy #$01			ldy 	#1
.ae51					_CCSearch:
.ae51	b2 00		lda ($00)			lda 	(codePtr)						; end of program
.ae53	f0 2d		beq $ae82			beq		_CCFail
.ae55	b1 00		lda ($00),y			lda 	(codePtr),y 					; compare line number LSB.
.ae57	c5 02		cmp $02				cmp 	zTemp0 							; if equal, go check the next.
.ae59	f0 0d		beq $ae68			beq 	_CCCheckMSB
.ae5b	18		clc				clc 									; forward to next line.
.ae5c	b2 00		lda ($00)			lda 	(codePtr)
.ae5e	65 00		adc $00				adc 	codePtr
.ae60	85 00		sta $00				sta 	codePtr
.ae62	90 ed		bcc $ae51			bcc 	_CCSearch
.ae64	e6 01		inc $01				inc 	codePtr+1
.ae66	80 e9		bra $ae51			bra 	_CCSearch
.ae68					_CCCheckMSB:
.ae68	c8		iny				iny 									; get MSB, keeping Y as 1
.ae69	b1 00		lda ($00),y			lda 	(codePtr),y
.ae6b	88		dey				dey
.ae6c	c5 03		cmp $03				cmp 	zTemp0+1						; not found go back.
.ae6e	d0 e1		bne $ae51			bne 	_CCSearch
.ae70	a0 03		ldy #$03			ldy 	#3 								; start running from here.
.ae72	b1 00		lda ($00),y			lda 	(codePtr),y 					; check it's a define
.ae74	c9 05		cmp #$05			cmp 	#KWD_SYS_DEFINE
.ae76	d0 0a		bne $ae82			bne 	_CCFail
.ae78	c8		iny				iny 									; get the length of this.
.ae79	b1 00		lda ($00),y			lda 	(codePtr),y
.ae7b	18		clc				clc
.ae7c	69 05		adc #$05			adc 	#5 								; move to the end of the definition
.ae7e	a8		tay				tay
.ae7f	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.ae82					_CCFail:
.ae82	20 92 a1	jsr $a192			jsr 	ErrorHandler
>ae85	43 41 4c 4c 3f 00				.text 	"CALL?",0
.ae8b					Command_Return:
.ae8b	fa		plx				plx
.ae8c	a9 02		lda #$02			lda 	#KWD_SYS_CALL 					; check it's a call
.ae8e	20 51 a4	jsr $a451			jsr 	StackCheckTop
.ae91	90 0f		bcc $aea2			bcc 	_CRFail
.ae93	a0 01		ldy #$01			ldy		#1								; return. Add 2 to skip call address
.ae95	20 5f a4	jsr $a45f			jsr 	StackRestorePosition
.ae98	c8		iny				iny
.ae99	c8		iny				iny
.ae9a	a9 04		lda #$04			lda 	#4 								; pop off stack
.ae9c	20 59 a4	jsr $a459			jsr 	StackPop
.ae9f	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aea2					_CRFail:
.aea2	20 92 a1	jsr $a192			jsr 	ErrorHandler
>aea5	43 41 4c 4c 3f 00				.text 	"CALL?",0

;******  Return to file: main.asm


;******  Processing file: words/structures/if.asm

.aeab					Structure_If:
.aeab	fa		plx				plx
.aeac	a9 06		lda #$06			lda 	#KWD_IF 						; push if marker.
.aeae	20 32 a4	jsr $a432			jsr 	StackPushByte
.aeb1	18		clc				clc
.aeb2	bd 00 06	lda $0600,x			lda 	lowStack,x 						; check TOS is zero
.aeb5	1d 00 07	ora $0700,x			ora 	highStack,x
.aeb8	ca		dex				dex 									; drop TOS
.aeb9	c9 00		cmp #$00			cmp 	#0 								; if zero, skip forward to ELSE or ENDIF
.aebb	d0 0e		bne $aecb			bne 	_SIFNoSkip 						; at this level.
.aebd	da		phx				phx
.aebe	a9 37		lda #$37			lda 	#KWD_ELSE
.aec0	a2 09		ldx #$09			ldx 	#KWD_ENDIF
.aec2	20 f8 ae	jsr $aef8			jsr 	StructSkipForward
.aec5	fa		plx				plx 									; restore X
.aec6	c9 37		cmp #$37			cmp 	#KWD_ELSE 						; if it was ELSE skip over that and run ELSE
.aec8	d0 01		bne $aecb			bne 	_SIFNoSkip 						; clause.
.aeca	c8		iny				iny
.aecb					_SIFNoSkip:
.aecb	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aece					Structure_Else:
.aece	fa		plx				plx
.aecf	a9 06		lda #$06			lda 	#KWD_IF 						; check IF on top
.aed1	20 51 a4	jsr $a451			jsr 	StackCheckTop
.aed4	90 0b		bcc $aee1			bcc 	SIFail
.aed6	da		phx				phx 									; got here by executing IF clause so skip
.aed7	a9 09		lda #$09			lda 	#KWD_ENDIF 						; forward to ENDIF
.aed9	aa		tax				tax
.aeda	20 f8 ae	jsr $aef8			jsr 	StructSkipForward
.aedd	fa		plx				plx
.aede	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aee1					SIFail:
.aee1	20 92 a1	jsr $a192			jsr 	ErrorHandler
>aee4	49 46 3f 00					.text 	"IF?",0
.aee8					Structure_Endif:
.aee8	fa		plx				plx
.aee9	a9 06		lda #$06			lda 	#KWD_IF 						; check IF on top
.aeeb	20 51 a4	jsr $a451			jsr 	StackCheckTop
.aeee	90 f1		bcc $aee1			bcc 	SIFail
.aef0	a9 01		lda #$01			lda 	#1 								; throw it.
.aef2	20 59 a4	jsr $a459			jsr 	StackPop
.aef5	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.aef8					StructSkipForward:
.aef8	85 02		sta $02				sta 	zTemp0 							; save the tokens to test
.aefa	86 03		stx $03				stx 	zTemp0+1
.aefc	64 04		stz $04				stz 	zTemp1 							; zero the level counter.
.aefe					_SSFLoop:
.aefe	b1 00		lda ($00),y			lda 	(codePtr),y 					; get current
.af00	a6 04		ldx $04				ldx 	zTemp1 							; if the structure level is non zero must fail
.af02	d0 08		bne $af0c			bne		_SSFFail
.af04	c5 02		cmp $02				cmp 	zTemp0 							; check for match.
.af06	f0 17		beq $af1f			beq 	_SSFEnd
.af08	c5 03		cmp $03				cmp 	zTemp0+1
.af0a	f0 13		beq $af1f			beq 	_SSFEnd
.af0c					_SSFFail:
.af0c	20 20 af	jsr $af20			jsr 	AdvanceInCode 					; skip over in code.
.af0f	b0 ed		bcs $aefe			bcs 	_SSFLoop 						; if not end of program, keep going.
.af11	20 92 a1	jsr $a192			jsr 	ErrorHandler
>af14	53 54 52 55 43 54 55 52				.text 	"STRUCTURE?",0
>af1c	45 3f 00
.af1f					_SSFEnd:
.af1f	60		rts				rts
.af20					AdvanceInCode:
.af20	b1 00		lda ($00),y			lda 	(codePtr),y 					; look at current
.af22	f0 28		beq $af4c			beq 	_AICEndOfLine 					; end of line.
.af24	c8		iny				iny 									; advance one.
.af25	c9 06		cmp #$06			cmp 	#TOK_NOT_CONTROL 				; is it a control
.af27	90 10		bcc $af39			bcc 	_AICControl
.af29	c9 0c		cmp #$0c			cmp 	#TOK_STRUCT_NEUTRAL 			; neutral token ?
.af2b	b0 0a		bcs $af37			bcs 	_AICExit
.af2d	e6 04		inc $04				inc 	zTemp1 							; bump the structure count.
.af2f	c9 09		cmp #$09			cmp 	#TOK_STRUCT_DEC 				; if decrement
.af31	90 04		bcc $af37			bcc 	_AICExit
.af33	c6 04		dec $04				dec 	zTemp1
.af35	c6 04		dec $04				dec 	zTemp1
.af37					_AICExit:
.af37	38		sec				sec
.af38	60		rts				rts
.af39					_AICControl:
.af39	c9 01		cmp #$01			cmp 	#KWD_SYS_CONST 					; constant and call advance +3
.af3b	f0 0b		beq $af48			beq 	_AICThree
.af3d	c9 02		cmp #$02			cmp 	#KWD_SYS_CALL
.af3f	f0 07		beq $af48			beq 	_AICThree
.af41	98		tya				tya										; skip over a string/comment/define.
.af42	38		sec				sec
.af43	71 00		adc ($00),y			adc 	(codePtr),y
.af45	a8		tay				tay
.af46	38		sec				sec
.af47	60		rts				rts
.af48					_AICThree:
.af48	c8		iny				iny
.af49	c8		iny				iny
.af4a	38		sec				sec
.af4b	60		rts				rts
.af4c					_AICEndOfLine:
.af4c	18		clc				clc 									; forward to next line.
.af4d	b2 00		lda ($00)			lda 	(codePtr)
.af4f	65 00		adc $00				adc 	codePtr
.af51	85 00		sta $00				sta 	codePtr
.af53	90 02		bcc $af57			bcc 	_AICNoCarry
.af55	e6 01		inc $01				inc 	codePtr+1
.af57					_AICNoCarry:
.af57	a0 03		ldy #$03			ldy 	#3 								; start of new line
.af59	b2 00		lda ($00)			lda 	(codePtr) 						; check offset is non zero
.af5b	d0 da		bne $af37			bne 	_AICExit
.af5d	18		clc				clc 									; program end.
.af5e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: words/structures/repeat.asm

.af5f					Struct_Repeat:
.af5f	fa		plx				plx
.af60	20 42 a4	jsr $a442			jsr 	StackPushPosition 				; save stack position
.af63	a9 07		lda #$07			lda 	#KWD_REPEAT 					; push repeat marker
.af65	20 32 a4	jsr $a432			jsr 	StackPushByte
.af68	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.af6b					Struct_Until:
.af6b	fa		plx				plx
.af6c	a9 07		lda #$07			lda 	#KWD_REPEAT 					; check it's a repeat
.af6e	20 51 a4	jsr $a451			jsr 	StackCheckTop
.af71	90 1b		bcc $af8e			bcc 	_SUFail
.af73	bd 00 06	lda $0600,x			lda		lowStack,x						; check it was zero ?
.af76	1d 00 07	ora $0700,x			ora 	highStack,x
.af79	ca		dex				dex
.af7a	09 00		ora #$00			ora 	#0
.af7c	f0 08		beq $af86			beq 	_SULoopBack 					; if so keep going.
.af7e	a9 04		lda #$04			lda 	#4 								; pop 4 bytes off the stack
.af80	20 59 a4	jsr $a459			jsr 	StackPop
.af83	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.af86					_SULoopBack:
.af86	a0 01		ldy #$01			ldy 	#1 								; transfer to position at (iStack),y
.af88	20 5f a4	jsr $a45f			jsr 	StackRestorePosition
.af8b	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.af8e					_SUFail:
.af8e	20 92 a1	jsr $a192			jsr 	ErrorHandler
>af91	4e 4f 20 52 45 50 45 41				.text 	"NO REPEAT",0
>af99	54 00

;******  Return to file: main.asm


;******  Processing file: words/structures/for.asm

.af9b					Struct_For:
.af9b	fa		plx				plx
.af9c	18		clc				clc
.af9d	bd 00 06	lda $0600,x			lda 	lowStack,x 					; push ~ count on the stack
.afa0	49 ff		eor #$ff			eor 	#$FF
.afa2	69 01		adc #$01			adc 	#1
.afa4	08		php				php
.afa5	20 32 a4	jsr $a432			jsr 	StackPushByte
.afa8	bd 00 07	lda $0700,x			lda 	highStack,x
.afab	49 ff		eor #$ff			eor 	#$FF
.afad	28		plp				plp
.afae	69 00		adc #$00			adc 	#0
.afb0	20 32 a4	jsr $a432			jsr 	StackPushByte
.afb3	ca		dex				dex 									; throw TOS
.afb4	20 42 a4	jsr $a442			jsr 	StackPushPosition 				; save stack position
.afb7	a9 08		lda #$08			lda 	#KWD_FOR 						; push for marker
.afb9	20 32 a4	jsr $a432			jsr 	StackPushByte
.afbc	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.afbf					Struct_Index:
.afbf	fa		plx				plx
.afc0	a9 08		lda #$08			lda 	#KWD_FOR 						; check it's a for
.afc2	20 51 a4	jsr $a451			jsr 	StackCheckTop
.afc5	90 43		bcc $b00a			bcc 	SNFail
.afc7	e8		inx				inx 									; new stack entry
.afc8	5a		phy				phy
.afc9	a0 04		ldy #$04			ldy 	#4 								; access index value
.afcb	b1 0a		lda ($0a),y			lda 	(iStack),y
.afcd	49 ff		eor #$ff			eor 	#$FF
.afcf	9d 00 07	sta $0700,x			sta 	highStack,x
.afd2	c8		iny				iny
.afd3	b1 0a		lda ($0a),y			lda 	(iStack),y
.afd5	49 ff		eor #$ff			eor 	#$FF
.afd7	9d 00 06	sta $0600,x			sta 	lowStack,x
.afda	7a		ply				ply 									; restore code pointer
.afdb	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.afde					Struct_Next:
.afde	fa		plx				plx
.afdf	a9 08		lda #$08			lda 	#KWD_FOR 						; check it's a for
.afe1	20 51 a4	jsr $a451			jsr 	StackCheckTop
.afe4	90 24		bcc $b00a			bcc 	SNFail
.afe6	5a		phy				phy 									; save code position
.afe7	a0 05		ldy #$05			ldy 	#5 								; bump the count
.afe9	b1 0a		lda ($0a),y			lda 	(iStack),y
.afeb	1a		inc a				inc 	a
.afec	91 0a		sta ($0a),y			sta 	(iStack),y
.afee	d0 11		bne $b001			bne 	_SNLoopBack
.aff0	88		dey				dey
.aff1	b1 0a		lda ($0a),y			lda 	(iStack),y
.aff3	1a		inc a				inc 	a
.aff4	91 0a		sta ($0a),y			sta 	(iStack),y
.aff6	d0 09		bne $b001			bne 	_SNLoopBack  					; non-zero loop back.
.aff8	7a		ply				ply 									; restore code position.
.aff9	a9 06		lda #$06			lda 	#6 								; pop 6 bytes off the stack
.affb	20 59 a4	jsr $a459			jsr 	StackPop
.affe	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.b001					_SNLoopBack:
.b001	7a		ply				ply 									; restore code position, being junked anyway.
.b002	a0 01		ldy #$01			ldy 	#1 								; transfer to position at (iStack),y
.b004	20 5f a4	jsr $a45f			jsr 	StackRestorePosition
.b007	4c f7 a1	jmp $a1f7			jmp 	ExecuteLoop
.b00a					SNFail:
.b00a	20 92 a1	jsr $a192			jsr 	ErrorHandler
>b00d	4e 4f 20 46 4f 52 00				.text 	"NO FOR",0

;******  Return to file: main.asm


;******  End of listing
